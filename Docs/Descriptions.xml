<?xml version="1.0" encoding="utf-8" ?>

<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **               X-Studio II Descriptions Definitions v1.0  Feb 2014            ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                    WHITESPACE IN THIS FILE IS VERY IMPORTANT                 ** -->
<!-- **                 DO NOT AUTO-FORMAT USING TOOLS LIKE VISUAL STUDIO            ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--

<DESCRIPTIONS>: Document root
==============

Element Properties:

language : X3 language ID
title    : File description which is displayed when this file is loaded. 
           Alter this string if you customize this file and share it with other forum users.
version  : Version name/number




<DESCRIPTIONS>::<MACROS> : Defines the macros used by descriptions to maintain uniform formatting
=========================

Child Elements:

macro : explained below


<DESCRIPTIONS>::<MACROS>::<MACRO> : Defines a text replacement macro that can be used in any macro or description
==================================

Element text specifies the replacement text, using the formatting tags found in X3 language files.
It can also contain formatting tag %s (string). 
                                            Note: Misuse of formatting tags will cause program crashes


Element Properties:

id         : Unique name, should be capitalized for consistency
parameters : (default = 0) Indicates number of formatting tags
recursive  : (default = 1) If zero, macro is not recursively searched for other macros. 
                           Used by macros with replacement text that contains their macro ID.





<DESCRIPTIONS>::<COMMANDS> : Defines the descriptions for commands 
===========================

Child Elements:

command : explained below


<DESCRIPTIONS>::<COMMANDS>::<COMMAND> : Describes a single command for a single game version
======================================

Element Properties:

id      : Command ID
version : Game version, must be one of: X2, X3R, X3TC, X3AP

The ID and Version must form a unique combination, 
eg. (id=100 ver=X2 + id=100 ver=X3TC) == OK
    (id=100 ver=X3R + id=100 ver=X3R) == CONFLICT over X3R





<DESCRIPTIONS>::<CONSTANTS> : Defines the descriptions for script-objects 
============================

Child Elements:

constant : explained below


<DESCRIPTIONS>::<CONSTANTS>::<CONSTANT> : Describes a single script-object (constant) for ALL game versions
========================================

Element Properties:

id   : Constant ID  (Defined by matching string ID in main language file)
page : Page ID      (Defined by matching string ID in main language file)

-->



<!-- ******************************************* -->
<!-- **         English Descriptions          ** -->
<!-- ******************************************* -->

<descriptions language="44" title="Standard MSCI Descriptions by mr.bear" version="v1.0">



<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                  Macros                                      ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<macros>

<!-- ******************************************* -->
<!-- **               Headings                ** -->
<!-- ******************************************* -->

<!-- {HEADING:szText}        Format headings in bold with underline -->
<macro id="HEADING" parameters="1">[b][u]%s:[/u][/b]</macro>

<!-- {SUBMISSION:szText}     Format credits in right-aligned italics -->
<macro id="SUBMISSION" parameters="1">[right][i](Submitted by %s)[/i][/right]</macro>

<!-- {CORRECTION:szText}     Format credits in right-aligned italics -->
<macro id="CORRECTION" parameters="1">[right][i](Updated by %s)[/i][/right]</macro>





    
<!-- ******************************************* -->
<!-- **             Text Formats              ** -->
<!-- ******************************************* -->

<!-- {VALUE:szValue}         Format values in red  -->
<macro id="VALUE" parameters="1">[b][red]`%s`[/red][/b]</macro>

<!-- {COMMAND:szCommand}     Format commands in black (bold)  -->
<macro id="COMMAND" parameters="1">[b]%s[/b]</macro>

<!-- {PARAMETER:szParameter} Enclose in braces. Format in black (bold)  -->
<macro id="PARAMETER" parameters="1">[b]«%s»[/b]</macro>

<!-- {UNITS:szUnits}         Format units in italics  -->
<macro id="UNITS" parameters="1">{TERMINOLOGY:%s}</macro>

<!-- {DATATYPE:szType}       Format script data-types in yellow (Bold)  -->
<macro id="TYPE" parameters="1">[b][blue]%s[/blue][/b]</macro>
<macro id="DATATYPE" parameters="1">[b][blue]%s[/blue][/b]</macro>

<!-- {CONSTANT:szConstant}   Format script constants in red (BOLD) -->
<macro id="CONSTANT" parameters="1">[b][red]%s[/red][/b]</macro>

<!-- {VARIABLE:szVariable}   Format variables in green (Bold)  -->
<macro id="VARIABLE" parameters="1">[b][green]%s[/green][/b]</macro>

<!-- {PROPERTY:szSkill}      Format properties in purple  -->
<macro id="PROPERTY" parameters="1">[magenta]%s[/magenta]</macro>

<!-- {CLASS:szObjectClass}   Format Object Classes in yellow (bold)  -->
<macro id="CLASS" parameters="1">[b][yellow]%s[/yellow][/b]</macro>

<!-- {KEYWORD:szKeyword}     Format keywords in blue (bold)  -->
<macro id="KEYWORD" parameters="1">[b][blue]%s[/blue][/b]</macro>

<!-- {OBJECT:szObject}       Format objects in orange (Bold)  -->
<macro id="OBJECT" parameters="1">[b][orange]%s[/orange][/b]</macro>

<!-- {TERMINOLOGY:szWord}    Format terminology in italics   -->
<macro id="TERMINOLOGY" parameters="1">[i]%s[/i]</macro>






<!-- ******************************************* -->
<!-- **             Game Types                ** -->
<!-- ******************************************* -->

<!--Data/Object Types-->
<macro id="AL_PLUGIN">{TYPE:artificial life plugin}</macro>
<macro id="AL_PLUGINS">{TYPE:artificial life plugins}</macro>
<macro id="ARRAY">{TYPE:array}</macro>
<macro id="ARRAYS">{TYPE:arrays}</macro>
<macro id="ASTEROID">{TYPE:asteroid}</macro>
<macro id="ASTEROIDS">{TYPE:asteroids}</macro>
<macro id="ASTRONAUT">{TYPE:astronaut}</macro>
<macro id="ASTRONAUTS">{TYPE:astronauts}</macro>
<macro id="CORPORATION">{TYPE:corporation}</macro>
<macro id="DEBRIS">{TYPE:debris}</macro>
<macro id="DOCK">{TYPE:dock}</macro>
<macro id="DOCKS">{TYPE:docks}</macro>
<macro id="FACTORY">{TYPE:factory}</macro>
<macro id="FACTORIES">{TYPE:factories}</macro>
<macro id="INTEGER">{TYPE:integer}</macro>
<macro id="INTEGERS">{TYPE:integers}</macro>
<macro id="JUMPGATE">{TYPE:jumpgate}</macro>
<macro id="JUMPGATES">{TYPE:jumpgates}</macro>
<macro id="FLYINGWARE">{TYPE:flying ware}</macro>
<macro id="FLYINGWARES">{TYPE:flying wares}</macro>
<macro id="GUN">{TYPE:gun}</macro>
<macro id="GUNS">{TYPE:guns}</macro>
<macro id="LASER">{TYPE:laser}</macro>
<macro id="LASERS">{TYPE:lasers}</macro>
<macro id="MARINE">{TYPE:marine}</macro>
<macro id="MARINES">{TYPE:marines}</macro>
<macro id="MISSILE">{TYPE:missile}</macro>
<macro id="MISSILES">{TYPE:missiles}</macro>
<macro id="NEBULA">{TYPE:nebula}</macro>
<macro id="NEBULAE">{TYPE:nebulae}</macro>
<macro id="OBJ">{TYPE:object}</macro>
<macro id="OBJS">{TYPE:objects}</macro>
<macro id="PASSENGER">{TYPE:passenger}</macro>
<macro id="PASSENGERS">{TYPE:passengers}</macro>
<macro id="PILOT">{TYPE:pilot}</macro>
<macro id="PILOTS">{TYPE:pilots}</macro>
<macro id="PLANET">{TYPE:planet}</macro>
<macro id="PLANETS">{TYPE:planets}</macro>
<macro id="RACE">{TYPE:race}</macro>
<macro id="RACES">{TYPE:races}</macro>
<macro id="SECTOR">{TYPE:sector}</macro>
<macro id="SECTORS">{TYPE:sectors}</macro>
<macro id="SECTOROBJECT">{TYPE:sector-object}</macro>
<macro id="SECTOROBJECTS">{TYPE:sector-objects}</macro>
<macro id="SHIP">{TYPE:ship}</macro>
<macro id="SHIPS">{TYPE:ships}</macro>
<macro id="SHIPYARD">{TYPE:shipyard}</macro>
<macro id="SHIPYARDS">{TYPE:shipyards}</macro>
<macro id="SHIELD">{TYPE:shield}</macro>
<macro id="SHIELDS">{TYPE:shields}</macro>
<macro id="SPECIAL">{TYPE:special}</macro>
<macro id="SPECIALS">{TYPE:specials}</macro>
<macro id="STATION">{TYPE:station}</macro>
<macro id="STATIONS">{TYPE:stations}</macro>
<macro id="STRING">{TYPE:string}</macro>
<macro id="STRINGS">{TYPE:strings}</macro>
<macro id="SUN">{TYPE:sun}</macro>
<macro id="SUNS">{TYPE:suns}</macro>
<macro id="TURRET">{TYPE:turret}</macro>
<macro id="TURRETS">{TYPE:turrets}</macro>
<macro id="WING">{TYPE:wing}</macro>
<macro id="WINGS">{TYPE:wings}</macro>
<macro id="WARE">{TYPE:ware}</macro>
<macro id="WARES">{TYPE:wares}</macro>

<!--Constants-->
<macro id="TRUE" recursive="0">[b][green]\[TRUE\][/green][/b]</macro>
<macro id="FALSE" recursive="0">[b][red]\[FALSE\][/red][/b]</macro>
<macro id="NULL">{VARIABLE:null}</macro>

<!--Terminology-->
<macro id="OBJCLASS">{TERMINOLOGY:Object Class}</macro>
<macro id="OBJCLASSES">{TERMINOLOGY:Object Classes}</macro>
<macro id="OBJTYPE">{TERMINOLOGY:Type}</macro>
<macro id="OBJTYPES">{TERMINOLOGY:Types}</macro>
<macro id="MAINTYPE">{TERMINOLOGY:MainType}</macro>
<macro id="MAINTYPES">{TERMINOLOGY:MainTypes}</macro>
<macro id="SUBTYPE">{TERMINOLOGY:SubType}</macro>
<macro id="SUBTYPES">{TERMINOLOGY:SubTypes}</macro>
<macro id="FLAG">{TERMINOLOGY:search flag}</macro>
<macro id="FLAGS">{TERMINOLOGY:search flags}</macro>
<macro id="TFILE">{TERMINOLOGY:T-File}</macro>

<!--Properties-->
<macro id="DOCKED">{PROPERTY:docked}</macro>
<macro id="HOMEBASE">{PROPERTY:homebase}</macro>
<macro id="FORMATION">{PROPERTY:formation}</macro>
<macro id="FORMATIONLEADER">{PROPERTY:formation leader}</macro>
<macro id="OWNEDBY">{PROPERTY:owned by}</macro>
<macro id="MANUFACTUREDBY">{PROPERTY:manufactured by}</macro>
<macro id="SECURITY">{PROPERTY:security}</macro>
<macro id="NOTORIETY">{PROPERTY:notoriety}</macro>
<macro id="PRODUCTS">{PROPERTY:products}</macro>
<macro id="PRODUCT">{PROPERTY:product}</macro>
<macro id="RESOURCES">{PROPERTY:resources}</macro>
<macro id="RESOURCE">{PROPERTY:resource}</macro>
<macro id="SERIAL">{PROPERTY:station serial}</macro>
<macro id="SERIALS">{PROPERTY:station serials}</macro>
<macro id="PRIMARYRESOURCE">{PROPERTY:primary resource}</macro>
<macro id="SECONDARYRESOURCE">{PROPERTY:secondary resource}</macro>

<!--Ship Sizes-->
<macro id="M0_OBJECT">{OBJECT:Dreadnought \(M0\)}</macro>
<macro id="M1_OBJECT">{OBJECT:Carrier \(M1\)}</macro>
<macro id="M2_OBJECT">{OBJECT:Battleship \(M2\)}</macro>
<macro id="M3_OBJECT">{OBJECT:Heavy Fighter \(M3\)}</macro>
<macro id="M4_OBJECT">{OBJECT:Medium Fighter \(M4\)}</macro>
<macro id="M5_OBJECT">{OBJECT:Light Fighter \(M5\)}</macro>
<macro id="M6_OBJECT">{OBJECT:Corvette \(M6\)}</macro>
<macro id="M7_OBJECT">{OBJECT:Frigate \(M7\)}</macro>
<macro id="M7M_OBJECT">{OBJECT:Missile Frigate \(M7M\)}</macro>
<macro id="M8_OBJECT">{OBJECT:Bomber \(M8\)}</macro>
<macro id="TS_OBJECT">{OBJECT:Small Transport \(TS\)}</macro>
<macro id="PTS_OBJECT">{OBJECT:Small Pirate Transport \(TS\)}</macro>
<macro id="TL_OBJECT">{OBJECT:Large Transport \(TL\)}</macro>
<macro id="PTL_OBJECT">{OBJECT:Large Pirate Transport \(TL\)}</macro>
<macro id="TM_OBJECT">{OBJECT:Military Transport \(TM\)}</macro>
<macro id="TP_OBJECT">{OBJECT:Personnel Transport \(TP\)}</macro>

<!--Ship Classes-->
<macro id="M0_CLASS">{CLASS:Dreadnought \(M0\)}</macro>
<macro id="M1_CLASS">{CLASS:Carrier \(M1\)}</macro>
<macro id="M2_CLASS">{CLASS:Battleship \(M2\)}</macro>
<macro id="M3_CLASS">{CLASS:Heavy Fighter \(M3\)}</macro>
<macro id="M4_CLASS">{CLASS:Medium Fighter \(M4\)}</macro>
<macro id="M5_CLASS">{CLASS:Light Fighter \(M5\)}</macro>
<macro id="M6_CLASS">{CLASS:Corvette \(M6\)}</macro>
<macro id="M7_CLASS">{CLASS:Frigate \(M7\)}</macro>
<macro id="M7M_CLASS">{CLASS:Missile Frigate \(M7M\)}</macro>
<macro id="M8_CLASS">{CLASS:Bomber \(M8\)}</macro>
<macro id="TS_CLASS">{CLASS:Small Transport \(TS\)}</macro>
<macro id="PTS_CLASS">{CLASS:Small Pirate Transport \(TS\)}</macro>
<macro id="TL_CLASS">{CLASS:Large Transport \(TL\)}</macro>
<macro id="PTL_CLASS">{CLASS:Large Pirate Transport \(TL\)}</macro>
<macro id="TM_CLASS">{CLASS:Military Transport \(TM\)}</macro>
<macro id="TP_CLASS">{CLASS:Personnel Transport \(TP\)}</macro>

<!--Special-->

<macro id="X_EDITOR">{TERMINOLOGY:X³ Editor} by DoubleShadow</macro>
<macro id="HANDBOOK">{TERMINOLOGY:X² Programmer`s Handbook} by Kurt Fitzner</macro>
<macro id="X_SERIES">{TERMINOLOGY:X-Series}</macro>
<macro id="X_STUDIO">{TERMINOLOGY:X-Studio}</macro>
<macro id="EXSCRIPTOR">{TERMINOLOGY:eXscriptor}</macro>
<macro id="MD">{TERMINOLOGY:Mission Director}</macro>
<macro id="MSCI">{TERMINOLOGY:M.S.C.I.}</macro>
<macro id="X2">{TERMINOLOGY:X² - The Threat}</macro>
<macro id="X3R">{TERMINOLOGY:X³ - Reunion}</macro>
<macro id="X3TC">{TERMINOLOGY:X³ - Terran Conflict}</macro>
<macro id="X3AP">{TERMINOLOGY:X³ - Albion Prelude}</macro>





<!-- ******************************************* -->
<!-- **             Stock Phrases             ** -->
<!-- ******************************************* -->

<!--X-Studio-->

<!--X-Studio--> 
<macro id="ABOUT_MACROS">{HEADING:Macros}

Macros are not real commands, they are convenient placeholders for a small series of commands.  As such they will appear in EXSCRIPTOR and MSCI as an ordinary block of commands.  This macro will appear as:</macro>


<macro id="UNDOCUMENTED">[b][red]The functionality of this command is unknown.[/red][/b]

If you know how this command works, please right-click on this command and click `Submit Correction`.</macro>


<macro id="NOT_IMPLEMENTED">This command was never implemented by Egosoft.</macro>


<!--Arrays-->
<macro id="ABOUT_COPYING_ARRAYS">{HEADING:Copying Vs. Linking Arrays}

The code below will not copy the contents of the array {VARIABLE:$aShips}, it will link {VARIABLE:$aShipsCopy} to the contents of the array {VARIABLE:$aShips} so that any changes to the array will be reflected in both variables.
[center]{VARIABLE:$aShipsCopy} = {VARIABLE:$aShips}[/center]</macro>


<!--Asteroids-->
<macro id="ABOUT_MINERAL_TYPES">The {PROPERTY:mineral type} is the SUBTYPE of a WARE from the 'WareM' TFILE, the default values are: [center]{OBJECT:Ore} = 0\t{OBJECT:Silicon} = 1\t{OBJECT:Nvidium} = 2\t{OBJECT:Ice} = 3[/center]</macro>



<!--JumpGates-->
<macro id="ROUTE_CALCULATIONS">{HEADING:Route Calculations}

This commands internally calculates the shortest route in {UNITS:meters} rather than {PROPERTY:jump distance}.
In certain circumstances where SECTOR JUMPGATES are far apart, this command will always use the shortest, fastest route.</macro>


<macro id="ABOUT_JUMPGATE_ID">{HEADING:Jump Gate IDs}

In the vanilla map, each {PROPERTY:jump gate ID} corresponds to the direction of travel:
[center]{VARIABLE:0} - [b]Northern[/b]\t{VARIABLE:1} - [b]Eastern[/b]\t{VARIABLE:2} - [b]Southern[/b]\t{VARIABLE:3}- [b]Western[/b][/center]</macro>



<!--Game Concepts-->

<macro id="ABOUT_AL_PLUGINS">{HEADING:Artificial Life Plugins}

 AL_PLUGINS are scripts that are called by the game engine in response to a timer to create the illusion of a changing galaxy.  The events are listed below:

{CONSTANT:init} - User started a new game
{CONSTANT:reinit} - User loaded a save game
{CONSTANT:start} - User has commanded plugin to start
{CONSTANT:stop} - User has commanded plugin to stop
{CONSTANT:timer} - Sent every x seconds so plugin can perform tasks
{CONSTANT:isenabled} - Queries whether the plugin is enabled</macro>

<macro id="ABOUT_ENVIRONMENT">{HEADING:Environment}

The {CONSTANT:\[ENVIRONMENT\]} constant reflects the container of an OBJ.  If an OBJ is in space then the {PROPERTY:environment} is the SECTOR, if an OBJ is DOCKED then the {PROPERTY:environment} is the {CLASS:Carrier} or STATION with which it is DOCKED.</macro>


<macro id="ABOUT_GUNS_AND_TURRETS">{HEADING:Guns and Turrets}

Each TURRET on a SHIP defines the position and angle from which a SHIP can fire.  Each TURRET may contain one or more GUNS in individually numbered {PROPERTY:gun slots}.  Each GUN has different properties which define the amount of damage and rate of fire.

The {PROPERTY:main turret} on any SHIP is always TURRET zero.</macro>


<macro id="ABOUT_LOCAL_AND_GLOBAL_VARIABLES">{HEADING:Local and Global Variables}

You can store any value in a SHIP or STATION using a {PROPERTY:local variable}.  This value will remain until you alter it, or the OBJ is destroyed.  Each {PROPERTY:local variable} within an OBJ must have a unique name.
Only {TERMINOLOGY:Albion Prelude 2.5.3} or newer will allow you to store values in SECTORS.

You can store any value into the game universe using a {PROPERTY:global variable}.  This value will remain until you set it to NULL.  Each {PROPERTY:global variable} must have a unique name.{CORRECTION:Jack08}</macro>


<macro id="ABOUT_MAINTYPES_AND_SUBTYPES">{HEADING:MainTypes and SubTypes}

The OBJTYPE of every OBJ in the game is defined by a category and ID.  Each category is called a MAINTYPE, and each item within a category is called a SUBTYPE. The {TYPE:Argon Buster} is a SUBTYPE in the {CONSTANT:SSTYPE_SHIPS} MAINTYPE, for example, and the {TYPE:FireFly Missile} is a SUBTYPE in the {CONSTANT:SSTYPE_MISSILES} MAINTYPE.

This only defines the OBJTYPE of an OBJ - each {TYPE:Firefly Missile} fired in the game is unique, but they are all of the OBJTYPE {TYPE:FireFly Missile}.</macro>


<macro id="ABOUT_NOTORIETY">{HEADING:Notoriety}

{PROPERTY:Notoriety} determines how friendly a RACE, CORPORATION or the player is towards another RACE.  These values also define the player`s {PROPERTY:trade rank}, {PROPERTY:fight rank} and {PROPERTY:mission rank}, although the titles used for each type are different.

{HEADING:Notoriety Ranks}

Rank index {CONSTANT:-5} = Raw value between -1,000,000 and -100,000
Rank index {CONSTANT:-4} = Raw value between -100,000 and -10,000
Rank index {CONSTANT:-3} = Raw value between -10,000 and -1,000
Rank index {CONSTANT:-2} = Raw value between -1,000 and -100
Rank index {CONSTANT:-1} = Raw value between -100 and -10
Rank index  {CONSTANT:0} = Raw value between -10 and +10
Rank index  {CONSTANT:1} = Raw value between 10 and 33
Rank index  {CONSTANT:2} = Raw value between 33 and 100
Rank index  {CONSTANT:3} = Raw value between 100 and 333
Rank index  {CONSTANT:4} = Raw value between 333 and 1,000
Rank index  {CONSTANT:5} = Raw value between 1,000 and 3,333
Rank index  {CONSTANT:6} = Raw value between 3,333 and 10,000
Rank index  {CONSTANT:7} = Raw value between 10,000 and 33,333
Rank index  {CONSTANT:8} = Raw value between 33,333 and 100,000
Rank index  {CONSTANT:9} = Raw value between 100,000 and 333,333
Rank index {CONSTANT:10} = Raw value between 333,333 and 1,000,000

{HEADING:Effects of Rank}

At rank index {CONSTANT:-3} or below, SHIPS are attacked in {PROPERTY:border sectors}
At rank index {CONSTANT:-2} or below, SHIPS are attacked in {PROPERTY:core sectors}
At rank index {CONSTANT:0} or above, SHIPS may dock in {PROPERTY:border sectors}
At rank index {CONSTANT:1} or above, SHIPS may dock in {PROPERTY:core sectors}</macro>


<macro id="ABOUT_OBJECT_CLASSES">{HEADING:Object Classes}

Every {TYPE:object} belongs to one or more OBJCLASSES such as {CLASS:Ship}, {CLASS:Station} or {CLASS:Huge Ship}.  Some OBJCLASSES contain other OBJCLASSES, eg. {CLASS:Station} contains {CLASS:Factory} and {CLASS:Dock}.</macro>


<macro id="ABOUT_RACE_LOGIC">{HEADING:Race Logic}

{TERMINOLOGY:Race Logic} is used to control SHIPS that do not belong to the player.  If you wish to create and control OBJS of another RACE, you must disable {TERMINOLOGY:Race Logic} or the game engine will usurp your control of the OBJ.</macro>


<macro id="ABOUT_START_ACTIONS">{HEADING:Start Actions}

Certain OBJCLASSES execute a pre-determined {TYPE:command} when they are created:

» {M0_CLASS} and {M1_CLASS} and {M2_CLASS} and {M6_CLASS}

Always {CONSTANT:\[COMMAND_KILL_ENEMIES\]}

» {M3_CLASS} and {M4_CLASS} and {M4_CLASS}

If SHIP is {PROPERTY:player owned} then {CONSTANT:\[COMMAND_NONE\]}
If SHIP has a {PROPERTY:formation leader} then {CONSTANT:\[COMMAND_PROTECT\]}
If SHIP is under attack then {CONSTANT:\[COMMAND_ATTACK\]}
If SHIP is {PROPERTY:Xenon}, {PROPERTY:Pirate} or {PROPERTY:Kh`aak} then {CONSTANT:\[COMMAND_KILL_ENEMIES\]}
If none of the above then {CONSTANT:\[COMMAND_RETURN_HOME\]}

» {TS_CLASS}

If {PROPERTY:player owned} then {CONSTANT:\[COMMAND_NONE\]}
If SHIP has a {PROPERTY:homebase} then {CONSTANT:\[COMMAND_RETURN_HOME\]}
If none of the above then {CONSTANT:\[COMMAND_DOCKAT\]}

» {CLASS:Goner Ship} - If {PROPERTY:player owned} then {CONSTANT:\[COMMAND_NONE\]} otherwise {CONSTANT:\[COMMAND_PREACH\]}
» {CLASS:SpaceFly} - Always {CONSTANT:\[COMMAND_FOLLOW\]}
» {CLASS:UFO} - Always {CONSTANT:\[COMMAND_PREACH\]}

All other OBJCLASSES start with {CONSTANT:\[COMMAND_NONE\]}</macro>



<!--Marines and Boarding-->
<macro id="ABOUT_MARINE_SKILLS">{HEADING:Marine Skills}

Each MARINE has four skills: {PROPERTY:fighting}, {PROPERTY:hacking}, {PROPERTY:engineering} and {PROPERTY:mechanical}, which are numbered between 0 and 100 \(in the vanilla game\).  Each skill is used to affect different parts of the boarding procedure.</macro>


<macro id="ABOUT_BOARDING_PROCEDURE">{HEADING:Boarding Procedure}

The boarding procedure is a three part process:

[i]Breaching the Hull:[/i] The success of this procedure is dependent on a {TYPE:marine`s} {PROPERTY:mechanical skill}, the use of a {OBJECT:Boarding Pod}, the {PROPERTY:defence level} of the SHIP and the presence of {OBJECT:Hull Polarising Device}.

[i]Fighting the Crew:[/i] The success of this procedure is dependent on a {TYPE:marine`s} {PROPERTY:fighting skill} and the presence of {OBJECT:Internal Sentry Lasers}.

[i]Hacking the Computer:[/i] The success of this procedure is dependent on a {TYPE:marine`s} {PROPERTY:hacking skill} and the {PROPERTY:security level} of the SHIP.

The {PROPERTY:engineering skill} does not affect the success of the boarding procedure, instead it reduces the level of damage done to the target SHIP.</macro>


<macro id="ABOUT_MARINE_STORAGE">{HEADING:Marine Storage}

Only STATIONS and the following classes of SHIP are capable of containing MARINES:
[center]{M1_CLASS}\t{M2_CLASS}\t{M6_CLASS}\t{M7_CLASS}
\t{TL_CLASS}\t{TM_CLASS}\t{TP_CLASS}[/center]</macro>


<macro id="ABOUT_BOARDING_TARGETS">{HEADING:Boarding Targets}

Only the following classes of SHIP are capable of being boarded by MARINES:
[center]{M1_CLASS}\t{M2_CLASS}\t{M6_CLASS}\t{M7_CLASS}
{TL_CLASS}\t{TM_CLASS}[/center]</macro>



<!--Rotation System--> 
<macro id="ABOUT_OBJECT_ROTATION">{HEADING:Object Rotation}

The direction in which every object faces is defined by it`s alignment on three axes: x, y and z.
[center]x-axis : {PROPERTY:yaw}\ty-axis : {PROPERTY:pitch}\tz-axis : {PROPERTY:roll}[/center]</macro>



<!--Sectors-->
<macro id="ABOUT_SECTOR_SECURITY">{HEADING:Sector Security}

The {PROPERTY:security} of a SECTOR determines the {PROPERTY:player rank} required to enter the SECTOR and trade with the STATIONS within it.  A lower {PROPERTY:player rank} is required for {PROPERTY:border sectors} than for {PROPERTY:core sectors}.

{OBJECT:Unknown Sectors} and {OBJECT:Xenon Sectors} have no {PROPERTY:security} rating and can be entered freely.</macro>


<!--SectorObjects-->
<macro id="ABOUT_SECTOR_OBJECTS">{HEADING:Sector Objects}
When a SECTOR is rendered, each OBJ in the SECTOR is given a SECTOROBJECT in turn, starting with the SECTOR itself which is usually followed by the SUN, NEBULAE, then STATIONS, SHIPS, and ASTEROIDS.

The {TERMINOLOGY:Sector Object ID} is an INTEGER that starts at one for the first OBJ rendered in the first SECTOR entered after a new game is started or loaded, and increases by one for every new one created.  When a SHIP enters the rendered SECTOR, a new SECTOROBJECT with a unique ID is created.  When it leaves, it is destroyed.

{SEE_HANDBOOK_PAGE:72}</macro>


<!--Script Execution-->
<macro id="COMMAND_INTERRUPTABLE">{HEADING:Interrupt Point}

Your script will yield execution to other scripts and signals during this command.</macro>


<macro id="ABOUT_COMMANDS_TASKS_AND_SIGNALS">{HEADING:Commands, Tasks and Signals}

Each OBJ can concurrently execute an unlimited number of scripts, with each script representing a {TYPE:command} or a {TYPE:signal}.

The OBJ assigns each script a {PROPERTY:task ID}, the first twenty of which have a pre-defined purpose.

» To run two scripts concurrently, you should run them as different {PROPERTY:tasks}.
» To stop one script and execute another, you should run them on the same {PROPERTY:task}.
» To pause a script while you execute another, and then resume the original script, you should {TERMINOLOGY:interrupt} the script on the same {PROPERTY:task}.

All {TYPE:signals} use the {TERMINOLOGY:interrupt} method of execution.  You must choose the execution method of script calls.</macro>


<macro id="ABOUT_INTERRUPTS_AND_YIELDING">{HEADING:Interrupts and Yielding}

When a script reaches an {TERMINOLOGY:interruptable} command, it will yield to other scripts in the game.  The following special actions can also occurr at {TERMINOLOGY:interrupt points}:

» If another command has been ordered to execute in the same {PROPERTY:task}, the script will be terminated at the first {TERMINOLOGY:interrupt point} and the new command will begin.

» If another script has been ordered to {TERMINOLOGY:interrupt} this {PROPERTY:task}, the new script will wait until the first {TERMINOLOGY:interrupt point}, execute, finish, then resume the original script.

{RELATED_COMMAND_3:To execute a script serially or concurrently or as an interrupt,call script,begin task,interrupt with script,Flow Control}</macro>


<!--Strings-->
<macro id="LOADTEXT_REQUIREMENT">If the STRING resides in a custom {TERMINOLOGY:Language Strings File}, you must have previously loaded that file or this command will return a STRING containing a `read text:` error.</macro>


<!--Unit Indicies-->
<macro id="ABOUT_JUMP_DISTANCES">All {PROPERTY:jump distances} are zero-based.</macro>




<!-- ******************************************* -->
<!-- **        Parameterized Phrases          ** -->
<!-- ******************************************* -->



<!--Debugging-->
<macro id="TODO" parameters="1">[b][red]WIP: %s[/red][/b]</macro>  



<!--Related Commands--> 
<macro id="RELATED_COMMAND" parameters="3">{HEADING:Related Commands}

%s, see the {COMMAND:%s} command in the [b]%s[/b] category of [i]Script Commands[/i]</macro>


<macro id="RELATED_COMMAND_2" parameters="4">{HEADING:Related Commands}

%s, see the {COMMAND:%s} and {COMMAND:%s} commands in the [b]%s[/b] category of [i]Script Commands[/i]</macro>


<macro id="RELATED_COMMAND_3" parameters="5">{HEADING:Related Commands}

%s, see the {COMMAND:%s}, {COMMAND:%s} and {COMMAND:%s} commands in the [b]%s[/b] category of [i]Script Commands[/i]</macro>


<macro id="INLINE_RELATED_COMMAND" parameters="3">%s, see the {COMMAND:%s} command in the [b]%s[/b] category of [i]Script Commands[/i]</macro>


<macro id="INLINE_RELATED_COMMAND_2" parameters="4">%s, see the {COMMAND:%s} and {COMMAND:%s} commands in the [b]%s[/b] category of [i]Script Commands[/i]</macro>



<!--Related Lists--> 
<macro id="RELATED_GAME_OBJECT_LIST" parameters="2">{HEADING:See Also}

For a full list of available %s, see the [b]%s[/b] category of [i]Game Objects[/i].</macro>


<macro id="RELATED_SCRIPT_OBJECT_LIST" parameters="2">{HEADING:See Also}

For a full list of available %s, see the [b]%s[/b] category of [i]Script Objects[/i].</macro>


<macro id="RELATED_COMMAND_LIST" parameters="2">{HEADING:See Also}

For a full list of available %s commands, see the [b]%s[/b] category of [i]Script Commands[/i].</macro>

<macro id="RELATED_MEDIA" parameters="1">{HEADING:See Also}

For a full list of available [i]%s[/i], see the [i]Media Browser[/i].</macro>



<!--Co-Ordinate System--> 
<macro id="COORDINATES" parameters="4">{HEADING:Positioning Objects}

The %s is positioned at the co-ordinates \(x, y, z\) in the following order:
[center]x=$%s, y=$%s, z=$%s.[/center]</macro>


<!--External Reference--> 
<macro id="SEE_HANDBOOK_AND_XEDITOR" parameters="1">{HEADING:See Also}

You can use the X_EDITOR to browse available %s, or see the HANDBOOK.</macro>


<macro id="SEE_HANDBOOK" parameters="1">{HEADING:See Also}

See the HANDBOOK to browse available %s.</macro>


<macro id="SEE_HANDBOOK_PAGE" parameters="1">See page %s of the HANDBOOK for further information.</macro>


<macro id="SEE_XEDITOR" parameters="1">{HEADING:See Also}

You can use the X_EDITOR to browse available %s.</macro>



<!--Command Compatibility-->
<macro id="COMPATIBILITY_1" parameters="1">{HEADING:Compatibility}

This is one of the few commands Egosoft modified over the course of the X_SERIES.
This command is compatible with: {%s}.</macro>

<macro id="COMPATIBILITY_2" parameters="2">{HEADING:Compatibility}

This is one of the few commands Egosoft modified over the course of the X_SERIES.
This command is compatible with: {%s} and {%s}.</macro>

<macro id="COMPATIBILITY_3" parameters="3">{HEADING:Compatibility}

This is one of the few commands Egosoft modified over the course of the X_SERIES.
This command is compatible with: {%s}, {%s} and {%s}.</macro>

<macro id="COMMAND_NAME_CHANGED" parameters="1">{HEADING:X-Studio Specific}

This command has been renamed by X-Studio for greater clarity but will be displayed using the original name in EXSCRIPTOR and the MSCI.

Original command name: {COMMAND:%s}</macro>



<!--Fly Command Descriptions-->
<macro id="RETURNS_FLIGHT_CODE">This command returns one of the following {TYPE:flight return codes} upon completion:</macro>

<macro id="FLIGHT_BREAK" parameters="1">{CONSTANT:\[FLRET_BREAK\]} - The %s was interruped by the execution of another command</macro>

<macro id="FLIGHT_BREAK_JUMPED" parameters="1">{CONSTANT:\[FLRET_BREAK\]} - The target SHIP $%s has been destroyed or jumped to another SECTOR</macro>

<macro id="FLIGHT_ERROR" parameters="1">{CONSTANT:\[FLRET_ERROR\]} - The SHIP was unable to complete the %s due to an error</macro>

<macro id="FLIGHT_INTERRUPTED" parameters="1">{CONSTANT:\[FLRET_INTERRUPTED\]} - The %s was interruped by the execution of another script</macro>

<macro id="FLIGHT_INVALIDPARAMS">{CONSTANT:\[FLRET_INVALIDPARAMS\]} - The SHIP $0 does not exist</macro>

<macro id="FLIGHT_NOCOMMANDS" parameters="1">{CONSTANT:\[FLRET_NOCOMMANDS\]} - The %s completed successfully</macro>

<macro id="FLIGHT_TIMEOUT" parameters="1">{CONSTANT:\[FLRET_TIMEOUT\]} - The timeout period $%s has elapsed</macro>




<!--Search Command Descriptions-->
<macro id="SEARCH_SYNTAX" parameters="1">If no matching %s can be found then this command returns NULL.  There are a number of optional search parameters explained below that you can omit or combine to refine the search.  To omit a parameter, set it to NULL.</macro>

<macro id="SEARCH_RANGE" parameters="3">The %s must be within a {PROPERTY:jump distance} of $%s from the SECTOR $%s.</macro>

<macro id="SEARCH_RANGE_DIFFERENT" parameters="2">If $%s is NULL then the SECTOR containing $%s is used instead.</macro>

<macro id="SEARCH_BY_DISTANCE" parameters="3">Only return %s that are within $%s {UNITS:meters} of the {TYPE:object} $%s</macro>

<macro id="SEARCH_BY_DISTANCE_2" parameters="4">Only return %s within $%s {UNITS:meters} of the {TYPE:object} $%s or the {PROPERTY:position} $%s</macro>

<macro id="SEARCH_EXCLUDE_ARRAY" parameters="2">Do not return of any of the %s in the ARRAY $%s</macro>

<macro id="SEARCH_BY_SERIAL" parameters="1">Only return STATIONS with the SERIAL $%s</macro>

<macro id="SEARCH_BY_TYPE_CLASS" parameters="2">Only return %s with an OBJCLASS or OBJTYPE of $%s</macro>

<macro id="SEARCH_BY_MAINTYPE_SUBTYPE" parameters="3">Only return %s with a MAINTYPE of $%s and SUBTYPE of $%s</macro>

<macro id="SEARCH_BY_RACE" parameters="2">Only return %s OWNEDBY the RACE $%s</macro>

<macro id="SEARCH_BY_FLAGS" parameters="2">Only return %s matching the FLAGS $%s</macro>

<macro id="SEARCH_BY_MAXIMUM_PRICE" parameters="2">Only return %s with a maximum {PROPERTY:ware price} of $%s credits</macro>
<macro id="SEARCH_BY_MINIMUM_PRICE" parameters="2">Only return %s with a minimum {PROPERTY:ware price} of $%s credits</macro>

<macro id="SEARCH_BY_QUANITY_BUY" parameters="2">Only return %s willing to buy a {PROPERTY:ware quantity} of $%s units or more</macro>
<macro id="SEARCH_BY_QUANITY_SELL" parameters="2">Only return %s with a {PROPERTY:ware quantity} of $%s units or more</macro>
<macro id="SEARCH_BY_TRADER" parameters="2">Only return {PROPERTY:known} %s at which $%s may dock and trade</macro>


<!--Search Command Flags-->
<macro id="FLAG_RANDOM" parameters="1">{CONSTANT:\[Find.Random\]} - Return a random %s from those matching the criteria</macro>

<macro id="FLAG_NEAREST" parameters="2">{CONSTANT:\[Find.Nearest\]} - Return the %s closest to the {TYPE:object} $%s</macro>

<macro id="FLAG_NEAREST_2" parameters="3">{CONSTANT:\[Find.Nearest\]} - Return the %s closest to the {TYPE:object} $%s or {PROPERTY:position} $%s</macro>

<macro id="FLAG_VISIBLE" parameters="2">{CONSTANT:\[Find.Visible\]} - Return %s that are within scanner range of the {TYPE:object} $%s</macro>

<macro id="FLAG_KNOWN" parameters="1">{CONSTANT:\[Find.Known\]} - Return %s that are known to the player</macro>

<macro id="FLAG_RACE_LOGIC">{CONSTANT:\[Find.RaceLogicEnabled\]} - Return only SHIPS that have {PROPERTY:race logic} enabled</macro>

<macro id="FLAG_INCLUDE_DOCKED">{CONSTANT:\[Find.IncludeDocked\]} - Return SHIPS that are currently docked</macro>

<macro id="FLAG_WING_ONLY">{CONSTANT:\[Find.WingOnly\]} - Return only SHIPS that are part of a WING</macro>

<macro id="FLAG_EXACT_JUMPS" parameters="2">{CONSTANT:\[Find.ExactJumps\]} - Return %s with a precise {PROPERTY:jump distance} of $%s</macro>

<macro id="FLAG_DOCKING_ALLOWED" parameters="2">{CONSTANT:\[Find.DockingAllowed\]} - Return %s at which the {TYPE:object} $%s may dock</macro>

<macro id="FLAG_MULTIPLE" parameters="2">{CONSTANT:\[Find.Multiple\]} - Return up to $%s %s</macro>

<macro id="FLAG_MULTIPLE_UNLIMITED" parameters="1">{CONSTANT:\[Find.Multiple\]} - Return multiple %s</macro>
  
<macro id="FLAG_FRIEND" parameters="2">{CONSTANT:\[Find.Friend\]} - Return %s that are a {PROPERTY:friend} of the {TYPE:object} $%s</macro>
<macro id="FLAG_ENEMY" parameters="2">{CONSTANT:\[Find.Enemy\]} - Return %s that are an {PROPERTY:enemy} of the {TYPE:object} $%s</macro>
<macro id="FLAG_NEUTRAL" parameters="2">{CONSTANT:\[Find.Neutral\]} - Return %s that are {PROPERTY:neutral} towards the {TYPE:object} $%s</macro>

<macro id="FLAG_NO_EXACTJUMPS" parameters="1">{CONSTANT:\[Find.ExactJumps\]} - This command does not search SECTORS other than $%s</macro>

<macro id="FLAG_NO_MULTIPLE" parameters="1">{CONSTANT:\[Find.Multiple\]} - This command returns a single %s</macro>

<macro id="FLAG_NO_RELATIONS" parameters="1">{CONSTANT:\[Find.Friend\]}, {CONSTANT:\[Find.Enemy\]}, {CONSTANT:\[Find.Neutral\]} - These have no bearing upon %s</macro>



<!--Search Command Info-->
<macro id="FLAGS_COMBINING" parameters="2">{TERMINOLOGY:Search flags} can be combined using the {TERMINOLOGY:bitwise-or} operator but you must save them in a variable before use. eg. {VARIABLE:$iFlags} = {CONSTANT:\[Find.%s\]} | {CONSTANT:\[Find.%s\]}</macro>

<macro id="FLAGS_DEPENDENCY" parameters="2">{CONSTANT:\[Find.%s\]} requires you also use {CONSTANT:\[Find.%s\]}</macro>

<macro id="FLAGS_MULTIPLE_NEAREST">Combining {CONSTANT:\[Find.Multiple\]} and {CONSTANT:\[Find.Nearest\]} sorts the results by ascending {PROPERTY:distance}.</macro>

<macro id="FLAGS_MUTUTALLY_EXCLUSIVE_2" parameters="2">{CONSTANT:\[Find.%s\]} and {CONSTANT:\[Find.%s\]} are mutually exclusive</macro>

<macro id="FLAGS_MUTUTALLY_EXCLUSIVE_3" parameters="3">{CONSTANT:\[Find.%s\]}, {CONSTANT:\[Find.%s\]} and {CONSTANT:\[Find.%s\]} are mutually exclusive</macro>

<macro id="FLAGS_REFERENCE_REQUIREMENT" parameters="2">You can only use an {TYPE:object} $%s or a {PROPERTY:position} $%s, not both.</macro>

<macro id="FLAGS_RELATION_REQUIREMENT" parameters="1">The {PROPERTY:relation} FLAGS require the {TYPE:object} $%s to be a descendant of the {CLASS:Ship} or {CLASS:Station} OBJCLASS.</macro>


</macros>















<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                 Commands                                     ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<commands>


<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                   Arrays                                     ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->

<!--$0 array alloc: size=$1-->
<command id="128" version="X2">Creates and returns a new ARRAY with $1 elements.

{ABOUT_COPYING_ARRAYS}
The {COMMAND:array alloc:} command generates a distinct, independent copy of an ARRAY.

{HEADING:Information}

All ARRAY indicies are zero based.

{RELATED_SCRIPT_OBJECT_LIST:Data Types,Data Types}</command>


<!--$0 $1[$2]-->
<command id="129" version="X2">Returns the value stored at index $2 of the ARRAY $1.

{HEADING:Information}

All ARRAY indicies are zero based.</command>


<!--$0[$1] = $2-->
<command id="130" version="X2">Stores the value $2 into the ARRAY $0 at index $1.

{HEADING:Information}

All ARRAY indicies are zero based.</command>


<!--$0 size of array $1-->
<command id="131" version="X2">Returns the number of elements in the ARRAY $1.

{HEADING:Information}

The number of elements in the ARRAY is one based.</command>


<!--$0 clone array $1 : index $2x ... $3y-->
<command id="132" version="X2">Creates and returns a new ARRAY containing a subset of the elements in the ARRAY $1.  The new ARRAY contains the elements stored at indicies $2x, $3y and all elements in between, if any.  This command can be used to copy a subset of elements or all of the elements from ARRAY $1.

You can clone an entire ARRAY by using NULL for indicies $2x and $3y.

{ABOUT_COPYING_ARRAYS}
The {COMMAND:clone array} command generates a distinct, independent copy of an ARRAY.

{HEADING:Information}

All ARRAY indicies are zero based.{CORRECTION:Jack08}</command>


<!--copy array $2x index $3x ... $4y into array $0y at index $1z-->
<command id="133" version="X2">Copies a subset of elements from ARRAY $2x into ARRAY $0y.  The elements at indicies $3x, $4y and all elements in between, are copied from ARRAY $2x into element $1z and all subsequent elements of ARRAY $0y

You can copy all the elements in ARRAY $2x with this command or just a subset.  The order of the copied elements is not changed.

{HEADING:Information}

The ARRAY $2x is not resized by this command, you must ensure it is large enough to hold all the required elements.  All ARRAY indicies are zero based.</command>


<!--insert $2 into array $0 at index $1-->
<command id="134" version="X2">Creates a new element in ARRAY $0 at index $1 with the value $2.  The previous element at index $1 is shifted to the `right`, as are any elements following it, increasing their indicies by one.

{HEADING:Information}

All ARRAY indicies are zero based.</command>


<!--append $1 to array $0-->
<command id="135" version="X2">Stores the value $1 in a new element added to the end of the ARRAY $0.</command>


<!--remove element from array $0 at index $1-->
<command id="136" version="X2">Destroys the element at index $1 of the ARRAY $0.  All elements following $1 are shifted to the `left`, reducing their indicies by one.  Elements preceeding $1 are unaffected.

{HEADING:Information}

All ARRAY indicies are zero based.</command>


<!--resize array $0 to $1-->
<command id="137" version="X2">Sets the number of elements in ARRAY $0 to $1.  If the ARRAY is being enlarged then new elements are appended and the previous elements are preserved.  If the ARRAY is being shrunk then elements at the end of the ARRAY are destroyed.

{HEADING:Information}

The number of elements in the ARRAY is one based.</command>


<!--*********************-->
<!--**   X3 Reunion    **-->
<!--*********************-->

<!--$0 $1[$2x][$3y]-->
<command id="1081" version="X3R">Retrieves a value from an ARRAY stored within another ARRAY.  The value at ARRAY index $3y is retrieved from an ARRAY which is itself stored at ARRAY index $2x of the ARRAY $1.
           
{HEADING:Information}
        
All ARRAY indicies are zero-based.</command>

  
<!--$0[$1x][$2y] = $3-->
<command id="1082" version="X3R">Sets a value in an ARRAY stored within another ARRAY.  The value $3 is stored at index $2y of the ARRAY which is itself stored at index $1x of the ARRAY $0.

{HEADING:Information}

All ARRAY indicies are zero based.</command>

  
<!--$0 get index of $2 in array $1 offset=$3-->
<command id="1083" version="X3R">Searches ARRAY $1 for an element containing the value $2, beginning with the element at index $3.  If the value if found then the command returns the index of the element, otherwise it returns -1.

{HEADING:Information}

All ARRAY indicies are zero-based.</command>

  
<!--$0x[$1x] = $2y[$3y]-->
<command id="1092" version="X3R">Copies a value from one ARRAY into another ARRAY.  The value at index $3y of ARRAY $2y is copied to index $1x of ARRAY $0x.

{HEADING:Information}

All ARRAY indicies are zero based.</command>


<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->


<!--$0 sort array $1-->
<command id="1375" version="X3TC">Creates and returns a new ARRAY containing all of the elements in ARRAY $1 sorted in descending/alphabetical order.

{HEADING:Sorting}

If the ARRAY contains INTEGERS and STRINGS then the ARRAY is sorted into alphabetical order, which can lead to unexpected results: eg. 1, 12, 16, 2, 21, 28, 3, ...

{RELATED_SCRIPT_OBJECT_LIST:Data Types,Data Types}</command>
  
  
<!--<command id="1406" version="X3TC">%0find %1 in array: %2</command>-->   <!--MISSED!-->

  
<!--$0 create new array, arguments=$1o, $2x, $3y, $4z, $5a-->
<command id="1415" version="X3TC">Creates and returns a new ARRAY containing up to five values of any type.  Any trailing values of NULL or FALSE will generate a truncated ARRAY of less than five values.{CORRECTION:Jack08}{ABOUT_COPYING_ARRAYS}
The {COMMAND:create new array} command generates a distinct, independent copy of an ARRAY.

{RELATED_SCRIPT_OBJECT_LIST:Data Types,Data Types}</command>

  
<!--$0 sort array: data=$1x sort values=$2y-->
<command id="1417" version="X3TC">Creates and returns a new ARRAY containing all of the elements in the ARRAY $1x sorted into an order determined by the contents of ARRAY $2y.  The order is determined by the results of sorting the ARRAY $2y into descending/alphabetical order.  This is commonly used to sort an ARRAY containing WARES or SECTORS, by using another ARRAY containing prices or {PROPERTY:jump distances}.

{HEADING:Sorting}

If the ARRAY contains INTEGERS and STRINGS then the ARRAY is sorted into alphabetical order, which can lead to unexpected results: eg. 1, 12, 16, 2, 21, 28, 3, ...

{HEADING:Information}

Both ARRAYS must have the same number of elements.

{RELATED_SCRIPT_OBJECT_LIST:Data Types,Data Types}</command>

  
<!--$0 reverse array $1-->
<command id="1443" version="X3TC">Reverses the order of the elements in the ARRAY $1 and returns the reversed ARRAY $1.  This command reverses the elements within $1, it does not generate a copy of the ARRAY containing the elements in reverse order.</command>

  
<!--$1 $0 get object name array-->
<command id="1496" version="X3TC">Creates and returns an ARRAY containing the IDs of the speech clips required to verbally describe an object to the player.

{HEADING:Information}

This command returns NULL if the object $0 is a DOCK, JUMPGATE or ASTEROID.

{RELATED_COMMAND:To use this ARRAY,speak array:,User Interface}</command>

  
<!--$0 arrays $1x and $2y are equal-->
<command id="1501" version="X3TC">Compares the size and contents of two ARRAYS.  Returns TRUE if the elements in ARRAY $1x have the same value and order as the elements in $2y, otherwise it returns FALSE.</command>



<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->
  




<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                  Flow Control                                ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->


<!--goto label $0:-->
<command id="100" version="X2">Unconditionally jumps to the line of code containing the label specified by $0</command>


<!--START %0 command %1 : arg1=%2, arg2=%3, arg3=%4, arg4=%5-->
<command id="514" version="X2">Commands the OBJ $0 to perform the {TYPE:command} $1.

This command will instruct the OBJ $0 to stop executing the {TYPE:command} in {PROPERTY:task 0}, and to perform the {TYPE:command} $0 instead.

{ABOUT_COMMANDS_TASKS_AND_SIGNALS}

{ABOUT_INTERRUPTS_AND_YIELDING}

{RELATED_SCRIPT_OBJECT_LIST:commands,Object Commands}</command>



<!--%1%2 call script %0 : %3-->
<command id="102" version="X2">Executes the script $0 on the OBJ $2 as {PROPERTY:task 0}, waits for the script to finish and returns the result.

You can optionally specify an unlimited number of {PROPERTY:arguments}.

{COMMAND_INTERRUPTABLE}

{ABOUT_COMMANDS_TASKS_AND_SIGNALS}

{ABOUT_INTERRUPTS_AND_YIELDING}</command>


<!--%0wait %1 ms-->
<command id="105" version="X2">Yields execution to other scripts for a period of $1 {UNITS:milliseconds}.

{ABOUT_COMMANDS_TASKS_AND_SIGNALS}

{ABOUT_INTERRUPTS_AND_YIELDING}</command>


<!--%0wait randomly from %1 to %2 ms-->
<command id="107" version="X2">Yields execution to other scripts for a random period of between $1 and $2 {UNITS:milliseconds}.

{COMMAND_INTERRUPTABLE}</command>


<!--$0 interrupt with script $1 and prio $2-->
<!--$0 interrupt with script $1 and priority $2-->
<command id="111" version="X2">Interrupts the script currently executing as {PROPERTY:task 0} on the OBJ $0 with the script $1.

The new script is executed with the priority $2.

{ABOUT_COMMANDS_TASKS_AND_SIGNALS}

{ABOUT_INTERRUPTS_AND_YIELDING}

{COMMAND_NAME_CHANGED:interrupt with script and prio}</command>


<!--$0 interrupt with script $1 and prio $2: arg1=$3o arg2=$4x arg3=$5y arg4=$6z-->
<!--$0 interrupt with script $1 and priority $2: arg1=$3o arg2=$4x arg3=$5y arg4=$6z-->
<command id="159" version="X2">Interrupts the script currently executing as {PROPERTY:task 0} on the OBJ $0 with the script $1.

The new script is executed with the priority $2 and is passed the {PROPERTY:arguments} $3o, $4x, $5y and $6z.

{ABOUT_COMMANDS_TASKS_AND_SIGNALS}

{ABOUT_INTERRUPTS_AND_YIELDING}

{COMMAND_NAME_CHANGED:interrupt with script and prio}</command>


<!--$0 interrupt task $2 with script $1 and prio $3: arg1=$4o arg2=$5x arg3=$6y arg4=$7z-->
<!--$0 interrupt task $2 with script $1 and priority $3: arg1=$4o arg2=$5x arg3=$6y arg4=$7z-->
<command id="1016" version="X2">Interrupts the script currently executing as {PROPERTY:task} $2 on the OBJ $0 with the script $1.

The new script is executed with the priority $3 and is passed the {PROPERTY:arguments} $4o, $5x, $6y and $7z.

{ABOUT_COMMANDS_TASKS_AND_SIGNALS}

{ABOUT_INTERRUPTS_AND_YIELDING}

{COMMAND_NAME_CHANGED:interrupt task with script and prio}</command>


<!--$0 begin task $2 with script $1 and prio $3: arg1=$4o arg2=$5x arg3=$6y arg4=$7z arg5=$8a-->
<!--$0 begin task $2 with script $1 and priority $3: arg1=$4o arg2=$5x arg3=$6y arg4=$7z arg5=$8a-->
<command id="1017" version="X2">Executes the script $1 concurrently on the OBJ $0 as {PROPERTY:task} $2.

The new script is executed with the priority $3 and is passed the {PROPERTY:arguments} $4o, $5x, $6y, $7z and $8a.

{ABOUT_COMMANDS_TASKS_AND_SIGNALS}

{ABOUT_INTERRUPTS_AND_YIELDING}

{COMMAND_NAME_CHANGED:start task with script and prio}</command>




<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->



<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->



<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->





<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                  Game Engine                                 ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->

<!--%0script engine version-->
<command id="152" version="X2">Returns the {PROPERTY:engine version} of the current game, which uniquely identifies the game version and any patches.

{HEADING:Engine Versions}

{CONSTANT:44} - {X3TC} v2.5 and above
{CONSTANT:40} - {X3TC} v2.0

{CONSTANT:33} - {X3R} v2.5 and above
{CONSTANT:32} - {X3R} v2.0
{CONSTANT:28} - {X3R} v1.4
{CONSTANT:25} - {X3R} v1.3

{CONSTANT:25} - {X2} v1.2 and above</command>

  
<!--set global variable: name=%0 value=%1-->
<command id="157" version="X2">Sets the {PROPERTY:global variable} with the name $0 to the value $1.  If the variable does not exist, it is created.

{ABOUT_LOCAL_AND_GLOBAL_VARIABLES}</command>
  
<!--%1get global variable: name=%0-->
<command id="158" version="X2">Returns the value of the {PROPERTY:global variable} with the name $0.  If the variable does not exist, this command returns NULL.

{ABOUT_LOCAL_AND_GLOBAL_VARIABLES}</command>


<!--al engine: register script=%0-->
<command id="1000" version="X2">Registers the script $0 as an AL_PLUGIN.

{ABOUT_AL_PLUGINS}</command>


<!--al engine: unregister script %0-->
<command id="1001" version="X2">Unregisters the previously registered script $0 as no longer being an AL_PLUGIN.

{ABOUT_AL_PLUGINS}</command>


<!--al engine: set plugin %0 description to %1-->
<command id="1024" version="X2">Sets the name of the AL_PLUGIN $0 to the STRING $1.  This name is displayed to the user in the 'Manage AL Plugins' menu.

{ABOUT_AL_PLUGINS}</command>


<!--al engine: set plugin %0 timer interval to %1 s-->
<command id="1025" version="X2">Sets the frequency of 'timer' events sent to the AL_PLUGIN $0 to $1 seconds.

{ABOUT_AL_PLUGINS}</command>


<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->



<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->



<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->




<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                 Macros                                       ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->

<!--dim $0 = $1-->
<command id="250" version="X2">Creates and returns a new ARRAY $0 containing an unlimited number of elements, starting with $1.  Each element must be separated with a comma.

{ABOUT_MACROS}

{VARIABLE:$Array} = {COMMAND:array alloc: size} = 3
{VARIABLE:$Array}{COMMAND:\[0\]} = $1x
{VARIABLE:$Array}{COMMAND:\[1\]} = $1y
{VARIABLE:$Array}{COMMAND:\[2\]} = $1a</command>


<!--for each $0 in array $1-->
<command id="251" version="X2">Loops through each element $0 in the ARRAY $1, starting at the last element and working backwards toward zero.

{ABOUT_MACROS}

{VARIABLE:$iterator} = {COMMAND:size of array} $1
{KEYWORD:while} {VARIABLE:$iterator}
\t{COMMAND:dec} {VARIABLE:$iterator}
\t$0 = $1\[ {VARIABLE:$iterator} \]
\t...{CORRECTION:Jack08}</command>


<!--for each $0x in array $1 using counter $2y-->
<command id="252" version="X2">Loops through each element $0x in the ARRAY $1, starting at the last element and working backwards toward zero.

This macro allows you to access the {PROPERTY:index} of the current element through $2y.

{ABOUT_MACROS}

$2y = {COMMAND:size of array} $1
{KEYWORD:while} $2y
\t{COMMAND:dec} $2y
\t$0x = $1\[ $2y \]
\t...{CORRECTION:Jack08}</command>


<!--for $0 = $1x to $2y step $3-->
<command id="253" version="X2">Loops through each number $0 between and including the numbers $1x and $2y, increasing or decreasing with each iteration by the INTEGER $3.

If the INTEGER $3 is positive the count increases with each iteration, and if $3 is negative the count decreases with each iteration.

{ABOUT_MACROS}

{VARIABLE:$iterator} = $1x ± $3
{KEYWORD:while} {VARIABLE:$iterator} &lt; $2y
\t{VARIABLE:$iterator} = {VARIABLE:$iterator} ± $3
\t...</command>

<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->



<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->


<!--add custom menu item to array $0: page=$1x id=$2y returnvalue=$3-->
<command id="254" version="X3TC">Reads a STRING with ID $2y from page $1x of a language file and adds it to the custom menu ARRAY $0 as a new item.

{ABOUT_MACROS}

{VARIABLE:$XStudio.Hidden} = {COMMAND:read text: page}=$1x {COMMAND:id}=$2y
{COMMAND:add custom menu item to array:} $0 {COMMAND:text}={VARIABLE:$XStudio.Hidden} {COMMAND:returnvalue}=$3 </command>


<!--add custom menu info line to array $0: page=$1x id=$2y-->
<command id="255" version="X3TC">Reads a STRING with ID $2y from page $1x of a language file and adds it to the custom menu ARRAY $0 as a new info line.

{ABOUT_MACROS}

{VARIABLE:$XStudio.Hidden} = {COMMAND:read text: page}=$1x {COMMAND:id}=$2y
{COMMAND:add custom menu item to array:} $0 {COMMAND:text}={VARIABLE:$XStudio.Hidden}</command>


<!--add custom menu heading to array $0: page=$1x id=$2y-->
<command id="256" version="X3TC">Reads a STRING with ID $2y from page $1x of a language file and adds it to the custom menu ARRAY $0 as a new heading.

{ABOUT_MACROS}

{VARIABLE:$XStudio.Hidden} = {COMMAND:read text: page}=$1x {COMMAND:id}=$2y
{COMMAND:add custom menu item to array:} $0 {COMMAND:text}={VARIABLE:$XStudio.Hidden}</command>


<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->





<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                    Maths                                     ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->

<!--$0 random value from zero to $1-->
<command id="106" version="X2">Returns a random INTEGER that could be zero, the INTEGER $1, or any INTEGER in between</command>


<!--$0 random value between $1x and $2y-->
<command id="110" version="X2">Returns a random INTEGER that could be the INTEGER $1x, the INTEGER $2y or any INTEGER in between</command>


<!--inc $0-->
<command id="142" version="X2">Increments the INTEGER $0 by one.  This is commonly used to create code loops.

{HEADING:Example}

{VARIABLE:$iIndex} = 0
{KEYWORD:while} \({VARIABLE:$iIndex} &lt; 5\)
\t...
\t{COMMAND:inc} {VARIABLE:$iIndex}
{KEYWORD:end}.

{RELATED_COMMAND:To decrease the value of an INTEGER,dec,Maths}</command>


<!--dec $0-->
<command id="143" version="X2">Decreases the INTEGER $0 by one.  This is commonly used to create code loops.

{HEADING:Example}

{VARIABLE:$iIndex} = 5
{KEYWORD:while} \({VARIABLE:$iIndex} &gt;= 0\)
\t...
\t{COMMAND:dec} {VARIABLE:$iIndex}
{KEYWORD:end}.

{RELATED_COMMAND:To increase the value of an INTEGER,inc,Maths}</command>

<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->


<!--$0 square root of $1-->
<command id="1093" version="X3R">Returns the square root of the INTEGER $1</command>


<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->


<!--$0 get maximum, $1o, $2x, $3y, $4z, $5a-->
<command id="1457" version="X3TC">Compares the INTEGERS $1o, $2x, $3y, $4z, $5a and returns whichever is the largest.

{RELATED_COMMAND:To determine the smallest of a set of INTEGERS,get minimum,Maths}</command>


<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->


<!--$0 get minimum, $1o, $2x, $3y, $4z, $5a-->
<command id="1597" version="X3AP">Compares the INTEGERS $1o, $2x, $3y, $4z, $5a and returns whichever is the smallest.

{RELATED_COMMAND:To determine the largest of a set of INTEGERS,get maximum,Maths}</command>





<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                  Marines                                     ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->


<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->
  

<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->


<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->

<!--$0 train passenger to marine-->
<command id="1419" version="X3TC">Converts the PASSENGER $0 into a MARINE with randomly calculated {PROPERTY:boarding skills}.  The MARINE will have an {PROPERTY:overall skill} of less than 20, a {PROPERTY:fighting skill} of less than 40, and a {PROPERTY:mechanical skill}, {PROPERTY:hacking skill} and {PROPERTY:engineering skill} of less than 14.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND_2:To change or retrieve individual skills,get marine skill,set marine skill,Marines}

{INLINE_RELATED_COMMAND:To retrieve the MARINE stored aboard a SHIP or STATION,get marines array,Marines}</command>

  
<!--$0 create marine from passenger: fighting=$1o hacking=$2x mechanical=$3y engineering=$4z-->
<command id="1420" version="X3TC">Converts the PASSENGER $0 into a MARINE with a {PROPERTY:fighting skill} of $1o, a {PROPERTY:hacking skill} of $2x, a {PROPERTY:mechanical skill} of $3y and an {PROPERTY:engineering skill} of $4z.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the PASSENGERS aboard a SHIP,get passengers array,Passengers}

{INLINE_RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</command>


<!--$0 set marine skill: fighting=$1-->
<command id="1421" version="X3TC">Sets the {PROPERTY:fighting skill} of the MARINE $0 to $1.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</command>


<!--$0 set marine skill: mechanical=$1-->
<command id="1422" version="X3TC">Sets the {PROPERTY:mechanical skill} of the MARINE $0 to $1.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</command>


<!--$0 set marine skill: hacking=$1-->
<command id="1423" version="X3TC">Sets the {PROPERTY:hacking skill} of the MARINE $0 to $1.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</command>


<!--$0 set marine skill: engineering=$1-->
<command id="1424" version="X3TC">Sets the {PROPERTY:engineering skill} of the MARINE $0 to $1.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</command>


<!--$1 $0 get maximum number of marines-->
<command id="1427" version="X3TC">Returns the maximum number of MARINES that could be held on $0, if there were no MARINES or cargo aboard.

{ABOUT_MARINE_STORAGE}
{RELATED_COMMAND:To determine the number of MARINES that can fit in the available cargo space,free space for marines,Marines}</command>


<!--$0 is marine: passenger/astronaut=$1-->
<command id="1428" version="X3TC">Returns TRUE if the PASSENGER or ASTRONAUT $1 is a MARINE.  Returns FALSE if $1 is not a MARINE, or $1 is not a PASSENGER or an ASTRONAUT.</command>


<!--$1 $0 send marines to board ship: $2 marines=$3-->
<command id="1430" version="X3TC">{UNDOCUMENTED}</command>   


<!--$1 $0 get marines array-->
<command id="1433" version="X3TC">Returns a new ARRAY containing the MARINES that are stored aboard the SHIP or STATION $0.

{ABOUT_MARINE_STORAGE}
{RELATED_COMMAND:To retrieve the MARINES attacking a SHIP,get incoming marines,Marines}</command>


<!--$1 $0 free space for marines-->
<command id="1434" version="X3TC">Calculates the number of MARINES that can be added to the SHIP or STATION $0, given the free cargo space available.

{ABOUT_MARINE_STORAGE}
{RELATED_COMMAND:To determine the maximum number of MARINES that could fit without any cargo,get maximum number of marines,Marines}</command>

<!-- %1%0 get number of decks on ship -->
<command id="1437" version="X3TC">Returns the {PROPERTY:number of decks} of the SHIP $0, which determines it`s capability to resist MARINES while fighting the crew.

{ABOUT_BOARDING_PROCEDURE}</command>


<!--$1 $0 get ship boarding defence level-->
<command id="1438" version="X3TC">Returns the {PROPERTY:defence level} of the SHIP $0, which determines it`s capability to prevent MARINES from boarding or cutting through the hull.

{ABOUT_BOARDING_PROCEDURE}

{HEADING:See Also}

The defence level can be enhanced by the WARE {OBJECT:Hull Polarising Device}
The defence level can be reduced by the WARE {OBJECT:Boarding Pod}</command>


<!--$1 $0 get hacking security level-->
<command id="1439" version="X3TC">Returns the {PROPERTY:security level} of the SHIP $0, which determines the capability of the crew to repel MARINES that have boarded the SHIP.

{ABOUT_BOARDING_PROCEDURE}

{HEADING:See Also}

The security level can be enhanced by the WARE {OBJECT:Internal Sentry Lasers}.</command>


<!--$1 $0 get number of marines can board-->
<command id="1440" version="X3TC">Returns the maximum number of MARINES that can be used to board the SHIP $0 using the {COMMAND:add marine to attack group on ship} command.

{ABOUT_BOARDING_TARGETS}</command>


<!--$1 $0 get number of marines attacking-->
<command id="1441" version="X3TC">Returns the number of MARINES that have boarded the SHIP $0 and are currently attacking the crew.  Returns 0 if the MARINES have not yet boarded the SHIP $0, or there are no MARINES attempting board.

{RELATED_COMMAND:To retrieve the MARINES attacking a SHIP,get incoming marines,Marines}</command>


<!--$1 $0 add marine $2 to attack group on ship-->
<command id="1442" version="X3TC">Instantly transfers the MARINE, PASSENGER or ASTRONAUT $2 onto the SHIP $0 and commands him to begin attacking the crew of the SHIP $0.  This command can be used to silently add MARINES to SHIPS for use in scripts or quests.

{HEADING:Information}

Unlike normal boarding methods, this command also allows MARINES to board the {M8_OBJECT} class of SHIPS.

{ABOUT_BOARDING_PROCEDURE}

{ABOUT_BOARDING_TARGETS}</command>


<!--$1 $0 get marine buy price-->
<command id="1449" version="X3TC">Returns the {PROPERTY:trading price} of the MARINE $0, in credits.  This is calculated from his {PROPERTY:boarding skills}, with higher skills resulting in a higher price.

{RELATED_COMMAND_2:To change or retrieve individual skills,get marine skill,set marine skill,Marines}</command>



<!--$1 $0 get incoming marines-->
<command id="1494" version="X3TC">Returns a new ARRAY containing the MARINES that are currently attempting to board the SHIP $0.  If no MARINES are attempting to board the SHIP $0, or they are already aboard, it will return NULL.

{ABOUT_BOARDING_PROCEDURE}

{ABOUT_BOARDING_TARGETS}
{RELATED_COMMAND:To repel MARINES attempting to board a SHIP,stop incoming marines,Marines}</command>


<!--$0 stop incoming marines-->
<command id="1495" version="X3TC">Commands the MARINES who are currently attempting to board the SHIP $0 to stop and fly back to their homeship.

{ABOUT_BOARDING_PROCEDURE}

{RELATED_COMMAND:To retrieve the MARINES attacking a SHIP,get incoming marines,Marines}</command>


<!--$1 $0 get marine fighting skill-->
<command id="1512" version="X3TC">Returns the {PROPERTY:fighting skill} of the MARINE $0.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</command>


<!--$1 $0 get marine mechanical skill-->
<command id="1513" version="X3TC">Returns the {PROPERTY:mechanical skill} of the MARINE $0.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</command>


<!--$1 $0 get marine hacking skill-->
<command id="1514" version="X3TC">Returns the {PROPERTY:hacking skill} of the MARINE $0.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</command>


<!--$1 $0 get marine engineering skill-->
<command id="1515" version="X3TC">Returns the {PROPERTY:engineering skill} of the MARINE $0.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</command>


<!--$1 $0 get marine overall skill-->
<command id="1516" version="X3TC">Returns the average of the four {PROPERTY:boarding skills} of the MARINE $0.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</command>


<!--$1 $0 move marine to board: $2, timeout=$3-->
<command id="1528" version="X3TC">{UNDOCUMENTED}</command>  


<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->




<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                               Object Actions                                 ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->

<!--%0 send signal %1 : arg1=%2, arg2=%3, arg3=%4, arg4=%5-->
<!--<command id="515" version="X2">write me!</command>-->


<!--<command id="538" version="X2">%0 set command: %1  target=%2 target2=%3 par1=%4 par2=%5</command>-->


<!--%0 destruct: show no explosion=%1-->
<command id="765" version="X2">Destroys the OBJ $0.  If $1 is TRUE and the OBJ is in the same SECTOR as the player then an explosion is shown, otherwise it is not.{CORRECTION:Jack08}{HEADING:Information}

Destroying an OBJ without an explosion is used for destroying {TERMINOLOGY:OOS} \(Out-of-Sector\) OBJS.</command>


<!--set position of sector object %0 : x=%1 y=%2 z=%3-->
<command id="769" version="X2">Sets the co-ordinates of the SECTOROBJECT $0.</command>


<!--set safe position of sector object %0 : x=%1 y=%2 z=%3-->
<command id="770" version="X2">Sets the co-ordinates of the SECTOROBJECT $0.  If another OBJ is already occupying this space, the SECTOROBJECT $0 is placed nearby.</command>


<!--set rotation of sector object %0 : x=%1 y=%2 z=%3-->
<command id="771" version="X2">Sets the {PROPERTY:yaw}, {PROPERTY:pitch} and {PROPERTY:roll} of the SECTOROBJECT $0.

{ABOUT_OBJECT_ROTATION}</command>


<!--free sector object %0-->
<command id="773" version="X2">Unloads the SECTOROBJECT $0 previously created with {COMMAND:create sector object} and destroyed with {COMMAND:kill sector object}.

This is used to unload the SECTOROBJECT from the game.

{HEADING:Egosoft Warning}

Egosoft expressly advise against using SECTOROBJECTS directly as they may corrupt your save games.  Use the {COMMAND:create ...} and {COMMAND:destruct} commands instead.

{SEE_HANDBOOK_PAGE:73}</command>


<!--kill sector object %0 : reason=%1 , killer sector object=%2-->
<command id="774" version="X2">Informs the game engine that the SECTOROBJECT $0 has been destroyed by the OBJ $2 using the method $2.

{HEADING:Method Codes}

{CONSTANT:2} - Destroyed by LASER
{CONSTANT:3} - Destroyed by collision
{CONSTANT:5} - Destroyed by MISSILE

{HEADING:Egosoft Warning}

Egosoft expressly advise against using SECTOROBJECTS directly as they may corrupt your save games.  Use the {COMMAND:create ...} and {COMMAND:destruct} commands instead.

{SEE_HANDBOOK_PAGE:73}</command>


<!--start sector object %0 in space %1-->
<command id="775" version="X2">Initialises the SECTOROBJECT $0 previously created with {COMMAND:create sector object} and places it in the SECTOR with {TERMINOLOGY:Sector Object ID} $1.

{HEADING:Egosoft Warning}

Egosoft expressly advise against using SECTOROBJECTS directly as they may corrupt your save games.  Use the {COMMAND:create ...} and {COMMAND:destruct} commands instead.

{SEE_HANDBOOK_PAGE:73}</command>


<!--%0 put into environment %1-->
<command id="906" version="X2">Instantly moves the OBJ $0 into the SECTOR or STATION $1.

If $1 is a STATION then the SHIP $0 must be of the OBJCLASS {CLASS:Little Ship}.</command>


<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->



<!--<command id="1196" version="X3R">%0add lasers per value:%1(0-100) flags:%2</command>-->


<!--<command id="1197" version="X3R">%0add shields per value:%1(0-100)</command>-->


<!--%0force position: x=%1 y=%2 z=%3-->
<command id="1224" version="X3R">Forces the OBJ $0 to the {PROPERTY:position} at co-ordinates \(x, y, z\).</command>


<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->


<!-- %0destroy object: killer=%1, show no explosion=%2 -->
<command id="1341" version="X3TC">Destroys the OBJ $0.  If $2 is FALSE and the OBJ is in the same SECTOR as the player then an explosion is shown, otherwise it is not.

The OBJ $1 is registered as responsible for the destruction.

{HEADING:Information}

Destroying an OBJ without an explosion is used for destroying {TERMINOLOGY:OOS} \(Out-of-Sector\) OBJS.</command>


<!-- %0jump out of existence -->
<command id="1370" version="X3TC">Destroys the SHIP $0 with the illusion that it jumped away.</command>


<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->





<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                               Object Properties                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->

<!--%0 set local variable: name=%1 value=%2-->
<command id="155" version="X2">Sets the {PROPERTY:local variable} with the name $1, stored the OBJ $0, to the value $2.

{ABOUT_LOCAL_AND_GLOBAL_VARIABLES}</command>


<!--%2%0 get local variable: name=%1-->
<command id="156" version="X2">Returns the value of the {PROPERTY:local variable} with the name $1, stored on the OBJ $0.

{ABOUT_LOCAL_AND_GLOBAL_VARIABLES}</command>



<!--%1%0 is docking allowed at %2-->
<command id="513" version="X2">Returns TRUE if the SHIP $0 is permitted to dock at the {CLASS:Carrier} or STATION $2, otherwise it returns FALSE.</command>


<!--%0 set command: %1-->
<command id="524" version="X2">Informs the OBJ $0 that it is currently executing the {TYPE:command} $1 and should display the {PROPERTY:command name} to the user.

{HEADING:Information}

This command does not order the OBJ $0 to execute the {TYPE:command} $1, it only displays the {PROPERTY:command name} to the user.

This command can only be executed by an OBJ upon itself, using {VARIABLE:\[THIS\]}.</command>


<!--%1%0 get command-->
<command id="525" version="X2">Returns the {TYPE:command} currently being executed by the OBJ $0.  

This must have been previously set by the {COMMAND:set command:} command or activated by the user through the user interface.</command>


<!--%0 set command target: %1-->
<command id="526" version="X2">Informs the OBJ $0 that the {PROPERTY:primary target} of the {TYPE:command} it is executing is the OBJ $1, and displays this information to the user.

{HEADING:Information}

This does not change the true {PROPERTY:target} of the current {TYPE:command}, it only displays the {PROPERTY:primary command target} to the user.

This command can only be executed by an OBJ upon itself, using {VARIABLE:\[THIS\]}.</command>


<!--%1%0 get command target-->
<command id="527" version="X2">Returns the {PROPERTY:primary target} of the {TYPE:command} currently being executed by the OBJ $0.  

This must have been previously set using the {COMMAND:set command target:} command.</command>


<!--%0 set command target2: %1-->
<command id="528" version="X2">Informs the OBJ $0 that the {PROPERTY:secondary target} of the {TYPE:command} it is executing is the OBJ $1, and displays this information to the user.

{HEADING:Information}

This does not change the true {PROPERTY:target} of the current {TYPE:command}, it only displays the {PROPERTY:secondary command target} to the user.

This command can only be executed by an OBJ upon itself, using {VARIABLE:\[THIS\]}.</command>


<!--%1%0 get command target2-->
<command id="529" version="X2">Returns the {PROPERTY:secondary target} of the {TYPE:command} currently being executed by the OBJ $0.  

This must have been previously set by the {COMMAND:set command target2:} command.</command>


<!--%1%0 find nearest missile aiming to me-->
<command id="558" version="X2">Returns the nearest MISSILE aiming at the OBJ $0, if any, otherwise it returns NULL.</command>


<!--%0 get number of subtypes of maintype %1-->
<command id="658" version="X2">Returns the number of SUBTYPES within the MAINTYPE $1.

{ABOUT_MAINTYPES_AND_SUBTYPES}</command>


<!--$1 $0 get maintype-->
<command id="659" version="X2">Returns the MAINTYPE of the OBJ $0.

{ABOUT_MAINTYPES_AND_SUBTYPES}

{HEADING:Usage}

You can access any MAINTYPE as a constant eg. {CONSTANT:SSTYPE_SHIP}, {CONSTANT:SSTYPE_FACTORY} or {CONSTANT:SSTYPE_ASTEROID}.  Alternatively you can access them as INTEGERS.

{RELATED_SCRIPT_OBJECT_LIST:MainTypes,Constants}</command>


<!--$1 $0 get subtype-->
<command id="660" version="X2">Returns the SUBTYPE of the OBJ $0.

{ABOUT_MAINTYPES_AND_SUBTYPES}

{HEADING:Usage}

You can only access a SUBTYPE as an INTEGER.  These are defined by their order within their own TFILE.

{HEADING:Type Files}

The {TYPE:objects} in each MAINTYPE are defined by a comma delimited text file in the `Types` subfolder of the game folder hierarchy.  X_EDITOR is recommended for viewing or editing these files.</command>


<!--$1 $0 get object class-->
<command id="700" version="X2">Returns the OBJCLASS of the OBJ $0.

{ABOUT_OBJECT_CLASSES}

{RELATED_SCRIPT_OBJECT_LIST:Object Classes,Object Classes}</command>


<!--%1%0 get owner race-->
<command id="701" version="X2">Returns the RACE that is the {PROPERTY:owner} of the OBJ $0.</command>


<!--%1%0 get environment-->
<command id="702" version="X2">Returns the current {PROPERTY:environment} of the OBJ $0.

{ABOUT_ENVIRONMENT}</command>


<!--%1%0 get sector-->
<command id="703" version="X2">Returns the SECTOR containing the OBJ $0.

If $0 is a SHIP that is DOCKED, then this command returns the SECTOR containing the {CLASS:Carrier} or STATION within which $0 is DOCKED.</command>


<!--$1 $0 is of class $2-->
<command id="705" version="X2">Determines whether the OBJ $0 is of the OBJCLASS $2.

Returns TRUE if the OBJ $0 is of the OBJCLASS $2, otherwise it returns FALSE.

{ABOUT_OBJECT_CLASSES}

{RELATED_SCRIPT_OBJECT_LIST:Object Classes,Object Classes}</command>


<!--$1 $0 exists-->
<command id="706" version="X2">Determines whether the OBJ $0 has been destroyed.

Returns TRUE if the OBJ $0 exists, and FALSE otherwise.</command>


<!--%1%0 get ware type code of object-->
<command id="707" version="X2">Retrieves the WARE corresponding to the OBJ $0.  If the OBJ $0 is not represented by any WARE, this command returns {TYPE:Unknown Object}.</command>


<!--$1 $0 is of type $2-->
<command id="710" version="X2">Determines whether the OBJ $0 is a specific OBJTYPE, such as {OBJECT:Argon Buster} or {OBJECT:Royal Boron Trading Station}.

Returns TRUE if the OBJ $0 is of the OBJTYPE $2, otherwise it returns FALSE.</command>


<!--$1 $0 get current shield strength-->
<command id="714" version="X2">Returns the current {PROPERTY:shield energy} of the OBJ $0, in {UNITS:Joules}.

{RELATED_GAME_OBJECT_LIST:Shields,Shields}</command>


<!--$1 $0 get maximum shield strength-->
<command id="715" version="X2">Returns the maximum {PROPERTY:shield energy} of the OBJ $0, in {UNITS:Joules}.

{RELATED_GAME_OBJECT_LIST:Shields,Shields}</command>


<!--$1 $0 get current laser strength-->
<command id="716" version="X2">Returns the current {PROPERTY:laser energy} of the LASER currently in use by the OBJ $0, in {UNITS:Joules}.

{RELATED_GAME_OBJECT_LIST:Lasers,Lasers}</command>


<!--$1 $0 get maximum laser strength-->
<command id="717" version="X2">Returns the maximum {PROPERTY:laser energy} of the LASER currently in use by the OBJ $0, in {UNITS:Joules}.

{RELATED_GAME_OBJECT_LIST:Lasers,Lasers}</command>


<!--%1%0 get max. shield type that can be installed-->
<command id="718" version="X2">%1%0 get max. shield type that can be installed</command>


<!--%1%0 get max. laser type that can be installed-->
<command id="719" version="X2">%1%0 get max. laser type that can be installed</command>


<!--$1 $0 get number of shield bays-->
<command id="720" version="X2">Returns the maximum number of SHIELDS that can be installed on the OBJ $0.

{RELATED_GAME_OBJECT_LIST:Shields,Shields}</command>


<!--$1 $0 get number of laser bays-->
<command id="721" version="X2">Returns the maximum number of LASERS that can be installed on the OBJ $0.

{RELATED_GAME_OBJECT_LIST:Lasers,Lasers}</command>


<!--%1%0 get max. missile type that can be installed-->
<command id="722" version="X2">Returns the most powerful MISSILE WARE that can be installed on the SHIP $0.</command>


<!--%1%0 get relation to object %2-->
<command id="723" version="X2">Returns whether the OBJ $2 is a {PROPERTY:friend}, {PROPERTY:enemy} or {PROPERTY:neutral} towards the OBJ $2. </command>


<!--%1%0 get relation to race %2-->
<command id="724" version="X2">Returns whether the {PROPERTY:owner race} of the OBJ $0 is generally a {PROPERTY:friend}, {PROPERTY:enemy} or {PROPERTY:neutral} towards the RACE $2.</command>


<!--$1 $0 is $2 a enemy-->
<command id="727" version="X2">Determines the {PROPERTY:relationship} between two {TYPE:objects}.  Return TRUE if the OBJ $0 is an {PROPERTY:enemy} of the object $2, otherwise FALSE.

{RELATED_SCRIPT_OBJECT_LIST:Relations,Relations}</command>


<!--$1 $0 is $2 a friend-->
<command id="728" version="X2">Determines the {PROPERTY:relationship} between two {TYPE:objects}.  Return TRUE if the OBJ $0 is a {PROPERTY:friend} of the object $2, otherwise FALSE.

{RELATED_SCRIPT_OBJECT_LIST:Relations,Relations}</command>


<!--%1%0 is %2 neutral to me-->
<command id="729" version="X2">Determines the {PROPERTY:relationship} between two {TYPE:objects}.  Return TRUE if the OBJ $0 is {PROPERTY:neutral} towards the object $2, otherwise FALSE.

{RELATED_SCRIPT_OBJECT_LIST:Relations,Relations}</command>


<!--%1%0 get shield type in bay %2-->
<command id="730" version="X2">Returns the SHIELD in {PROPERTY:bay} $2 of the OBJ $0.</command>


<!--%1%0 get laser type in bay %2-->
<command id="731" version="X2">Returns the currently installed LASER in {TYPE:turret 0} of the OBJ $0.</command>


<!--%1%0 has same environment as %2-->
<command id="732" version="X2">Determines whether the OBJ $0 has the same {PROPERTY:environment} as the OBJ $2.

{ABOUT_ENVIRONMENT}</command>


<!--%1%0 is in same sector as %2-->
<command id="733" version="X2">Returns TRUE if the OBJ $0 is in the same SECTOR as the OBJ $2, otherwise it returns FALSE.</command>


<!--%1%0 is landed-->
<command id="734" version="X2">Returns TRUE if the SHIP $0 is DOCKED within a STATION or larger SHIP, otherwise it returns FALSE.</command>

<!--%1%0 is in a sector-->
<command id="735" version="X2">Returns FALSE if the OBJ $0 is DOCKED, otherwise it returns TRUE.</command>


<!--%1%0 get attacker-->
<command id="736" version="X2">Returns the OBJ attacking the OBJ $0, if any, otherwise it returns NULL.</command>


<!--%0 set attacker to %1-->
<command id="737" version="X2">Marks the OBJ $1 as being the {PROPERTY:attacker} of the OBJ $0.

This also occurs automatically when one OBJ attacks another.</command>


<!--%1%0 get x position-->
<command id="740" version="X2">Returns the x co-ordinate of the OBJ $0.</command>


<!--%1%0 get y position-->
<command id="741" version="X2">Returns the y co-ordinate of the OBJ $0.</command>


<!--%1%0 get z position-->
<command id="742" version="X2">Returns the z co-ordinate of the OBJ $0.</command>


<!--%0 set relation against %1 to %2-->
<command id="744" version="X2">Sets the {PROPERTY:relation} of the OBJ $0 towards the OBJ $1 to a {TYPE:relation} $2.

This may have to be done in both directions.</command>


<!--$1 $0 is docked-->
<command id="745" version="X2">Returns TRUE if the SHIP $0 is DOCKED within a STATION or DOCKED outside a STATION, otherwise it returns FALSE.</command>


<!--%1%0 is docking possible of %2-->
<command id="746" version="X2">Returns TRUE if the {CLASS:Carrier} or STATION $0 is physically able to dock at the SHIP $2, otherwise it returns FALSE.{CORRECTION:DrBullwinkle}</command>


<!--$1 $0 is disabled-->
<command id="759" version="X2">{NOT_IMPLEMENTED}</command>


<!--VARIATION     %1%0 get SectorObject ID-->
<command id="761" version="X2">Returns the unique ID of the SECTOROBJECT $0.

{ABOUT_SECTOR_OBJECTS}

{COMPATIBILITY_2:X2,X3R}</command>


<!--%1 get ware type of SectorObject %0-->
<command id="762" version="X2">{UNDOCUMENTED}</command>



<!--%1 exists SectorObject %0-->
<command id="763" version="X2">Determines whether a SECTOROBJECT has been destroyed.

Return TRUE if the SECTOROBJECT $0 exists, otherwise it returns FALSE.

{ABOUT_SECTOR_OBJECTS}</command>


<!--%1 get object from SectorObject %0-->
<command id="764" version="X2">Retrieves the OBJ represented by the SECTOROBJECT $0.

{ABOUT_SECTOR_OBJECTS}</command>


<!--%0 set position: x=%1 y=%2 z=%3-->
<command id="767" version="X2">Sets the co-ordinates of the OBJ $0.</command>


<!--%0 set rotation: alpha=%1 beta=%2 gamma=%3-->
<command id="768" version="X2">Sets the {PROPERTY:yaw}, {PROPERTY:pitch} and {PROPERTY:roll} of the OBJ $0.

{ABOUT_OBJECT_ROTATION}</command>


<!--%1%0 get rot alpha-->
<command id="777" version="X2">Returns the {PROPERTY:yaw} \(x-axis\) of the OBJ $0, in {UNITS:integer degrees}

{ABOUT_OBJECT_ROTATION}
{HEADING:Integer Degrees}

All angles between 0º and 360º are expressed as INTEGERS between 0 and 65,536.</command>


<!--%1%0 get rot beta-->
<command id="778" version="X2">Returns the {PROPERTY:pitch} \(y-axis\) of the OBJ $0, in {UNITS:integer degrees}

{ABOUT_OBJECT_ROTATION}
{HEADING:Integer Degrees}

All angles between 0º and 360º are expressed as INTEGERS between 0 and 65,536.</command>


<!--%1%0 get rot gamma-->
<command id="779" version="X2">Returns the {PROPERTY:roll} \(z-axis\) of the OBJ $0, in {UNITS:integer degrees}

{ABOUT_OBJECT_ROTATION}
{HEADING:Integer Degrees}

All angles between 0º and 360º are expressed as INTEGERS between 0 and 65,536.</command>


<!--%1%0 get size of object-->
<command id="780" version="X2">Returns the radius of the bounding sphere of the OBJ $0, multiplied by 222.</command>


<!--$1 $0 get max hull-->
<command id="786" version="X2">Returns the maximum {PROPERTY:hull energy} of the OBJ $0.</command>


<!--$1 $0 get hull-->
<command id="787" version="X2">Returns the current {PROPERTY:hull energy} of the OBJ $0.</command>


<!--%1%0 get dock bay size-->
<command id="789" version="X2">Returns the number of SHIPS that can be DOCKED at the {CLASS:Carrier} or STATION $0.

For STATIONS this is fixed at one million.</command>


<!--%1%0 get number of landed ships-->
<command id="790" version="X2">Returns the number of SHIPS {PROPERTY:docked} within the {CLASS:Carrier} or STATION $0.</command>


<!--%0 set ship disabled to %1-->
<command id="793" version="X2">{NOT_IMPLEMENTED}</command>


<!--%1%0 get hull percent-->
<command id="900" version="X2">Returns the current {PROPERTY:hull energy} of the OBJ $0 as a percentage.</command>


<!--%1%0 get shield percent-->
<command id="901" version="X2">Returns the current {PROPERTY:shield energy} of the OBJ $0 as a percentage.</command>


<!--%1%0 get shield and hull percent-->
<command id="902" version="X2">Returns the total of the current {PROPERTY:hull energy} and {PROPERTY:shield energy} of the OBJ $0, as a percentage.</command>


<!--%1%0 is landing-->
<command id="904" version="X2">Returns TRUE if the OBJ $0 is on "final approach" to a STATION, {CLASS:Carrier}, or JUMPGATE, otherwise this command returns FALSE.</command>


<!--%1%0 is starting-->
<command id="905" version="X2">Returns TRUE if the OBJ $0 is launching from a STATION or {CLASS:Carrier}, otherwise FALSE.</command>


<!--VARIATION       %1%0 has a free big ship dock slot-->
<command id="1019" version="X2">Returns TRUE if a {CLASS:Big Ship} is capable of docking at the OBJ $0 and there is a free docking slot available, otherwise it returns FALSE.

{COMPATIBILITY_1:X2}</command>


<!--%1%0 can be controlled by race logic-->
<command id="1020" version="X2">Returns TRUE if the OBJ $0 can be controlled by {TERMINOLOGY:Race Logic}, otherwise it returns FALSE.

{ABOUT_RACE_LOGIC}</command>


<!--%0 set race logic control enabled to %1-->
<command id="1021" version="X2">Enables or disables the use of {TERMINOLOGY:Race Logic} on the OBJ $0.

{ABOUT_RACE_LOGIC}</command>


<!--%1%0 can execute StartAction-->
<command id="1022" version="X2">Returns TRUE if the OBJ $0 can execute it`s {TERMINOLOGY:Start Action}, otherwise it returns FALSE.

{ABOUT_START_ACTIONS}</command>


<!--%0 set StartAction enabled to %1-->
<command id="1023" version="X2">Enables or disables the {TERMINOLOGY:Start Action} of the OBJ $0.

{ABOUT_START_ACTIONS}</command>

<!--%1%0 get name-->
<command id="1028" version="X2">Returns the {PROPERTY:name} of the OBJ $0.</command>


<!--%0 set name to %1-->
<command id="1029" version="X2">Sets the {PROPERTY:name} of the OBJ $0 to $1.</command>


<!--%0 set owner race to %1-->
<command id="1030" version="X2">Changes the {PROPERTY:owner} of the OBJ $0 to the RACE $1.</command>


<!--%1%0 get ID code-->
<command id="1036" version="X2">Returns the unique code of an OBJ displayed in the {TERMINOLOGY:Sector Map} that is meant to represent it`s registry within the game universe. eg. YM2XL-21.</command>



<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->


<!-- %0 set hull to %1 -->
<command id="1047" version="X3R">Sets the {PROPERTY:hull energy} of the OBJ $0 to $1</command>
  
  
<!-- %0 set current shield strength to %1 -->
<command id="1048" version="X3R">Sets the {PROPERTY:shield energy} of the OBJ $0 to $1</command>
  

<!-- %1%0 is known -->
<command id="1061" version="X3R">Returns TRUE if the player has ever detected the OBJ $0, otherwise it returns FALSE.</command>
  
   
<!-- %0 set known status to %1 -->
<command id="1062" version="X3R">Sets whether the OBJ $0 has ever been detected by the player to TRUE or FALSE.</command>
  
   
<!-- %1%0 is detectable -->
<command id="1063" version="X3R">Returns TRUE if the OBJ $0 can be displayed in the sector map user interface, otherwise it returns FALSE.</command>
  
   
<!-- %1%0 is hired -->
<command id="1064" version="X3R">Returns TRUE if the TL_OBJECT is currently {PROPERTY:hired} for work, otherwise it returns FALSE.</command>
  
   
<!--$1 $0 get array of missiles aiming to me-->
<command id="1095" version="X3R">Returns a new ARRAY containing all the {TYPE:missiles} that are flying towards the object $0.</command>		<!--%1%0 get array of missiles aiming to me-->

  
<!--%1%0 is asteroid scanned-->
<command id="1198" version="X3R">Returns TRUE if the ASTEROID $0 has been {PROPERTY:scanned} thereby revealing it`s {PROPERTY:mineral yield}, otherwise it returns FALSE.</command>


<!--%0set asteroid scanned to %1-->
<command id="1199" version="X3R">Marks the ASTEROID $0 as {PROPERTY:scanned} if $1 is TRUE, otherwise as {PROPERTY:unscanned}.</command>


<!--%1%0 get flying ware count-->
<command id="1203" version="X3R">Returns the {PROPERTY:quantity} of the WARE within the {TYPE:flying ware} $0.</command>		

<!--%1%0 get resource waretype of asteroid-->
<command id="1213" version="X3R">Returns the WARE that would be received from mining the ASTEROID $0.</command>


<!--%1%0 has collectible rocks-->
<command id="1214" version="X3R">Return TRUE if the DEBRIS $0 has {TYPE:collectible rocks}, otherwise it returns FALSE.</command>		
  


<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->


<!-- VARIATION   %1%0 is in active sector -->
<command id="761" version="X3TC">Returns TRUE if the OBJ $0 is within the same SECTOR as the player, and FALSE otherwise.

{COMPATIBILITY_2:X3TC,X3AP}</command>


<!-- %1%0 is in freight scanning range: ship=%2 -->
<command id="1345" version="X3TC">Returns TRUE if the OBJ $0 is close enough to use a {OBJECT:Freight Scanner} on the SHIP $2, and FALSE otherwise.</command>


<!-- %1%0 is in transporter range: ship=%2 -->
<command id="1346" version="X3TC">Returns TRUE if the OBJ $0 is close enough to use a {OBJECT:Transporter} on the SHIP $2, and FALSE otherwise.</command>


<!-- %1%0 is in mineral scanner range: asteroid=%2 -->
<command id="1347" version="X3TC">Returns TRUE if the OBJ $0 is close enough to use a {OBJECT:Mineral Scanner} on the ASTEROID $2, and FALSE otherwise.</command>


<!-- %1%0 get maker race -->
<command id="1350" version="X3TC">Returns the RACE which {PROPERTY:manufactured} the OBJ $0.</command>


<!-- %1%0 get notoriety title to race %2: text=%3 -->
<command id="1472" version="X3TC">Returns the title or index of the {PROPERTY:notoriety rank} between the OBJ $0 and the RACE or CORPORATION $2, as a STRING if $3 is TRUE or an INTEGER if $3 is FALSE.

{ABOUT_NOTORIETY}</command>


<!-- %1%0 get notority percentage to race %2 -->
<command id="1473" version="X3TC">Returns the progress of the OBJ $0 towards their next {PROPERTY:notoriety rank} with the RACE or CORPORATION $2, as a percentage.

{ABOUT_NOTORIETY}</command>


<!--%1%0 get debris count-->
<command id="1486" version="X3TC">Returns the quantity of {TYPE:collectable rocks} within the {TYPE:debris} $0.</command>		


<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->






<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                  Pilots                                      ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->

<!-- $0 set pilot fightskill to $1 -->
<command id="533" version="X2">Sets the {PROPERTY:fighting skill} of the OBJ $0 to the INTEGER $1.

The {PROPERTY:fighting skill} ranges from 0 \(terrible\) to 28 \(best\) and determines the quality of the maneuvers performed during combat.</command>


<!-- $1 $0 get pilot fightskill -->
<command id="534" version="X2">Returns an INTEGER containing the {PROPERTY:fighting skill} of the OBJ $0.

The {PROPERTY:fighting skill} ranges from 0 \(terrible\) to 28 \(best\) and determines the quality of the maneuvers performed during combat.</command>


<!--%1%0 get pilot name-->
<command id="1037" version="X2">Returns a STRING containing the {PROPERTY:name} of the PILOT of the SHIP $0.</command>


<!--%0 set pilot name to %1-->
<command id="1038" version="X2">Sets the {PROPERTY:name} of the PILOT in the SHIP $0 to the STRING $1.

{HEADING:Information}

This command does not work on the player SHIP.</command>


<!--%0get random name: race=%1-->
<command id="1039" version="X2">Returns a STRING containing a randomly generated name appropriate for the RACE $1.</command>


<!--$0 set pilot speaker: voice=$1o, face=$2x, Pirate subrace=$3y, Argon female=$4z-->
<command id="1040" version="X2">Sets the voice and appearance of the PILOT of the SHIP $0, when seen during a communications message.

The {PROPERTY:voice} is an INTEGER between 0 and 7 correlating to the RACE variation strings in the main language file.

The {PROPERTY:face} $2x is the INTEGER ID of the video displayed, correlating to the videos in the main video file.

If the {PROPERTY:pirate subrace} $3y is TRUE then the appropriate pirate variations are used instead.

The {PROPERTY:argon female} $4z is unknown, but may related to the ATMO/Betty docking computer.

{RELATED_MEDIA:speech clips}</command>


<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->


<!-- %1%0 get pilot morale -->
<command id="1204" version="X3R">Returns the {PROPERTY:morale} of the PILOT in the SHIP $0.

The {PROPERTY:morale} is an INTEGER between 0 and 25 that represents their resistance to bailing.</command>


<!-- %1%0 get pilot aggression -->
<command id="1205" version="X3R">Returns the {PROPERTY:aggression} of the PILOT in the SHIP $0.

{UNDOCUMENTED}</command>


<!-- %0set pilot morale: %1 -->
<command id="1222" version="X3R">Sets the {PROPERTY:morale} of the PILOT in the SHIP $0 to the INTEGER $1.

The {PROPERTY:morale} is an INTEGER between 0 and 25 that represents their resistance to bailing.</command>


<!-- %0set pilot aggression: %1 -->
<command id="1223" version="X3R">Sets the {PROPERTY:aggression} of the PILOT in the SHIP $0 to the INTEGER $1.

{UNDOCUMENTED}</command>


<!-- %1%0 get pilot tradeskill -->
<command id="1325" version="X3R">Returns the {PROPERTY:trade skill} of the PILOT in the SHIP $0.

{UNDOCUMENTED}</command>


<!-- %0set pilot tradeskill to %1 -->
<command id="1326" version="X3R">Sets the {PROPERTY:trade skill} of the PILOT in the SHIP $0 to the INTEGER $1.

{UNDOCUMENTED}</command>


<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->


<!-- %1%0 pilot eject from ship -->
<command id="1245" version="X3TC">Commands the PILOT to eject from the SHIP $0, causing the SHIP $0 to become {PROPERTY:neutral}.</command>


<!-- %1%0 move pilot to ship %2: disable=%3 -->
<command id="1246" version="X3TC">{UNDOCUMENTED}</command>



<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->





<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                  Player                                      ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->

<!--<command id="141" version="X2">%0playing time</command>-->



<!--%0get player money-->
<command id="626" version="X2">Returns the number of {UNITS:credits} in the {PROPERTY:account} of the player.</command>


<!--add money to player: %0-->
<command id="662" version="X2">Adds $0 {UNITS:credits} to the {PROPERTY:player account}.

If $0 is a negative INTEGER, the {UNITS:credits} are deducted.</command>


<!--$0 get player ship-->
<command id="743" version="X2">Returns the SHIP containing the player</command>


<!--player loses police licence for race %0-->
<command id="791" version="X2">Causes the player to lose their {PROPERTY:police licence} issued by the RACE $0.</command>



<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->


<!-- %0 get player tracking aim -->
<command id="535" version="X3R">Returns the OBJ currently targeted by the player, if any, otherwise it returns NULL.</command>
  
<!-- set player tracking aim to %0 -->
<command id="1046" version="X3R">Sets the current target of the player to the OBJ $0.</command>
  
<!-- %0 get fight rank -->
<command id="1059" version="X3R">Returns the raw NOTORIETY value of the player`s {PROPERTY:fight rank}.

{ABOUT_NOTORIETY}</command>
  
<!-- %0 get trade rank -->
<command id="1060" version="X3R">Returns the raw NOTORIETY value of the player`s {PROPERTY:trade rank}.

{ABOUT_NOTORIETY}</command>
  
<!-- %0 get player name -->
<command id="1070" version="X3R">Returns a STRING containing the {PROPERTY:name} of the player.</command>


<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->


<!-- %0get trade rank title: text=%1 -->
<command id="1468" version="X3TC">Returns the title or index of the player`s {PROPERTY:trade rank}, as a STRING if $1 is TRUE or an INTEGER if $1 is FALSE.

{ABOUT_NOTORIETY}</command>

<!-- %0get fight rank title: text=%1 -->
<command id="1469" version="X3TC">Returns the title or index of the player`s {PROPERTY:fight rank}, as a STRING if $1 is TRUE or an INTEGER if $1 is FALSE.

{ABOUT_NOTORIETY}</command>

<!-- %0get trade rank percentage -->
<command id="1470" version="X3TC">Returns the player`s progress towards their next {PROPERTY:trade rank} as a percentage.

{ABOUT_NOTORIETY}</command>

<!-- %0get fight rank precentage -->
<command id="1471" version="X3TC">Returns the player`s progress towards their next {PROPERTY:fight rank} as a percentage.

{ABOUT_NOTORIETY}</command>


<!-- %0get mission rank: name=%1 -->
<command id="1492" version="X3TC">Returns the index of the player`s {PROPERTY:notoriety rank} with the CORPORATION $1.

The CORPORATION must be specified with a STRING `L2Corpn00` where 0 &lt; n &lt; 9.

{ABOUT_NOTORIETY}</command>

<!-- set mission rank: name=%0 rank=%1 -->
<command id="1493" version="X3TC">Sets the index of the player`s {PROPERTY:notoriety rank} with the CORPORATION $0 to the INTEGER $1.

The CORPORATION must be specified with a STRING `L2Corpn00` where 0 &lt; n &lt; 9.

{ABOUT_NOTORIETY}

{HEADING:Warning}

The player must have already completed at least one mission with the CORPORATION $0 before this command will function correctly.</command>


<!-- %0is player warping -->
<command id="1519" version="X3TC">Returns TRUE if the player is in hyperspace and FALSE otherwise.</command>


<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->





<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                              Script Properties                               ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->


<!--
<command id="108" version="X2">%0 = get script priority</command>
<command id="109" version="X2">set script priority to %0</command>


<command id="113" version="X2">%0 connect ship command/signal %1 to script %2 with prio %3</command>
<command id="114" version="X2">%0 set ship command/signal %1 to global default behaviour</command>
<command id="115" version="X2">%0 ignore ship command/signal %1</command>
<command id="116" version="X2">enable signal/interrupt handling: %0</command>
<command id="117" version="X2">%0is signal/interrupt handling on</command>
<command id="118" version="X2">global script map: set: key=%0, class=%3, race=%4, script=%1, prio=%2</command>
<command id="119" version="X2">global script map: remove: key=%0, class=%1, race=%2</command>
<command id="120" version="X2">set script command: %0</command>
<command id="121" version="X2">%0get script command</command>
<command id="122" version="X2">set script command target: %0</command>
<command id="123" version="X2">%0get script command target</command>
<command id="124" version="X2">%0 datatyp[ %1 ]</command>
<command id="125" version="X2">%0 is datatyp[ %1 ] == %2</command>
<command id="127" version="X2">global script map: ignore: key=%0, class=%1, race=%2</command>
<command id="138" version="X2">%0state of news article: page=%1 id=%2</command>
<command id="139" version="X2">set state of news article page=%0 id=%1 to %2</command>


<command id="144" version="X2">set script command upgrade: command=%0  upgrade=%1</command>
<command id="145" version="X2">%0get script command upgrade: command=%1</command>
<command id="146" version="X2">%0is script with prio %1 on stack</command>
<command id="147" version="X2">%0get task ID</command>
-->

<!--%0get PID-->
<command id="148" version="X2">Returns the {PROPERTY:process ID} of any concurrently executing script, ie. one initiated using the {KEYWORD:START} keyword.

{HEADING:Information}

This command can be very useful when trying to create a global task that should only have one instance. For example, you could concurrently execute the script below from a setup script, and be confident that only one instance will be processing at any one time:

{VARIABLE:$PID} = {COMMAND:get PID}
{VARIABLE:$active.PID} = {COMMAND:get PID}
{COMMAND:set global variable: name='Process.ID' value=}{VARIABLE:$PID}
{KEYWORD:while} {VARIABLE:$active.PID} == {VARIABLE:$PID}
\t* Perform your processing here
\t= {COMMAND:wait randomly from 5000 to 10000 ms}
\t{VARIABLE:$active.PID} = {COMMAND:get global variable: name='Process.ID'}
{KEYWORD:end}{SUBMISSION:Jack08}</command>

<!--
<command id="153" version="X2">infinite loop detection enabled=%0</command>
<command id="154" version="X2">set script command upgrade: command=%0  upgrade=%1  script=%2</command>
-->


<!--%0get script version-->
<command id="1031" version="X2">Returns the {PROPERTY:version} of the currently executing script.</command>


<!--%0get script name-->
<command id="1032" version="X2">Returns the {PROPERTY:script name} of the currently executing script.</command>



<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->



<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->



<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->





<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                Ship Actions                                  ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->

<!--%1%0 fly to home base-->
<command id="500" version="X2">Commands the SHIP $0 to undock, fly to, and dock at it`s HOMEBASE.

{RETURNS_FLIGHT_CODE}

{CONSTANT:\[FLRET_LANDED\]} - The SHIP docked at it`s HOMEBASE successfully
{FLIGHT_INTERRUPTED:flight}
{FLIGHT_BREAK:flight}
{FLIGHT_ERROR:flight}
{CONSTANT:\[FLRET_ERROR\]} - The SHIP has no HOMEBASE

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</command>


<!--%1%0 fly to station %2-->
<command id="501" version="X2">Commands the SHIP $0 to undock, fly to, and dock at the STATION $2.

{RETURNS_FLIGHT_CODE}

{CONSTANT:\[FLRET_LANDED\]} - The SHIP docked at the STATION $2 successfully
{FLIGHT_INTERRUPTED:flight}
{FLIGHT_BREAK:flight}
{FLIGHT_ERROR:flight}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</command>


<!--%1%0 fly to sector %2-->
<command id="502" version="X2">Commands the SHIP $0 to undock and fly to the SECTOR $2.

If the SECTOR is invalid then the SHIP will fly to the SECTOR with co-ordinates \(0, 0\).

{RETURNS_FLIGHT_CODE}

{FLIGHT_NOCOMMANDS:flight}
{CONSTANT:\[FLRET_NOCOMMANDS\]} - The SECTOR $2 is unreachable
{FLIGHT_INTERRUPTED:flight}
{FLIGHT_INVALIDPARAMS}
{FLIGHT_BREAK:flight}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</command>



<!--%1%0 fire lasers on target %2 using turret %3-->
<command id="505" version="X2">Fires the LASER installed in TURRET $3 of the OBJ $0 at the target OBJ $2.

If the LASER was fired successfully this command returns TRUE.

If the OBJ $2 is not within the {PROPERTY:firing arc} of the LASER, or the LASER is `cooling down` after the last shot, this command returns FALSE.</command>



<!--%1%0 attack run on target %2 : timeout=%3 ms-->
<command id="506" version="X2">Commands the SHIP $0 to accelerate to {PROPERTY:maximum speed} and manoeuvre within {PROPERTY:firing range} of the OBJ $2 within a period of $3 {UNITS:milliseconds}.

{RETURNS_FLIGHT_CODE}

{CONSTANT:\[FLRET_FIREFREE\]} - The target OBJ is within range
{FLIGHT_TIMEOUT:3}
{CONSTANT:\[FLRET_BREAK\]} - The target OBJ is invalid
{CONSTANT:\[FLRET_BREAK\]} - The attack run was overriden by the collision avoidance routines
{FLIGHT_INTERRUPTED:attack run}
{FLIGHT_INVALIDPARAMS}

{HEADING:Information}

You can use this command repeatedly within the same attack run.  If the SHIP $0 is still in range, it will return {CONSTANT:\[FLRET_FIREFREE\]}.

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</command>


<!--%1%0 move around %2 ms-->
<command id="507" version="X2">Commands the SHIP $0 to move around randomly for the period $2 {UNITS:milliseconds}.

{RETURNS_FLIGHT_CODE}

{FLIGHT_NOCOMMANDS:movement}
{FLIGHT_INVALIDPARAMS}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</command>


<!--%1%0 escort ship %2-->
<command id="508" version="X2">Commands the SHIP $0 to escort the SHIP $2 until that SHIP is destroyed or jumps to another SECTOR.

{RETURNS_FLIGHT_CODE}

{FLIGHT_BREAK_JUMPED:2}
{FLIGHT_INTERRUPTED:escort}
{FLIGHT_INVALIDPARAMS}

{HEADING:Egosoft Warning}

It is very difficult to cause this command to return.  Unlike most `fly` commands, this will not return {CONSTANT:FLRET_BREAK} if another process executes a different `fly` command on the SHIP $0.

You can regain control of the SHIP $0 from a different script using the the {COMMAND:set follow mode} FALSE command, but the {COMMAND:escort ship} command in the original script will not return.

Unless the target SHIP $2 jumps to another SECTOR or is destroyed, you must terminate the script or interrupt it with another script.

{SEE_HANDBOOK_PAGE:47}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</command>


<!--%1%0 follow object %2 with precision %3 m-->
<command id="516" version="X2">Commands the SHIP $0 to move within a distance of $3 {UNITS:meters} of the the SHIP $2.

{RETURNS_FLIGHT_CODE}

{CONSTANT:\[FLRET_TARGETREACHED\]} - The SHIP has moved within range successfully
{FLIGHT_BREAK_JUMPED:2}
{FLIGHT_INTERRUPTED:movement}
{FLIGHT_INVALIDPARAMS}

{HEADING:Egosoft Warning}

It is very difficult to cause this command to return.  Unlike most `fly` commands, this will not return {CONSTANT:FLRET_BREAK} if another process executes a different `fly` command on the SHIP $0.

You can regain control of the SHIP $0 from a different script using the the {COMMAND:set follow mode} FALSE command, but the {COMMAND:escort ship} command in the original script will not return.

Unless the target SHIP $2 jumps to another SECTOR or is destroyed, you must terminate the script or interrupt it with another script.

{SEE_HANDBOOK_PAGE:49}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</command>



<!--$1 $0 move to position: x=$2x y=$3y z=$4z with precision $5a m-->
<command id="523" version="X2">Commands the SHIP $0 to move within $5a {UNITS:meters} of the {PROPERTY:position} with co-ordinates \(x, y, z\).

You should use a larger value for the distance $5a if the SHIP $0 is particularly large, or the co-ordinates \(x, y, z\) are near other OBJS.

{RETURNS_FLIGHT_CODE}

{FLIGHT_NOCOMMANDS:movement}
{FLIGHT_INTERRUPTED:movement}
{FLIGHT_INVALIDPARAMS}

{HEADING:Egosoft Warning}

If another process executes a different `fly` command on the SHIP $0, this command will never return.  {SEE_HANDBOOK_PAGE:51}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</command>

<!--$1 $0 turn turret $3x to target $2 : timeout=$4y ms-->
<command id="539" version="X2">Commands TURRET $3x of the SHIP $0 to turn to face the OBJ $2 within a period of $4y {UNITS:milliseconds}.

{RETURNS_FLIGHT_CODE}

{CONSTANT:\[FLRET_FIREFREE\]} - The {TYPE:turret} has turned to face the OBJ successfully
{FLIGHT_TIMEOUT:4y}
{FLIGHT_INTERRUPTED:turn}
{CONSTANT:\[FLRET_NOCOMMANDS\]} - One or more of the arguments is invalid

{HEADING:Egosoft Warning}

This command introduces a delay of around 250ms between aiming and firing which reduces the effective rate-of-fire of fast recharging LASERS.

{SEE_HANDBOOK_PAGE:45}

{COMMAND_INTERRUPTABLE}

{ABOUT_GUNS_AND_TURRETS}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</command>


<!--%1%0 move to ware object %2 for collecting: timeout=%3 ms-->
<command id="540" version="X2">Commands the SHIP $0 to move within collection range of the WARE $2 and point the SHIP towards it within a period of $3 {UNITS:milliseconds}.

{RETURNS_FLIGHT_CODE}

{CONSTANT:\[FLRET_FIREFREE\]} - The SHIP has moved within range successfully
{FLIGHT_BREAK:movement}
{FLIGHT_TIMEOUT:3}
{FLIGHT_INTERRUPTED:movement}
{FLIGHT_INVALIDPARAMS}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</command>


<!--%1%0 catch ware object %2-->
<command id="541" version="X2">Transfers the WARE $2 into the cargo bay of the SHIP $0.  If the WARE will not fit into the cargo bay of the SHIP, the WARE is destroyed.

This command returns TRUE if the WARE $0 was successfully transferred to the SHIP $0, otherwise it returns FALSE.</command>


<!--%1%0 fire missile %3 on %2-->
<command id="542" version="X2">Fires the MISSILE WARE $3 at the target OBJ $2.

Returns TRUE if the MISSILE was fired, otherwise this command returns FALSE.</command>


<!--%1%0 launch %2 fight drones: protect me or attack target=%3-->
<command id="546" version="X2">Command the SHIP $0 to launch $2 {OBJECT:Fighter Drones}, either to protect itself or attack the OBJ $3.

If the OBJ $3 is NULL then the {OBJECT:Fighter Drones} will protect the SHIP $0, otherwise they will attack the OBJ $3.

Returns TRUE if the {OBJECT:Fighter Drones} were launched successfully, otherwise this command returns FALSE.</command>


<!--%1%0 escort ship %2: timeout=%3 ms-->
<command id="562" version="X2">Commands the SHIP $0 to escort the SHIP $2 for a period of $3 {UNITS:milliseconds} or until that SHIP is destroyed or jumps to another SECTOR.

{RETURNS_FLIGHT_CODE}

{FLIGHT_BREAK_JUMPED:2}
{FLIGHT_TIMEOUT:3}
{FLIGHT_INTERRUPTED:escort}
{FLIGHT_INVALIDPARAMS}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</command>


<!--%1%0 follow object %2 with precision %3 m : timeout=%4 ms-->
<command id="563" version="X2">Commands the SHIP $0 to move within a distance of $3 {UNITS:meters} of the the SHIP $2 within a period of $3 {UNITS:milliseconds}.

{RETURNS_FLIGHT_CODE}

{CONSTANT:\[FLRET_TARGETREACHED\]} - The SHIP has moved within range successfully
{FLIGHT_BREAK_JUMPED:2}
{FLIGHT_TIMEOUT:3}
{FLIGHT_INTERRUPTED:escort}
{FLIGHT_INVALIDPARAMS}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</command>



<!--%1%0 defensive move: type=%2, intensity=%3, timeout=%4ms, avoid object=%5-->
<command id="565" version="X2">Commands the SHIP $0 to perform a defensive manoeuvre for the period of $4 {UNITS:milliseconds}.  This command will return NULL if the SHIP does not exist.

Custom {PROPERTY:manoeuvre types} are not supported and should always be NULL.

{HEADING:Optional Parameters}

Command the SHIP to manoeuvre away from the OBJ $5
Define the sharpness of the turns with the {PROPERTY:intensity} {UNITS:percentage} of $3

{RETURNS_FLIGHT_CODE}

{FLIGHT_NOCOMMANDS:manoeuvre}
{FLIGHT_INTERRUPTED:manoeuvre}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</command>


<!--%1%0 decouple ships-->
<command id="560" version="X2">Commands the {OBJECT:Kh`aak Cluster} $0 to break apart.

Returns TRUE if successful, and FALSE otherwise.</command>


<!--%1%0 is decoupled ships leader-->
<command id="561" version="X2">Returns TRUE if the SHIP $0 is the FORMATIONLEADER of a decoupled {OBJECT:Kh`aak Cluster}.</command>


<!--%0 add default items to ship-->
<command id="645" version="X2">Installs the default SHIELD, LASER and {TYPE:ammunition} WARES to the SHIP $0.</command>


<!--$0 switch laser in turret $2 gun $3x to $1y-->
<command id="648" version="X2">Installs the GUN $1y in {PROPERTY:gun slot} $3x of TURRET $2 on the SHIP $0.

{ABOUT_GUNS_AND_TURRETS}</command>


<!--%1%0 use jump drive: target=%2-->
<command id="566" version="X2">Commands the SHIP $0 to jump to the SECTOR or JUMPGATE $2.

Return TRUE if successful, otherwise FALSE.</command>


<!--%1%0 check, select and fire missile on %2-->
<command id="568" version="X2">Commands the SHIP $0 to fire a MISSILE on the OBJ $2, if the {PROPERTY:missile fire probability} of the SHIP indicates it is appropriate to do so.

Returns TRUE if a MISSILE was fired, and FALSE otherwise.</command>


<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->



<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->



<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->





<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                Ship Properties                               ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->

<!--%0 set formation %1-->
<command id="509" version="X2">Sets the FORMATION of the {PROPERTY:followers} of the SHIP $0 to the FORMATION $1.

{RELATED_SCRIPT_OBJECT_LIST:Formations,Formations}</command>


<!--%0 add to formation with leader %1-->
<command id="510" version="X2">Adds the SHIP $0 to the FORMATION whose {PROPERTY:leader} is the SHIP $1.

{HEADING:Information}

{TYPE:Ships} that are in a FORMATION receive special {TYPE:signals}.

{RELATED_SCRIPT_OBJECT_LIST:Signals,Signals}</command>


<!--%0 remove from any formation-->
<command id="511" version="X2">Removes the SHIP $0 from any FORMATION it may be in.</command>


<!--%1%0 get formation leader-->
<command id="512" version="X2">Returns the SHIP that is the {PROPERTY:leader} of the FORMATION to which the SHIP $0 belongs.  If the SHIP $0 belongs to no FORMATION, the command returns NULL.</command>


<!--%0 set follow mode %1-->
<command id="517" version="X2">Enables or disables {PROPERTY:follow mode} on the SHIP $0, allowing a different script to take control of the SHIP while it is executing a {COMMAND:escort} or {COMMAND:follow} command.

Set $1 to TRUE to enable {PROPERTY:follow mode}, and FALSE to disable it.

{HEADING:Information}

This will not cause the {COMMAND:escort} or {COMMAND:follow} command to return {CONSTANT:\[FLTRET_BREAK\]}

{SEE_HANDBOOK_PAGE:50}</command>


<!--%1%0 get follow mode-->
<command id="518" version="X2">Returns TRUE if the SHIP $0 is in {PROPERTY:follow mode}, and FALSE otherwise.</command>


<!--%0 set destination to %1-->
<command id="519" version="X2">Sets the {PROPERTY:destination} of the SHIP $0 to the OBJ or SECTOR $1.

This does not change the true {PROPERTY:destination} of the SHIP $0, it only displays the {PROPERTY:destination} to the user.</command>


<!--%1%0 get destination-->
<command id="520" version="X2">Returns the OBJ or SECTOR marked as the {PROPERTY:destination} of the SHIP $0.

This must have been previously set by the {COMMAND:set destination to ...} command.</command>


<!--%0 set attack target to %1-->
<command id="521" version="X2">Sets the {PROPERTY:attack target} of the SHIP $0 to the OBJ $1.

This does not change the true {PROPERTY:target} of the SHIP $0, it only displays the {PROPERTY:target} to the user.</command>


<!--%1%0 get attack target-->
<command id="522" version="X2">Returns the OBJ marked as the {PROPERTY:attack target} of the SHIP $0.

This must have been previously set by the {COMMAND:set attack target} command.</command>


<!--$1 $0 select new formation leader by: ship class=$2x strength=$3y min.speed=$4z-->
<command id="530" version="X2">Searches a FORMATION of SHIPS for the strongest, slowest or OBJCLASS most appropriate to be new FORMATIONLEADER.  This is usually performed after the existing FORMATIONLEADER has been destroyed.

Set the desired property to TRUE and remaining properties to FALSE.

This command does not assign a new FORMATIONLEADER, it only determines the best candidate.

{RELATED_COMMAND:To assign a SHIP as FORMATIONLEADER,give formation leadership to,Ship Property}</command>


<!--%1%0 has formation ships-->
<command id="531" version="X2">Returns TRUE if the SHIP $0 is a FORMATIONLEADER, otherwise it returns FALSE.</command>


<!--%0 give formation leadership to %1-->
<command id="532" version="X2">Promotes the SHIP $0 to {PROPERTY:leader} of the FORMATION to which it belongs.

Returns TRUE if succesful, otherwise this command returns FALSE.</command>


<!--%1%0 is %2 in firing range of turret %3-->
<command id="536" version="X2">Returns TRUE if the OBJ $2 is within {PROPERTY:firing range} of TURRET $3 of the SHIP $0, otherwise it returns FALSE.

{ABOUT_GUNS_AND_TURRETS}</command>


<!--%1%0 find enemy in firing range of turret %2-->
<command id="537" version="X2">Returns a random {PROPERTY:enemy} SHIP within {PROPERTY:firing range} of TURRET $2 of the SHIP $0, if any, otherwise it returns NULL.

{ABOUT_GUNS_AND_TURRETS}</command>


<!--%1%0 get current missile-->
<command id="543" version="X2">Returns the MISSILE WARE currently installed on the SHIP $0, if any, otherwise it returns NULL.</command>


<!--%1%0 find best missile for target %2-->
<command id="544" version="X2">Returns the most appropriate MISSILE WARE with which to attack the OBJ $2, out of the current MISSILES aboard the SHIP $0.</command>


<!--%0 best missile type for target %1-->
<command id="545" version="X2">Returns the most appropriate MISSILE WARE with which to attack the OBJ $1.</command>


<!--%1%0 is missile %2 ready to fire-->
<command id="547" version="X2">Returns TRUE if the SHIP $0 has the MISSILE WARE $2 in it`s cargo bay and is capable of firing them, otherwise it returns FALSE.</command>


<!--%1%0 should a missile be fired-->
<command id="548" version="X2">Checks the {PROPERTY:missile fire probability} of the SHIP $0 and determines whether a MISSILE should be fired.

Returns TRUE if a MISSILE should be fired, and FALSE otherwise.

{RELATED_COMMAND:To fire a MISSILE if approprate in a single command,check select and fire missile,Ship Action}</command>


<!--%1%0 get fire missile probability-->
<command id="549" version="X2">Returns the {PROPERTY:missile fire probability} of the SHIP $0, as a {UNITS:percentage}.</command>


<!--%1%0 get fire missile time difference in seconds-->
<command id="550" version="X2">{NOT_IMPLEMENTED}</command>


<!--%0 set fire missile probability to %1-->
<command id="551" version="X2">Sets the {PROPERTY:missile fire probability} {UNITS:percentage} of the SHIP $0.</command>


<!--%0 set fire missile time difference to %1 s-->
<command id="552" version="X2">{NOT_IMPLEMENTED}</command>


<!--%1%0 fits laser %2 into turret %3-->
<command id="553" version="X2">Returns TRUE if the LASER $2 is compatible with TURRET $2 of the SHIP $0, otherwise this command returns FALSE.

{ABOUT_GUNS_AND_TURRETS}</command>


<!--%1%0 get max. number of lasers in turret %2-->
<command id="554" version="X2">Returns the maximum number of GUNS that can be held in TURRET $2 of the SHIP $0.

{ABOUT_GUNS_AND_TURRETS}</command>


<!--$1 $0 get laser type in turret $2x at slot $3y-->
<command id="555" version="X2">Returns the LASER WARE currently installed in {PROPERTY:gun slot} $3y of TURRET $2x on the SHIP $0.

If that {PROPERTY:gun slot} is currently empty, this command returns NULL.

{ABOUT_GUNS_AND_TURRETS}</command>


<!--%1%0 get number of turrets-->
<command id="556" version="X2">Returns the number of TURRETS on the SHIP $0.

{ABOUT_GUNS_AND_TURRETS}</command>


<!--%1%0 get formation follower ships-->
<command id="559" version="X2">Returns a new ARRAY containing all the SHIPS in the FORMATION of which the SHIP $0 is a member.  If the SHIP is not in a FORMATION, this command returns NULL.</command>


<!--%1%0 needed jump drive energy for jump to sector %2-->
<command id="567" version="X2">Returns the {PROPERTY:ware quantity} of {OBJECT:Energy Cells} required to jump from the SECTOR containing the SHIP $0 to the SECTOR $2.

{HEADING:Information}

If the SHIP $0 is in the same SECTOR as $2, this command returns the {PROPERTY:ware quantity} of {OBJECT:Energy Cells} required to jump between adjacent SECTORS.</command>


<!--%1%0 get max trade jumps-->
<command id="644" version="X2">Returns the maximum {PROPERTY:jump distance} that a SHIP $0, OWNEDBY to a STATION, will travel to buy or sell WARES.</command>


<!--%1%0 has illegal ware onboard: race=%2-->
<command id="654" version="X2">Returns TRUE if the SHIP $0 has WARES onboard that are {PROPERTY:illegal} in the SECTORS OWNEDBY by the RACE $2, otherwise this command returns FALSE.</command>


<!--%0 set homebase to %1-->
<command id="713" version="X2">Sets the {PROPERTY:homebase} of the SHIP $0 to the {CLASS:Carrier} or STATION $1.</command>


<!--%1%0 get max upgrades for upgrade %2-->
<command id="784" version="X2">Returns the maximum number of {PROPERTY:upgrades} of the {PROPERTY:installed component} WARE $2 that can be installed on the SHIP $0.</command>


<!--%1%0 get homebase-->
<command id="704" version="X2">Returns the {PROPERTY:homebase} of the SHIP $0, if any, otherwise this commands returns NULL.</command>


<!--$1 $0 get max speed-->
<command id="785" version="X2">Returns the maximum {PROPERTY:speed} of the OBJ $0.</command>


<!--%1%0 get max upgraded speed-->
<command id="788" version="X2">Returns the {PROPERTY:maximum speed} of the SHIP $0, assuming all {OBJECT:Engine Tunings} were installed.</command>


<!--%1%0 get max laser strength in turret %2-->
<command id="903" version="X2">Returns the maximum {PROPERTY:laser energy}, in {UNITS:Joules}, of all the GUNS in the TURRET of the OBJ $0.</command>


<!--%0 set as player wingman: %1-->
<command id="1026" version="X2">Adds or removes the SHIP $0 as the {PROPERTY:wingman} of the player`s SHIP.

Set $1 to TRUE to add the SHIP $0 as the {PROPERTY:wingman} and FALSE to remove.</command>


<!--%1%0 is player wingman-->
<command id="1027" version="X2">Returns TRUE if the SHIP $0 if the {PROPERTY:wingman} of the player`s SHIP, and FALSE otherwise.</command>


<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->


<!-- %1%0 get current max speed -->
<command id="1049" version="X3R">Returns the current maximum {PROPERTY:speed} of the OBJ $0.</command>
  

<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->


<!-- %0set ship speed to %1 -->
<command id="1332" version="X3TC">Sets the {PROPERTY:speed} of the SHIP $0 to $1 {UNITS:m/s}.</command>


<!-- %0set laser energy to %1 -->
<command id="1333" version="X3TC">Sets the {PROPERTY:laser energy} of TURRET 0 of the OBJ $0 to $1 {UNITS:joules}.</command>
  

<!-- %0get freight scanner range -->
<command id="1342" version="X3TC">Returns the range of the {OBJECT:Freight Scanner} in {UNITS:meters}.</command>


<!-- %0get transporter range -->
<command id="1343" version="X3TC">Returns the range of the {OBJECT:Transporter} in {UNITS:meters}.</command>


<!-- %0get mineral scanner range -->
<command id="1344" version="X3TC">Returns the range of the {OBJECT:Mineral Scanner} in {UNITS:meters}.</command>


<!-- %0get maker race: shiptype=%1 -->
<command id="1349" version="X3TC">Returns the RACE which {PROPERTY:manufactures} the SHIP $1.</command>


<!-- %1%0 is civilian ship -->
<command id="1353" version="X3TC">Returns TRUE if the SHIP $0 is a {PROPERTY:civilian} ship and FALSE otherwise.</command>


<!--$1 $0 can launch marines-->
<command id="1431" version="X3TC">Returns TRUE if the SHIP $0 can launch MARINES without a {OBJECT:Boarding Pod}, otherwise it returns FALSE.

{HEADING:Information}

Only the following classes of SHIP are capable of launching MARINES without a {OBJECT:Boarding Pod}:
[center]{M6_CLASS}\t{TP_CLASS}[/center]</command>


<!--$1 $0 is ship boardable-->
<command id="1432" version="X3TC">Returns TRUE if the SHIP $0 can be boarded by MARINES, otherwise it returns FALSE.

{ABOUT_BOARDING_TARGETS}</command>

<!-- %1%0 get ship variation -->
<command id="1475" version="X3TC">Returns the {PROPERTY:variation} of a SHIP $0.  eg. Raider, Sentinel, Vanguard.

Matching titles can be found in page 17, starting with string ID 10,000.</command>


<!-- %0get ship variation: subtype=%1 -->
<command id="1476" version="X3TC">Returns the {PROPERTY:variation} of a SHIP of OBJTYPE $1.  eg. Raider, Sentinel, Vanguard.

Matching titles can be found in page 17, starting with string ID 10,000.</command>


<!-- %1%0 is missile boat -->
<command id="1482" version="X3TC">{UNDOCUMENTED}</command>


<!-- %1%0 is invincible -->
<command id="1498" version="X3TC">Returns TRUE if the OBJ $0 is {PROPERTY:invincible} and FALSE otherwise.

This property can only be set using a {MD} script.</command>


<!-- %1%0 get desired speed -->
<command id="1525" version="X3TC">{UNDOCUMENTED}</command>


<!-- %0set desired speed: %1 -->
<command id="1526" version="X3TC">{UNDOCUMENTED}</command>


<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->





<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                Ship Trading                                  ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->


<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->

<!--%1%0 buy %2 units of %3-->
<command id="601" version="X2">Buys a {PROPERTY:ware quantity} of $2 {UNITS:units} of the WARE $3 into the cargo bay of the SHIP $0 from the STATION at which the SHIP is docked.

If there is insufficient {PROPERTY:cargo bay space} or the STATION does not have $2 {UNITS:units} for sale, the maximum allowable number of {UNITS:units} are transferred.

If the SHIP $0 has a {PROPERTY:homebase}, the cost of the purchase is deducted from the {PROPERTY:homebase account}, otherwise it is deducted from the {PROPERTY:player account}.

This command returns the actual number of {UNITS:units} bought.</command>


<!--$1 $0 buy $2x units of $3 to a max. price of $4y cr-->
<command id="602" version="X2">Buys a {PROPERTY:ware quantity} of $2 {UNITS:units} of the WARE $3 into the cargo bay of the SHIP $0 from the STATION at which the SHIP is docked, but only if the {PROPERTY:ware price} is less than or equal to $4y credits.

If there is insufficient {PROPERTY:cargo bay space} or the STATION does not have $2 {UNITS:units} for sale, the maximum allowable number of {UNITS:units} are transferred.

If the SHIP $0 has a {PROPERTY:homebase}, the cost of the purchase is deducted from the {PROPERTY:homebase account}, otherwise it is deducted from the {PROPERTY:player account}.

This command returns the actual number of {UNITS:units} bought.</command>


<!--%1%0 sell %2 units of %3-->
<command id="603" version="X2">Sells a {PROPERTY:ware quantity} of $2 {UNITS:units} of the WARE $3 from the cargo bay of the SHIP $0 to the STATION at which the SHIP is docked.

If $2 is more than the {PROPERTY:ware quantity} aboard the SHIP, or the STATION does not have enough {PROPERTY:cargo bay space} for $2 {UNITS:units}, the maximum allowable number of {UNITS:units} are transferred.

If the SHIP $0 has a {PROPERTY:homebase}, the money from the sale is added to the {PROPERTY:homebase account}, otherwise it is added to the {PROPERTY:player account}.

This command returns the actual number of {UNITS:units} sold.</command>


<!--%1%0 get max. ware transport class-->
<command id="610" version="X2">Returns the largest {TYPE:transport class} that the SHIP $0 can hold.</command>


<!--%1%0 get cargo bay size-->
<command id="611" version="X2">Returns the {PROPERTY:volume} of occupied and unoccupied cargo bay space of the SHIP $0.</command>


<!--%1%0 get free volume of cargo bay-->
<command id="612" version="X2">Returns the {PROPERTY:volume} of the unoccupied cargo bay space of the SHIP $0.</command>


<!--%1%0 get volume of ware %2 in cargo bay-->
<command id="613" version="X2">Returns the {PROPERTY:volume} occupied by the WARE $2 in the cargo bay and as {PROPERTY:installed components} of the SHIP $0.</command>


<!--%1%0 get true volume of ware %2 in cargo bay-->
<command id="614" version="X2">Returns the {PROPERTY:volume} occupied by the WARE $2 in the cargo bay of the SHIP $0.</command>


<!--%1%0 get free volume of ware %2 in cargo bay-->
<command id="615" version="X2">Returns the {PROPERTY:volume} of the WARE $2 that could potentially fit in the unoccupied cargo space of the SHIP $0.</command>


<!--%1%0 get total volume in cargo bay-->
<command id="616" version="X2">Returns the {PROPERTY:volume} of the occupied cargo bay space of the SHIP $0.</command>


<!--%1%0 can transport ware %2-->
<command id="617" version="X2">Returns TRUE if the SHIP $0 is capable of transporting the WARE $2, and FALSE otherwise.</command>


<!--%1%0 get amount of ware %2 in cargo bay-->
<command id="618" version="X2">Returns the total {PROPERTY:ware quantity} of the WARE $2 in the cargo bay and as {PROPERTY:installed components} of the SHIP $0.</command>


<!--%1%0 get true amount of ware %2 in cargo bay-->
<command id="619" version="X2">Returns the total {PROPERTY:ware quantity} of the WARE $2 in the cargo bay of the SHIP $0.</command>


<!--%1%0 get free amount of ware %2 in cargo bay-->
<command id="620" version="X2">Returns the {PROPERTY:quantity} of the WARE $2 that could potentially fit in the unoccupied cargo space of the SHIP $0.</command>


<!--%1%0 get max amount of ware %2 that can be stored in cargo bay-->
<command id="621" version="X2">Returns the potential {PROPERTY:quantity} of the WARE $2 that would be contained in the cargo bay of the SHIP $0, if all the remaining space were filled with the WARE $2.

This includes any of the WARE $2 that is already in the cargo bay.</command>


<!--%1%0 load %2 units of %3-->
<command id="639" version="X2">Transfers a {PROPERTY:ware quantity} of $2 {UNITS:units} of the WARE $3 into the cargo bay of the SHIP $0 from the STATION at which the SHIP is docked.

If there is insufficient {PROPERTY:cargo bay space} or the STATION does not have $2 {UNITS:units} for sale, the maximum allowable number of {UNITS:units} are transferred.

No money is exchanged in this transaction.

This command returns the actual number of {UNITS:units} transferred.</command>


<!--%1%0 unload %2 units of %3-->
<command id="640" version="X2">Transfers a {PROPERTY:ware quantity} of $2 {UNITS:units} of the WARE $3 from the cargo bay of the SHIP $0 to the STATION at which the SHIP is docked.

If $2 is more than the {PROPERTY:ware quantity} aboard the SHIP, or the STATION does not have enough {PROPERTY:cargo bay space} for $2 {UNITS:units}, the maximum allowable number of {UNITS:units} are transferred.

No money is exchanged in this transaction.

This command returns the actual number of {UNITS:units} transferred.</command>


<!--%1%0 add %2 units of %3-->
<command id="646" version="X2">Adds a {PROPERTY:ware quantity} of $2 {UNITS:units} of the WARE $3 to the cargo bay of the SHIP $0.

If the {PROPERTY:ware quantity} $2 is a negative INTEGER, the WARES are removed.</command>


<!--%1%0 install %2 units of %3-->
<command id="647" version="X2">Installs a {PROPERTY:ware quantity} of $2 {UNITS:units} of the WARE $3 to the SHIP $0 as {PROPERTY:installed components}.

If the {PROPERTY:ware quantity} $2 is a negative INTEGER, the WARES are removed.</command>


<!--%0 set wanted ware count to %1-->
<command id="649" version="X2">Informs a SHIP that is executing a {CONSTANT:\[COMMAND_GET_WARE\]} or {CONSTANT:\[COMMAND_GET_WARE_BEST\]} command to display to the user, the {PROPERTY:ware quantity} $1 that it is seeking to purchase.

{HEADING:Information}

This command does not order the SHIP $0 to search for the WARE $1, it only displays the {PROPERTY:ware quantity} to the user.</command>


<!--%0 set wanted ware to %1-->
<command id="650" version="X2">Informs a SHIP that is executing a {CONSTANT:\[COMMAND_GET_WARE\]} or {CONSTANT:\[COMMAND_GET_WARE_BEST\]} command to display to the user, the WARE $1 that it is seeking to purchase.

{HEADING:Information}

This command does not order the SHIP $0 to search for the WARE $1, it only displays the {PROPERTY:ware quantity} to the user.</command>


<!--%1%0 get wanted ware count-->
<command id="651" version="X2">Returns the {PROPERTY:ware quantity} that is sought by the SHIP $0, when executing a {CONSTANT:\[COMMAND_GET_WARE\]} or {CONSTANT:\[COMMAND_GET_WARE_BEST\]} command.

This must have been previously set by the {COMMAND:set wanted ware count to ...} command.</command>


<!--%1%0 get wanted ware-->
<command id="652" version="X2">Returns the WARE that is sought by the SHIP $0, when executing a {CONSTANT:\[COMMAND_GET_WARE\]} or {CONSTANT:\[COMMAND_GET_WARE_BEST\]} command.

This must have been previously set by the {COMMAND:set wanted ware to ...} command.</command>


<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->



<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->



<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->



<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                               Station Properties                             ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->

<!--%1%0 get best store amount of ware %2-->
<command id="622" version="X2">Returns the maximum {PROPERTY:ware quantity} of the WARE $2 that can be stored in the DOCK $0.</command>


<!--%1%0 get max. store amount of ware %2-->
<command id="623" version="X2">Returns the maximum {PROPERTY:ware quantity} of the WARE $2 that can be stored in the FACTORY $0.</command>


<!--%1%0 can buy ware %2-->
<command id="624" version="X2">Returns TRUE if the STATION $0 can buy the WARE $2, and FALSE otherwise.</command>


<!--%1%0 can sell ware %2-->
<command id="625" version="X2">Returns TRUE if the STATION $0 can sell the WARE $2, and FALSE otherwise.</command>


<!--$1 $0 get price of ware $2-->
<command id="627" version="X2">Returns the current {PROPERTY:ware price} of the WARE $2 at the STATION $0, in {UNITS:credits}.</command>


<!--$1 $0 get average price of station ware $2-->
<command id="628" version="X2">Returns the {PROPERTY:average ware price} of the WARE $2, sold at the STATION $0, in {UNITS:credits}.

{COMMAND_NAME_CHANGED:get average price of ware}</command>


<!--%0 set price of ware %1 to %2 cr-->
<command id="634" version="X2">Sets the current {PROPERTY:ware price} of the WARE $2, sold at the STATION $0, to $1 {UNITS:credits}.</command>


<!--%1%0 uses ware %2 as primary resource-->
<command id="635" version="X2">Returns TRUE if the STATION $0 buys the WARE $2 as a PRIMARYRESOURCE, and FALSE otherwise.</command>


<!--%1%0 uses ware %2 as secondary resource-->
<command id="636" version="X2">Returns TRUE if the STATION $0 buys the WARE $2 as a SECONDARYRESOURCE, and FALSE otherwise.</command>


<!--%1%0 trades with ware %2-->
<command id="637" version="X2">Returns TRUE if the STATION $0 buys or sells the WARE $2, and FALSE otherwise.</command>


<!--%1%0 get product ware-->
<command id="638" version="X2">Returns the WARE that is produced by the FACTORY $0.

If this command is used on a DOCK or SHIPYARD, it will return NULL.</command>


<!--%1%0 get number of resources-->
<command id="641" version="X2">Returns the total number of {PROPERTY:primary resources} and {PROPERTY:secondary resources} bought by the STATION $0.</command>


<!--%1%0 get number of primary resources-->
<command id="642" version="X2">Returns the number of {PROPERTY:primary resources} bought by the STATION $0.</command>


<!--%1%0 get number of secondary resources-->
<command id="643" version="X2">Returns the number of {PROPERTY:secondary resources} bought by the STATION $0.</command>


<!--%1%0 only player own ships can trade with-->
<command id="665" version="X2">Returns TRUE if only {PROPERTY:player owned} SHIPS are allowed to trade with the STATION $0, and FALSE otherwise.</command>


<!--$1 $0 get serial name of station-->
<command id="708" version="X2">Returns the SERIAL of STATION $0.

{HEADING:Information}

Each STATION has a name and a SERIAL represented by a greek letter. eg. Alpha, Beta, Gamma.

{RELATED_SCRIPT_OBJECT_LIST:SERIALS,Station Serials}</command>


<!--%1%0 get tradeable ware array from station-->
<command id="1041" version="X2">Returns a new ARRAY containing all the WARES that are bought and sold by the STATION $0.

The ARRAY contains the PRODUCTS first, then {PROPERTY:primary resources} followed by {PROPERTY:secondary resources}.</command>


<!--%0 set serial name of station to %1-->
<command id="1043" version="X2">Sets the SERIAL of the non-player STATION $0 to $1.

{HEADING:Information}

Each STATION has a name and a SERIAL represented by a greek letter. eg. Alpha, Beta, Gamma.

{RELATED_SCRIPT_OBJECT_LIST:SERIALS,Station Serials}</command>



<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->



<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->


<!-- %1%0 is military outpost -->
<command id="1484" version="X3TC">Returns TRUE if the OBJ $0 is a {OBJECT:Military Output} and FALSE otherwise.</command>


<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->





<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                               Station Trading                                ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->

<!--%0 add money: %1-->
<command id="661" version="X2">Adds $1 {UNITS:credits} to the {PROPERTY:station account} of the STATION $0.

If $1 is a negative INTEGER, the {UNITS:credits} are deducted.</command>

<!--%1%0 get money-->
<command id="600" version="X2">Returns the number of {UNITS:credits} in the {PROPERTY:station account} of the STATION $0.</command>


<!--VANILLA:  VARIATION:  $0 find station: product $1 with best price:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--XSTUDIO:  VARIATION:  $0 find factory: sells $1 with best price:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<command id="606" version="X2">Finds and returns the FACTORY selling the WARE $1 at the lowest price.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,3y}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station: product ... with best price}</command>


<!--VANILLA:  VARIATION:  $0 find station: product $1 with min. jumps:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--XSTUDIO:  VARIATION:  $0 find factory: sells $1 with min. jumps:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<command id="607" version="X2">Finds and returns the nearest FACTORY selling the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,3y}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station: product ... with min. jumps}</command>		



<!--VANILLA:  VARIATION:  $0 find station: resource $1 with best price: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--XSTUDIO:  VARIATION:  $0 find factory: buys $1 with best price: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<command id="608" version="X2">Finds and returns the FACTORY willing to buy the WARE $1 for the highest price.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,3y}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station: resource ... with best price}</command>



<!--VANILLA:  VARIATION:  $0 find station: resource $1 with min. jumps: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--XSTUDIO:  VARIATION:  $0 find factory: buys $1 with min. jumps: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<command id="609" version="X2">Finds and returns the nearest FACTORY willing to buy the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,3y}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station: resource ... with min. jumps}</command>		


<!--VANILLA:  VARIATION:  $0 find station sells: resource $1 with best price: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--XSTUDIO:  VARIATION:  $0 find dock: sells: $1 with best price: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<command id="663" version="X2">Finds and returns the DOCK selling the WARE $1 at the lowest price.  {SEARCH_RANGE:DOCK,4z,5}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,2x}
{SEARCH_BY_QUANITY_SELL:DOCKS,3y}
{SEARCH_BY_TRADER:DOCKS,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station sells: resource ... with best price}</command>



<!--VANILLA:  VARIATION:  $0 find station sells: resource $1 with min. jumps: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--XSTUDIO:  VARIATION:  $0 find dock: sells $1 with min. jumps: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<command id="664" version="X2">Finds and returns the nearest DOCK selling the WARE $1.  {SEARCH_RANGE:DOCK,4z,5}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,2x}
{SEARCH_BY_QUANITY_SELL:DOCKS,3y}
{SEARCH_BY_TRADER:DOCKS,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station sells: resource ... with min. jumps}</command>	



<!--$0 find station in galaxy: startsector=$1 class or type=$2o race=$3 flags=$4x refobj=$5x serial=$6 max.jumps=$7y-->
<command id="709" version="X2">Find and returns a single STATION that is a maximum {PROPERTY:jump distance} of $7y from the SECTOR $1.  {SEARCH_SYNTAX:STATION}

{HEADING:Optional Parameters}

{SEARCH_BY_TYPE_CLASS:STATIONS,2o}
{SEARCH_BY_RACE:STATIONS,3}
{SEARCH_BY_SERIAL:6}
{SEARCH_BY_FLAGS:STATIONS,4x}

{HEADING:Search Flags}

{FLAG_NEAREST:STATION,5x}
{FLAG_RANDOM:STATION}
{FLAG_VISIBLE:STATIONS,5x}
{FLAG_KNOWN:STATIONS}
{FLAG_EXACT_JUMPS:STATIONS,7y}
{FLAG_DOCKING_ALLOWED:STATIONS,5x}
{FLAG_FRIEND:STATIONS,5x}
{FLAG_ENEMY:STATIONS,5x}
{FLAG_NEUTRAL:STATIONS,5x}

{HEADING:Unsupported Search Flags}

{FLAG_NO_MULTIPLE:STATION}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_COMBINING:Enemy,Nearest}

{FLAGS_RELATION_REQUIREMENT:5x}

This command only searches SECTORS connected to $1 via JUMPGATES, it does not search the universe topographically and will therefore return NULL in most instances when used in a SECTOR with no JUMPGATES.

All {PROPERTY:jump distances} are zero-based.</command>
 

<!--%0 add product to factory or dock: %1-->
<command id="750" version="X2">Adds the WARE $1 to the list of PRODUCTS sold by the STATION $0.</command>


<!--%0 add primary resource to factory: %1-->
<command id="751" version="X2">Adds the WARE $1 to the list of {PROPERTY:primary resources} bought by the STATION $0.</command>


<!--%0 add second resource to factory: %1-->
<command id="752" version="X2">Adds the WARE $1 to the list of {PROPERTY:secondary resources} bought by the STATION $0.</command>


<!--%0 station trade and production tasks: on=%1-->
<command id="760" version="X2">Activates or deactives the production timers of the STATION $0.

The timers are activated if $1 is TRUE, and deactivated if $1 is FALSE.

{HEADING:Information}

This is designed for use with the {COMMAND:create station} command, which creates STATIONS in a `deactivated` state to give the script time to add WARES to the station.</command>


<!--%0 remove product from factory or dock: %1-->
<command id="781" version="X2">Removes the WARE $1 from the list of PRODUCTS sold by the STATION $0.</command>


<!--%0 remove primary resource from factory: %1-->
<command id="782" version="X2">Removes the WARE $1 from the list of {PROPERTY:primary resources} sold by the STATION $0.</command>


<!--%0 remove second resource from factory: %1-->
<command id="783" version="X2">Removes the WARE $1 from the list of {PROPERTY:secondary resources} sold by the STATION $0</command>



<!--$0 find station: sector=$1 class or type=$2o race=$3 flags=$4x refobj=$5x maxdist=$6y maxnum=$7z refpos=$8-->
<command id="794" version="X2">Finds and returns up to $7z STATIONS within the SECTOR $1.  {SEARCH_SYNTAX:STATIONS}

{HEADING:Optional Parameters}

{SEARCH_BY_TYPE_CLASS:STATIONS,2o}
{SEARCH_BY_RACE:STATIONS,3}
{SEARCH_BY_DISTANCE_2:STATIONS,6y,5x,8}
{SEARCH_BY_FLAGS:STATIONS,4x}

{HEADING:Search Flags}

{FLAG_NEAREST:STATION,5x}
{FLAG_RANDOM:STATION}
{FLAG_VISIBLE:STATIONS,5x}
{FLAG_KNOWN:STATIONS}
{FLAG_DOCKING_ALLOWED:STATIONS,5x}
{FLAG_FRIEND:STATIONS,5x}
{FLAG_ENEMY:STATIONS,5x}
{FLAG_NEUTRAL:STATIONS,5x}

{HEADING:Unsupported Search Flags}

{FLAG_NO_EXACTJUMPS:1}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_COMBINING:Enemy,Multiple}

{FLAGS_MULTIPLE_NEAREST}

{FLAGS_RELATION_REQUIREMENT:5x}</command>	



<!--VANILLA:  VARIATION:  $1 $0 find station: product $2 with best price:  max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different factory: sells $2 with best price:  max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<command id="1002" version="X2">Finds and returns the FACTORY selling the WARE $2 at the lowest price, that isn`t the FACTORY $0.  {SEARCH_RANGE:FACTORY,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,3x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,4y}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station: product ... with best price}</command>		



<!--VANILLA:  VARIATION:  $1 $0 find station: product $2 with min. jumps:  max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different factory: sells $2 with min. jumps:  max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<command id="1003" version="X2">Finds and returns the nearest FACTORY selling the WARE $2, that isn`t the FACTORY $0.  {SEARCH_RANGE:FACTORY,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,3x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,4y}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station: product ... with min. jumps}</command>		


<!--VANILLA:  VARIATION:  $1 $0 find station: resource $2 with best price: min.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different factory: buys $2 with best price: min.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<command id="1004" version="X2">Finds and returns the FACTORY willing to buy the WARE $2 for the highest price, that isn`t the FACTORY $0.  {SEARCH_RANGE:FACTORY,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,3x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,4y}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station: resource ... with best price}</command>		


<!--VANILLA:  VARIATION:  $1 $0 find station: resource $2 with min. jumps: min.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different factory: buys $2 with min. jumps: min.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<command id="1005" version="X2">Finds and returns the nearest FACTORY willing to buy the WARE $2, that isn`t the FACTORY $0.  {SEARCH_RANGE:FACTORY,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,3x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,4y}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station: resource ... with min. jumps}</command>		


<!--VANILLA:  VARIATION:  $1 $0 find station sells: resource $2 with best price: max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different dock: sells $2 with best price: max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<command id="1006" version="X2">Finds and returns the DOCK selling the WARE $2 at the lowest price, that isn`t the DOCK $0.  {SEARCH_RANGE:DOCK,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,3x}
{SEARCH_BY_QUANITY_SELL:DOCKS,4y}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station sells: resource ... with best price}</command>		


<!--VANILLA:  VARIATION:  $1 $0 find station sells: resource $2 with min. jumps: max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different dock: sells $2 with min. jumps: max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<command id="1007" version="X2">Finds and returns the nearest DOCK selling the WARE $2, that isn`t the DOCK $0.  {SEARCH_RANGE:DOCK,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,3x}
{SEARCH_BY_QUANITY_SELL:DOCKS,4y}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station sells: resource ... with min. jumps}</command>


<!--$0 find station in galaxy: startsector=$1 class or type=$2o race=$3 flags=$4x refobj=$5x serial=$6 max.jumps=$7y num=$8z-->
<command id="1035" version="X2">Finds and returns up to $8z STATIONS that are a maximum {PROPERTY:jump distance} of $7y from the SECTOR $1.  {SEARCH_SYNTAX:STATIONS}

{HEADING:Optional Parameters}

{SEARCH_BY_TYPE_CLASS:STATIONS,2o}
{SEARCH_BY_RACE:STATIONS,3}
{SEARCH_BY_SERIAL:6}
{SEARCH_BY_FLAGS:STATIONS,4x}

{HEADING:Search Flags}

{FLAG_NEAREST:STATION,5x}
{FLAG_RANDOM:STATION}
{FLAG_VISIBLE:STATIONS,5x}
{FLAG_KNOWN:STATIONS}
{FLAG_EXACT_JUMPS:STATIONS,7y}
{FLAG_DOCKING_ALLOWED:STATIONS,5x}
{FLAG_FRIEND:STATIONS,5x}
{FLAG_ENEMY:STATIONS,5x}
{FLAG_NEUTRAL:STATIONS,5x}

{HEADING:Unsupported Search Flags}

{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_COMBINING:Enemy,Multiple}

{FLAGS_MULTIPLE_NEAREST}

{FLAGS_RELATION_REQUIREMENT:5x}

This command only searches SECTORS connected to $1 via JUMPGATES, it does not search the universe topographically and will therefore return NULL in most instances when used in a SECTOR with no JUMPGATES.

All {PROPERTY:jump distances} are zero-based.</command>


<!--%0 station send defend squad against ship %1-->
<command id="1015" version="X2">Commands the STATION $0 to launch {CLASS:Fighters} to attack the OBJ $1.</command>


<!--$1 $0 add big ship $2-->
<command id="1018" version="X2">Adds a SHIP $2 with OBJCLASS {CLASS:Big Ship} to the SHIPYARD $0 as a DOCKED vessel.</command>   <!--%1%0 add big ship %2-->


<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->


<!--VANILLA:  VARIATION   $0 find station: product $1 with best price depend on jumps:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--VANILLA:  VARIATION   $0 find factory: sells $1 with best chance:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<command id="1169" version="X3R">Finds and returns the FACTORY with the best combination of low {PROPERTY:ware price} and low {PROPERTY:jump distance} that is selling the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,3y}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_1:X3R}

{COMMAND_NAME_CHANGED:find station: product ... with best price depend on jumps}</command>		


<!--VANILLA:  VARIATION   $0 find station: resource $1 with best price depend on jumps: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--VANILLA:  VARIATION   $0 find factory: buys $1 with best chance: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<command id="1170" version="X3R">Finds and returns the FACTORY with the best combination of high {PROPERTY:ware price} and low {PROPERTY:jump distance} that is willing to buy the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,3y}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_1:X3R}

{COMMAND_NAME_CHANGED:find station: resource ... with best price depend on jumps}</command>		


<!--VANILLA:  VARIATION   $0 find station sells: resource $1 with best price depend on jumps: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--VANILLA:  VARIATION   $0 find dock: sells $1 with best chance: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<command id="1171" version="X3R">Finds and returns the DOCK with the best combination of low {PROPERTY:ware price} and low {PROPERTY:jump distance} that is selling the WARE $1.  {SEARCH_RANGE:DOCK,4z,5}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,2x}
{SEARCH_BY_QUANITY_SELL:DOCKS,3y}
{SEARCH_BY_TRADER:DOCKS,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_1:X3R}

{COMMAND_NAME_CHANGED:find station sells: resource ... with best price depend on jumps}</command>	


<!--VANILLA:  VARIATION   $0 find station: product $1 with best price random:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--VANILLA:  VARIATION   $0 find random factory: sells $1 with best price:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<command id="1176" version="X3R">Finds and returns a random FACTORY with the best combination of low {PROPERTY:ware price} and low {PROPERTY:jump distance} that is selling the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{UNDOCUMENTED}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,3y}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_1:X3R}

{COMMAND_NAME_CHANGED:find station: product ... with best price random}</command>		


<!--VANILLA:  VARIATION   $0 find station: resource $1 with best price random: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--VANILLA:  VARIATION   $0 find random factory: buys $1 with best price: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<command id="1177" version="X3R">Finds and returns a random FACTORY with the best combination of high {PROPERTY:ware price} and low {PROPERTY:jump distance} that is willing to buy the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{UNDOCUMENTED}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,3y}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_1:X3R}

{COMMAND_NAME_CHANGED:find station: resource ... with best price random}</command>		


<!--VANILLA:  VARIATION   $0 find station sells: resource $1 with best price random: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--VANILLA:  VARIATION   $0 find random dock: sells $1 with best price: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<command id="1178" version="X3R">Finds and returns a random DOCK with the best combination of low {PROPERTY:ware price} and low {PROPERTY:jump distance} that is selling the WARE $1.  {SEARCH_RANGE:DOCK,4z,5}

{SEARCH_SYNTAX:DOCK}

{UNDOCUMENTED}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,2x}
{SEARCH_BY_QUANITY_SELL:DOCKS,3y}
{SEARCH_BY_TRADER:DOCKS,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_1:X3R}

{COMMAND_NAME_CHANGED:find station sells: resource ... with best price random}</command>	



<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->


<!--VANILLA:  VARIATION:  $0 find station: product $1 with best price:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION:  $0 find factory: sells $1 with best price:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<command id="606" version="X3TC">Finds and returns the FACTORY selling the WARE $1 at the lowest price.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,3y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,7}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: product ... with best price}</command>	


<!--VANILLA:  VARIATION:  $1 $0 find station: product $2 with best price:  max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different factory: sells $2 with best price:  max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<command id="1002" version="X3TC">Finds and returns the FACTORY selling the WARE $2 at the lowest price, that isn`t the FACTORY $0.  {SEARCH_RANGE:FACTORY,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,3x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,4y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,8}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: product ... with best price}</command>	



<!--VANILLA:  VARIATION:  $0 find station: product $1 with min. jumps:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION:  $0 find factory: sells $1 with min. jumps:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<command id="607" version="X3TC">Finds and returns the nearest FACTORY selling the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,3y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,7}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: product ... with min. jumps}</command>	



<!--VANILLA:  VARIATION:  $1 $0 find station: product $2 with min. jumps:  max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different factory: sells $2 with min. jumps:  max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<command id="1003" version="X3TC">Finds and returns the nearest FACTORY selling the WARE $2, that isn`t the FACTORY $0.  {SEARCH_RANGE:FACTORY,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,3x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,4y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,8}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: product ... with min. jumps}</command>	



<!--VANILLA:  VARIATION:  $0 find station: resource $1 with best price: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION:  $0 find factory: buys $1 with best price: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<command id="608" version="X3TC">Finds and returns the FACTORY willing to buy the WARE $1 for the highest price.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,3y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,7}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: resource ... with best price}</command>	


<!--VANILLA:  VARIATION:  $1 $0 find station: resource $2 with best price: min.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different factory: buys $2 with best price: min.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<command id="1004" version="X3TC">Finds and returns the FACTORY willing to buy the WARE $2 for the highest price, that isn`t the FACTORY $0.  {SEARCH_RANGE:FACTORY,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,3x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,4y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,8}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: resource ... with best price}</command>	


<!--VANILLA:  VARIATION:  $0 find station: resource $1 with min. jumps: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION:  $0 find factory: buys $1 with min. jumps: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<command id="609" version="X3TC">Finds and returns the nearest FACTORY willing to buy the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,3y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,7}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: resource ... with min. jumps}</command>	


<!--VANILLA:  VARIATION:  $1 $0 find station: resource $2 with min. jumps: min.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different factory: buys $2 with min. jumps: min.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<command id="1005" version="X3TC">Finds and returns the nearest FACTORY willing to buy the WARE $2, that isn`t the FACTORY $0.  {SEARCH_RANGE:FACTORY,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,3x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,4y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,8}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: resource ... with min. jumps}</command>	


<!--VANILLA:  VARIATION:  $0 find station sells: resource $1 with best price: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION:  $0 find dock: sells: $1 with best price: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<command id="663" version="X3TC">Finds and returns the DOCK selling the WARE $1 at the lowest price.  {SEARCH_RANGE:DOCK,4z,5}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,2x}
{SEARCH_BY_QUANITY_SELL:DOCKS,3y}
{SEARCH_EXCLUDE_ARRAY:DOCKS,7}
{SEARCH_BY_TRADER:DOCKS,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station sells: resource ... with best price}</command>	


<!--VANILLA:  VARIATION:  $1 $0 find other station sells: resource $2 with best price: max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different dock: sells $2 with best price: max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<command id="1006" version="X3TC">Finds and returns the DOCK selling the WARE $2 at the lowest price, that isn`t the DOCK $0.  {SEARCH_RANGE:DOCK,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,3x}
{SEARCH_BY_QUANITY_SELL:DOCKS,4y}
{SEARCH_EXCLUDE_ARRAY:DOCKS,8}
{SEARCH_BY_TRADER:DOCKS,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station sells: resource ... with best price}</command>	


<!--VANILLA:  VARIATION:  $0 find station sells: resource $1 with min. jumps: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION:  $0 find dock: sells $1 with min. jumps: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<command id="664" version="X3TC">Finds and returns the nearest DOCK selling the WARE $1.  {SEARCH_RANGE:DOCK,4z,5}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,2x}
{SEARCH_BY_QUANITY_SELL:DOCKS,3y}
{SEARCH_EXCLUDE_ARRAY:DOCKS,7}
{SEARCH_BY_TRADER:DOCKS,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station sells: resource ... with min. jumps}</command>	


<!--VANILLA:  VARIATION:  $1 $0 find station sells: resource $2 with min. jumps: max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different dock: sells $2 with min. jumps: max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<command id="1007" version="X3TC">Finds and returns the nearest DOCK selling the WARE $2, that isn`t the DOCK $0.  {SEARCH_RANGE:DOCK,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,3x}
{SEARCH_BY_QUANITY_SELL:DOCKS,4y}
{SEARCH_EXCLUDE_ARRAY:DOCKS,8}
{SEARCH_BY_TRADER:DOCKS,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station sells: resource ... with min. jumps}</command>	


<!--VANILLA:  VARIATION   $0 find station: product $1 with best price depend on jumps:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION   $0 find factory: sells $1 with best chance:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<command id="1169" version="X3TC">Finds and returns the FACTORY with the best combination of low {PROPERTY:ware price} and low {PROPERTY:jump distance} that is selling the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,3y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,7}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: product ... with best price depend on jumps}</command>	


<!--VANILLA:  VARIATION   $0 find station: resource $1 with best price depend on jumps: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION   $0 find factory: buys $1 with best chance: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<command id="1170" version="X3TC">Finds and returns the FACTORY with the best combination of high {PROPERTY:ware price} and low {PROPERTY:jump distance} that is willing to buy the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,3y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,7}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: resource ... with best price depend on jumps}</command>	


<!--VANILLA:  VARIATION   $0 find station sells: resource $1 with best price depend on jumps: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION   $0 find dock: sells $1 with best chance: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<command id="1171" version="X3TC">Finds and returns the DOCK with the best combination of low {PROPERTY:ware price} and low {PROPERTY:jump distance} that is selling the WARE $1.  {SEARCH_RANGE:DOCK,4z,5}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,2x}
{SEARCH_BY_QUANITY_SELL:DOCKS,3y}
{SEARCH_EXCLUDE_ARRAY:DOCKS,7}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station sells: resource ... with best price depend on jumps}</command>	


<!--VANILLA:  VARIATION   $0 find station: product $1 with best price random:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION   $0 find random factory: sells $1 with best price:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<command id="1176" version="X3TC">Finds and returns a random FACTORY with the best combination of low {PROPERTY:ware price} and low {PROPERTY:jump distance} that is selling the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{UNDOCUMENTED}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,3y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,7}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: product ... with best price random}</command>	


<!--VANILLA:  VARIATION   $0 find station: resource $1 with best price random: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION   $0 find random factory: buys $1 with best price: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<command id="1177" version="X3TC">Finds and returns a random FACTORY with the best combination of high {PROPERTY:ware price} and low {PROPERTY:jump distance} that is willing to buy the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{UNDOCUMENTED}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,3y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,7}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: resource ... with best price random}</command>	


<!--VANILLA:  VARIATION   $0 find station sells: resource $1 with best price random: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION   $0 find random dock: sells $1 with best price: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<command id="1178" version="X3TC">Finds and returns a random DOCK with the best combination of low {PROPERTY:ware price} and low {PROPERTY:jump distance} that is selling the WARE $1.  {SEARCH_RANGE:DOCK,4z,5}

{SEARCH_SYNTAX:DOCK}

{UNDOCUMENTED}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,2x}
{SEARCH_BY_QUANITY_SELL:DOCKS,3y}
{SEARCH_EXCLUDE_ARRAY:DOCKS,7}
{SEARCH_BY_TRADER:DOCKS,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station sells: resource ... with best price random}</command>	



<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->




<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                   Strings                                    ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->
  
<!--$0 read text: page=$1x id=$2y-->
<command id="126" version="X2">Returns a STRING stored in a language strings file under page $1x with ID $2y.

{HEADING:Information}

{LOADTEXT_REQUIREMENT}

{RELATED_COMMAND:To load a custom language strings file,load text:,Strings}</command>


<!--$0 sprintf: fmt=$1, $2o, $3x, $4y, $5z, $6a-->
<command id="149" version="X2">Returns a new STRING created from a template STRING $1 and the parameters $2o, $3x, $4y, $5z, $6a.  If the template STRING $1 contains less than five parameter fields \(which are denoted by `%s`\) then unused parameters are ignored.

{HEADING:Information}

Unlike the C programming command of the same name, there are no other parameter field types.

{RELATED_COMMAND:To use a template STRING in a language strings file,sprintf pageid:,Strings}</command>


<!--$0 sprintf: pageid=$1x textid=$2y, $3o, $4x, $5y, $6z, $7a-->
<command id="150" version="X2">Returns a new STRING created from a template STRING stored in a language strings file and the parameters $3o, $4x, $5y, $6z, $7a.  The template STRING with ID $2y is loaded from page $1x.  If the template STRING $2y contains less than five parameter fields \(which are denoted by `%s`\) then unused parameters are ignored.

{HEADING:Information}

Unlike the C programming command of the same name, there are no other parameter field types.

{LOADTEXT_REQUIREMENT}

{RELATED_COMMAND:To use a hard-coded template STRING,sprintf fmt:,Strings}

{INLINE_RELATED_COMMAND:To load a custom language strings file,load text:,Strings}</command>


<!--load text: id=$0-->
<command id="151" version="X2">Loads the STRINGS within a user-generated language strings file with ID $0.  You must use this command before attempting to use any STRINGS from within the language strings file, otherwise the content of any loaded STRINGS will be a `read text` error message.

{HEADING:Information}

It is not necessary to load the official language files with IDs 000x that shipped with the game.
Only the four digit ID of the language strings file is required, not the entire filename. This allows the game to load the file appropriate to the user`s language, if available.  The language strings file must be placed in the `t` subfolder of the game folder hierarchy.

{RELATED_COMMAND_2:To use STRINGS from any language file,read text:,sprintf:,Strings}</command>



<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->


<!--$0 get length of string $1-->
<command id="1075" version="X3R">Returns the length of the STRING $1, in characters</command>


<!--$0 find position of pattern $2x in $1y-->
<command id="1076" version="X3R">Searches for the {PROPERTY:sub-string} $2x within the STRING $1y.  If the {PROPERTY:sub-string} is found then the command returns the character index at which the {PROPERTY:sub-string} begins, otherwise it returns -1.

{HEADING:Information}

All character indicies are zero based.</command>


<!--$0 get substring of $1 offset=$2x length=$3y-->
<command id="1077" version="X3R">Returns a new STRING containing a {PROPERTY:sub-string} from the STRING $1.  The {PROPERTY:sub-string} is extracted from character index $2x and is $3y characters in length.

{HEADING:Information}

All character indicies are zero based.</command>


<!--$0 string $1 to integer-->
<command id="1078" version="X3R">Returns the INTEGER version of a number stored in $1 as a STRING.

{HEADING:Information}

The conversion stops at the first non-numeric character.

{RELATED_COMMAND:To convert an INTEGER into a STRING,convert number to string,Strings}

{RELATED_SCRIPT_OBJECT_LIST:Data Types,Data Types}</command>


<!--$0 substitute in string $1x: pattern $2y with $3z-->
<command id="1079" version="X3R">Returns a new STRING created from an existing STRING $1x, with all the occurrences of the {PROPERTY:sub-string} $2y replaced with the {PROPERTY:sub-string} $3z.  If no occurrences of {PROPERTY:sub-string} $2y were found then the command returns -1.</command>


<!--$0 format seconds=$1 to Zura time string-->
<command id="1080" version="X3R">{UNDOCUMENTED}</command>   
  

<!--<command id="1080" version="X3R">%0 format seconds=%1 to Zura time string</command>-->
  

<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->


<!--$0 read text: page id=$1x, from $2y to $3z to array, include empty=$4a-->
<command id="1337" version="X3TC">Creates and returns an ARRAY containing a series of STRINGS read from a language strings file.  The ARRAY contains the STRINGS under page $1x with ID $2y, $3z and all those in between.  If $4a is TRUE then empty STRINGS are also returned, whereas if $4a is FALSE then these STRINGS are ignored.

{HEADING:Information}

{LOADTEXT_REQUIREMENT}

{RELATED_COMMAND:To load a custom language strings file,load text:,Strings}</command>

  
<!--$0 read text: page id=$1, id=$2 exists-->
<command id="1338" version="X3TC">Determines whether a STRING in a language strings file is present.  Returns TRUE if the STRING exists and has been loaded using the {COMMAND:load text:} command, otherwise it returns FALSE.  This command will also return FALSE if the STRING contains formatting errors or is unavailable in the user`s current language.

{RELATED_COMMAND:To load a custom language strings file,load text:,Strings}</command>


<!--$0 convert number $1 to string-->
<command id="1474" version="X3TC">Returns a new STRING containing the STRING representation of the INTEGER $1.

{RELATED_COMMAND:To convert a STRING containing numbers into an INTEGER,string to integer,Strings}</command>


<!--$0 format time: $1-->
<command id="1477" version="X3TC">Returns a new STRING containing an amount of seconds $1, formatted into a `time elapsed` STRING, as shown below.

{HEADING:Format}

The format of a time elapsed STRING is:    \[d\] hh:mm:ss

d = days \(This is only displayed when required\)
h = hours
m = minutes
s = seconds

{HEADING:Information}

This can be used to display the length of time elapsed since an action took place. eg. the player started a quest, or opened a new factory.

{RELATED_COMMAND_2:To determine how long the user has been playing,playing time,last load time,System Property}</command>


<!--$0 match regular expression: $1x to string $2y-->
<command id="1478" version="X3TC">Returns TRUE if the STRING $2y matches the regular expression in the STRING $1x, otherwise it returns FALSE.  See the following section for a list of regular expression operators that are supported by this command.

{HEADING:Regular Expression Formatting}

? - Any single character
b+ - One of more of the character `b`
b* - Zero or more of the character `b`
bear|panda - The word `bear` or the word `panda`

{HEADING:Example}

250* - Matches 25, 250, 2500, 25000 etc. but not 26 or 24.
2?0+ - Matches 210, 220, 230, 240, ..., 2100, 2200, 2300, but not 21, 22, 23, etc.</command>


<!--$0 get text id: ware=$1-->
<command id="1497" version="X3TC">Returns the STRING ID of the language strings file entry that contains the name of the WARE $1.

{HEADING:Information}

The STRING ID of the description of any WARE is always the STRING ID of the name plus one.</command>


<!--$0 get string font length: $1-->
<command id="1524" version="X3TC">Returns the width in {UNITS:pixels} of the STRING $1 when it is displayed on screen.

{HEADING:Information}

This command is useful for creating custom menus

{RELATED_COMMAND_LIST:custom menu,User Interface}</command>



<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->





<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                              System Properties                               ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->

<!--$0 system date is month=$1x, day=$2y-->
<command id="140" version="X2">Returns TRUE if the system date is on or later than day $2y of the month $1x.

{HEADING:Information}

The day $2y should be an INTEGER between 0 and 30.
The month $1x should be an INTEGER between 0 and 11.</command>


<!--write to log file $0x append=$1y value=$2-->
<command id="404" version="X2">Outputs a value $2 to the {TYPE:logfile} with ID $0x.

If $1y is TRUE, contents of the {TYPE:logfile} are appended, otherwise they are replaced.

{HEADING:Information}

The {TYPE:logfile} is created in the game folder and named `log&lt;id&gt;.txt`.</command>


<!--write to log file $0x append=$1y printf: fmt=$2, $3o, $4x, $5y, $6z, $7a-->
<command id="405" version="X2">Outputs a STRING generated from a template $2 to the {TYPE:logfile} with ID $0x.

The template can contain up to 5 parameter fields, denoted by `%s`, which are relaced by the arguments $3o, $4x, $5y, $6z and $7a.

If $1y is TRUE, contents of the {TYPE:logfile} are appended, otherwise they are replaced.

{HEADING:Information}

The {TYPE:logfile} is created in the game folder and named `log&lt;id&gt;.txt`.</command>


<!--write to log file $0o append=$1x printf: pageid=$2y textid=$3z, $4o, $5x, $6y, $7z, $8a-->
<command id="406" version="X2">Outputs a STRING generated from a template, stored in a language strings file, to the {TYPE:logfile} with ID $0x.

The template STRING with ID $3z is loaded from page $2y.

The template can contain up to 5 parameter fields, denoted by `%s`, which are relaced by the arguments $4o, $5x, $6y, $7z and $8a.

If $1y is TRUE, contents of the {TYPE:logfile} are appended, otherwise they are replaced.

{HEADING:Information}

The {TYPE:logfile} is created in the game folder and named `log&lt;id&gt;.txt`.</command>




<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->



<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->



<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->




<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                              Universe Data                                   ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->
  
<!--$1 $0 find nearest enemy ship: max.dist=$2-->
<command id="503" version="X2">Returns the {PROPERTY:enemy} SHIP closest to the object $0 that is within $2 {UNITS:meters}.  If there are none within this range it returns NULL.</command>	


<!--$1 $0 find nearest enemy station: max.dist=$2-->
<command id="504" version="X2">Returns the {PROPERTY:enemy} STATION closest to the object $0 that is within $2 {UNITS:meters}.  If there are none within this range it returns NULL.</command>	


<!--$0 get jumps from sector $1x to sector $2y-->
<command id="711" version="X2">Returns the {PROPERTY:jump distance} between SECTOR $1x and SECTOR $2y.

{HEADING:Information}

All {PROPERTY:jump distances} are zero-based.</command>	


<!--$0 get next sector on route from sector $1x to sector $2y-->
<command id="712" version="X2">Returns the first SECTOR a SHIP is required to pass through in order to travel from SECTOR $1x to the SECTOR $2y via the shortest route available.

If SECTOR $1x and SECTOR $2y are the same, the command returns NULL.

{ROUTE_CALCULATIONS}</command>		


<!--$0 get distance between $1x and $2y-->
<command id="738" version="X2">Returns the distance in {UNITS:meters} between the object $1x and $2y.

{HEADING:Information}

Both objects must be in the same SECTOR.</command>	


<!--$0 create ship: type=$1 owner=$2 addto=$3 x=$4x y=$5y z=$6z-->
<command id="739" version="X2">Creates and returns a new SHIP of OBJTYPE $1 OWNEDBY the RACE $2 in the SECTOR, SHIP or STATION $3.  If this command fails then it returns NULL.

{HEADING:Information}

You cannot add SHIPS of the OBJCLASS {CLASS:Big Ship} and {CLASS:Huge Ship} to STATIONS in this way.  If $3 is a SHIP or STATION, the co-ordinates are ignored.

{COORDINATES:SHIP,4x,5y,6z}
{RELATED_COMMAND:To add those OBJCLASSES of SHIP to a STATION,add big ship,Station Action}</command>	

<!--$0 create station: type=$1 owner=$2 addto=$3 x=$4x y=$5y z=$6z-->
<command id="747" version="X2">Creates and returns a new STATION of OBJTYPE $1 OWNEDBY the RACE $2 in the SECTOR $3.  If this command fails then it returns NULL.

{HEADING:Information}

{TYPE:Stations} are created without any {PROPERTY:products} or {PROPERTY:resources}, you must add these separately.

{COORDINATES:JUMPGATE,3xª,4yª,5zª}

{RELATED_COMMAND_2:To add or remove a PRODUCT from a STATION,add product to factory or dock,remove product from factory or dock,Station Trading}

{INLINE_RELATED_COMMAND_2:To add or remove a PRIMARYRESOURCE from a FACTORY,add primary resource to factory,remove primary resource from factory,Station Trading}

{INLINE_RELATED_COMMAND_2:To add or remove a SECONDARYRESOURCE from a FACTORY,add second resource to factory,remove second resource from factory,Station Trading}</command>	

  
<!--$0 create gate: type=$1a addto=$2 gateid=$6xº dstsecx=$7x dstsecy=$8y dstgateid=$9yº x=$3xª y=$4yª z=$5zª-->
<command id="748" version="X2">Creates and returns a new JUMPGATE of SUBTYPE $1a in the SECTOR $2 and with a {PROPERTY:jump gate ID} of $6xº.  If this command fails then it returns NULL.

{HEADING:Jump Gate Connections}

The destination SECTOR with \(x, y\) co-ordinates \($7x, $8y\) must contain a JUMPGATE with a {PROPERTY:jump gate ID} of $9yº.  Although the SUBTYPE defines in which direction the JUMPGATE appears to be facing, it is the {PROPERTY:jump gate ID} that actually determines the destination.  {TYPE:Jump gates} within the same SECTOR must have unique {PROPERTY:jump gate IDs}.

{COORDINATES:JUMPGATE,3xª,4yª,5zª}
{SEE_XEDITOR:JUMPGATES}</command>		

  
<!--$0 create asteroid: type=$1x addto=$2 resource=$3y yield=$4z x=$5xª y=$6yª z=$7zª-->
<command id="749" version="X2">Creates and returns a new ASTEROID of SUBTYPE $1x in the SECTOR $2 with an {PROPERTY:mineral yield} of $4z and a {PROPERTY:mineral type} of $3y.  If this command fails then it returns NULL.

{ABOUT_MINERAL_TYPES}
{COORDINATES:ASTEROID,5xª,6yª,7zª}
{SEE_HANDBOOK_AND_XEDITOR:ASTEROIDS}{CORRECTION:Jack08}</command>	

  
<!--$0 create nebula: type=$1ª addto=$2 x=$3¹ y=$4² z=$5³-->
<command id="753" version="X2">Creates and returns a new NEBULA of SUBTYPE $1ª in the SECTOR $2.  If this command fails then it returns NULL.

{COORDINATES:NEBULA,3x,4y,5z}
{SEE_HANDBOOK_AND_XEDITOR:NEBULAE}</command>	

  
<!--$0 create sun: subtype=$8a r=$1x g=$2y b=$3z addto=$4 x=$5xª y=$6yª z=$7zª-->
<command id="754" version="X2">Creates and returns a new SUN of SUBTYPE $8ª in the SECTOR $4.  If this command fails then it returns NULL.

{HEADING:Sector Illumination}

The position of the SUN does not affect the amount of illumination in the SECTOR and can be positioned according to taste.  The colour of illumination is defined using three INTEGERS between 0 and 255 for the red, green and blue components, specified in the following order:
[center]red=$1x, green=$2y, blue=$3z.[/center]
{COORDINATES:SUN,5xª,6yª,7zª}
{HEADING:Game Crashes}Using the SUN with SUBTYPE 23 may cause the game to crash.

{SEE_HANDBOOK_AND_XEDITOR:SUNS}</command>		

  
<!--$0 create planet: subtype=$1a addto=$2 x=$3x y=$4y z=$5z-->
<command id="755" version="X2">Creates and returns a new PLANET of SUBTYPE $1ª in the SECTOR $2.  If this command fails then it returns NULL.

{COORDINATES:PLANET,3x,4y,5z}
{SEE_HANDBOOK_AND_XEDITOR:PLANETS}</command>	

  
<!--$0 create special: type=$1a addto=$2 x=$3x y=$4y z=$5z-->
<command id="756" version="X2">Creates and returns a new SPECIAL of SUBTYPE $1ª in the SECTOR $2.  If this command fails then it returns NULL.

{HEADING:Plot Objects}

{TYPE:Special objects} are unique items mainly used within the plot, such as unique JUMPGATES or SHIP {TYPE:debris}.

{COORDINATES:SPECIAL,3x,4y,5z}
{SEE_HANDBOOK_AND_XEDITOR:SPECIALS}</command>	



<!--$0 find ship: sector=$1 class or type=$2o race=$3 flags=$4x refobj=$5x maxdist=$6y maxnum=$7z refpos=$8-->
<command id="757" version="X2">Finds and returns the SHIPS within the SECTOR $1.  {SEARCH_SYNTAX:SHIPS}

{HEADING:Optional Parameters}

{SEARCH_BY_TYPE_CLASS:SHIPS,2o}
{SEARCH_BY_RACE:SHIPS,3}
{SEARCH_BY_DISTANCE_2:SHIPS,6y,5x,8}
{SEARCH_BY_FLAGS:SHIPS,4x}

{HEADING:Search Flags}

{FLAG_NEAREST_2:SHIP,5x,8}
{FLAG_RANDOM:SHIP}
{FLAG_VISIBLE:SHIPS,5x}
{FLAG_KNOWN:SHIPS}
{FLAG_RACE_LOGIC}
{FLAG_INCLUDE_DOCKED}
{FLAG_WING_ONLY}
{FLAG_MULTIPLE:7z,SHIPS}
{FLAG_FRIEND:SHIPS,5x}
{FLAG_ENEMY:SHIPS,5x}
{FLAG_NEUTRAL:SHIPS,5x}

{HEADING:Unsupported Search Flags}

{FLAG_NO_EXACTJUMPS:1}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_COMBINING:Enemy,Multiple}

{FLAGS_MULTIPLE_NEAREST}

{FLAGS_RELATION_REQUIREMENT:5x}

{FLAGS_REFERENCE_REQUIREMENT:5x,8}</command>


<!--$0 find asteroid: sector=$1 resourcetype=$2xª min.yield=$3yª flags=$4a refobj=$5 maxdist=$6x maxnum=$7y refpos=$8-->
<command id="758" version="X2">Finds and returns the ASTEROIDS within the SECTOR $1.  {SEARCH_SYNTAX:ASTEROIDS}

{HEADING:Optional Parameters}

Only return ASTEROIDS with a {PROPERTY:mineral type} of $2xª
Only return ASTEROIDS with a {PROPERTY:mineral yield} of $3yª or more
{SEARCH_BY_DISTANCE_2:ASTEROIDS,6x,5,8}
{SEARCH_BY_FLAGS:ASTEROIDS,4a}

{HEADING:Search Flags}

{FLAG_NEAREST_2:ASTEROID,5,8}
{FLAG_RANDOM:ASTEROID}
{FLAG_VISIBLE:ASTEROIDS,5}
{FLAG_KNOWN:ASTEROIDS}
{FLAG_MULTIPLE:7y,ASTEROIDS}

{HEADING:Unsupported Search Flags}

{FLAG_NO_EXACTJUMPS:1}
{FLAG_NO_RELATIONS:ASTEROIDS}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{ABOUT_MINERAL_TYPES}
{FLAGS_COMBINING:Known,Multiple}

{FLAGS_MULTIPLE_NEAREST}

{FLAGS_REFERENCE_REQUIREMENT:5,8}{CORRECTION:Jack08}</command>


<!--$0 find flying ware: sector=$1 maintype=$2xª subtype=$3yª flags=$4x refobj=$5 maxdist=$6y maxnum=$7z refpos=$8-->
<command id="766" version="X2">Finds and returns up to $7z FLYINGWARES within the SECTOR $1.  {SEARCH_SYNTAX:FLYINGWARES}

{HEADING:Optional Parameters}

{SEARCH_BY_TYPE_CLASS:FLYINGWARES,2o}
{SEARCH_BY_MAINTYPE_SUBTYPE:FLYINGWARES,$2xª,$3yª}
{SEARCH_BY_DISTANCE_2:FLYINGWARES,6y,5,8}
{SEARCH_BY_FLAGS:FLYINGWARES,4x}

{HEADING:Search Flags}

{FLAG_NEAREST:FLYINGWARE,5}
{FLAG_RANDOM:FLYINGWARE}
{FLAG_VISIBLE:FLYINGWARES,5}
{FLAG_KNOWN:FLYINGWARES}
{CONSTANT:\[Find.IllegalWare\]} - Return FLYINGWARES containing WARES {PROPERTY:illegal} in the sector $1

{HEADING:Unsupported Search Flags}

{FLAG_NO_EXACTJUMPS:1}
{FLAG_NO_RELATIONS:FLYINGWARES}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_COMBINING:Nearest,Visible}

{FLAGS_MULTIPLE_NEAREST}</command>		


<!--$0 create sector object: maintype=$1x subtype=$2y-->
<command id="772" version="X2">Creates a new SECTOROBJECT with a MAINTYPE $1x, a SUBTYPE $2y.  This command returns the {TERMINOLOGY:Sector Object ID} if successful, and NULL otherwise.

{HEADING:Information}

Egosoft expressly advise against using SECTOROBJECTS directly as they may corrupt your save games.  Use the {COMMAND:create ...} and {COMMAND:destruct} commands instead.

{RELATED_COMMAND:To initialise a SECTOROBJECT for use,initialise sector object,Object Action}

{INLINE_RELATED_COMMAND_2:To destroy a SECTOROBJECT and then unload it from the game,kill sector object,free sector object,Object Action}</command>		

  
<!--$0 create flying ware: maintype=$1x subtype=$2y count=$3ª sector=$4 x=$5xª y=$6yª z=$7zª selfdestruct=$8o-->
<command id="776" version="X2">Creates a FLYINGWARE with a MAINTYPE $1x, a SUBTYPE $2y and a {PROPERTY:quantity} $3ª in the SECTOR $4.

If $8o is FALSE then the FLYINGWARE will exist forever, if $8o is TRUE then it will be destroyed after a random period between 15 and 45 minutes.  If this command fails then it returns NULL.

{COORDINATES:FLYINGWARE,5xª,6yª,7zª}</command>		

  
<!--%1%0 get position as array-->
<command id="795" version="X2">Returns a new array containing {PROPERTY:position} of the object $0. in {UNITS:meters} between the object $0.

{HEADING:Information}

The ARRAY contains three INTEGER co-ordinates in the order: x, y, z.</command>		


<!--$1 $0 get distance to: x=$2x y=$3y z=$4z-->
<command id="796" version="X2">Returns the distance in {UNITS:meters} between the object $0 and the {PROPERTY:position} with co-ordinates \(x, y, z\).</command>		


<!--%1%0 get distance to: position array=%2-->  
<command id="797" version="X2">Returns the distance in {UNITS:meters} between the object $0 and the {PROPERTY:position} stored within the ARRAY $2.

{HEADING:Information}

The ARRAY must contain three INTEGER co-ordinates in the order: x, y, z.</command>		

  
<!--$0 get distance: position array1=$1x  array2=$2y-->
<command id="798" version="X2">Returns the distance in {UNITS:meters} between the {PROPERTY:position} stored within the ARRAY $1x and the {PROPERTY:position} stored within the ARRAY $2y.

{HEADING:Information}

Both ARRAYS must contain three INTEGER co-ordinates in the order: x, y, z.</command>		

  
<!--$0 get sector from universe index: x=$1x, y=$2y-->
<command id="800" version="X2">Returns the SECTOR with x co-ordinate $1x and y co-ordinate $2y.

{HEADING:Information}

All SECTOR co-ordinates are zero-based.

{RELATED_COMMAND_2:To retrieve the co-ordinates of a SECTOR,get universe x index,get universe y index,Universe Data}</command>

  
<!--$0 get max sectors in x direction-->
<command id="801" version="X2">Returns the maximum number of SECTORS in the horizontal direction of the game universe.

{HEADING:Information}

The number of SECTORS is one-based.

{RELATED_COMMAND:To retrieve the SECTOR from it`s co-ordinates,get sector from universe index,Universe Data}</command>

  
<!--$0 get max sectors in y direction-->
<command id="802" version="X2">Returns the maximum number of SECTORS in the vertical direction of the game universe.

{HEADING:Information}

The number of SECTORS is one-based.

{RELATED_COMMAND:To retrieve the SECTOR from it`s co-ordinates,get sector from universe index,Universe Data}</command>

  
<!--$1 $0 is sector known by the player-->
<command id="803" version="X2">Return TRUE if the SECTOR $0 has been discovered by the player, otherwise it returns FALSE.</command>

  
<!--$1 $0 get universe x index-->
<command id="804" version="X2">Returns the x co-ordinate of the SECTOR $0.

{HEADING:Information}

All SECTOR co-ordinates are zero-based.

{RELATED_COMMAND:To retrieve the SECTOR from it`s co-ordinates,get sector from universe index,Universe Data}</command>

  
<!--$1 $0 get universe y index-->
<command id="805" version="X2">Returns the y co-ordinate of the SECTOR $0.

{HEADING:Information}

All SECTOR co-ordinates are zero-based.

{RELATED_COMMAND:To retrieve the SECTOR from it`s co-ordinates,get sector from universe index,Universe Data}</command>


<!--$1 $0 get north warp gate-->
<command id="806" version="X2">Returns the northern JUMPGATE in the SECTOR $0.  If there is no northern JUMPGATE it returns NULL.

{RELATED_COMMAND:To retrieve the JUMPGATE for any direction with a single command,get warp gate: gate id,Universe Data}</command>


<!--$1 $0 get south warp gate-->
<command id="807" version="X2">Returns the southern JUMPGATE in the SECTOR $0.  If there is no southern JUMPGATE it returns NULL.

{RELATED_COMMAND:To retrieve the JUMPGATE for any direction with a single command,get warp gate: gate id,Universe Data}</command>


<!--$1 $0 get east warp gate-->
<command id="808" version="X2">Returns the eastern JUMPGATE in the SECTOR $0.  If there is no eastern JUMPGATE it returns NULL.

{RELATED_COMMAND:To retrieve the JUMPGATE for any direction with a single command,get warp gate: gate id,Universe Data}</command>

  
<!--$1 $0 get west warp gate-->
<command id="809" version="X2">Returns the western JUMPGATE in the SECTOR $0.  If there is no western JUMPGATE it returns NULL.

{RELATED_COMMAND:To retrieve the JUMPGATE for any direction with a single command,get warp gate: gate id,Universe Data}</command>


<!--$0 find a random sector: startsector=$1, jumps=$2, owner=$3-->
<command id="810" version="X2">Returns a randomly chosen SECTOR belonging to the RACE $3 that is a maximum {PROPERTY:jump distance} of $2 from the SECTOR $1.

To retrieve a SECTOR from any RACE, set $3 to NULL.

{HEADING:Information}

All {PROPERTY:jump distances} are zero-based.</command>


<!--$1 $0 get warp gate: gate id=$2-->
<command id="811" version="X2">Returns the JUMPGATE in the SECTOR $0 with a {PROPERTY:jump gate ID} of $2.  If there is no JUMPGATE with that {PROPERTY:jump gate ID} it returns NULL.

{ABOUT_JUMPGATE_ID}</command>


<!--$1 $0 get ship array from sector/ship/station-->
<command id="1008" version="X2">Returns a new ARRAY containing all SHIPS within the SECTOR, {CLASS:Carrier} or STATION $0.</command>   


<!--%1%0 get station array from sector-->	
<command id="1009" version="X2">Returns a new ARRAY containing all STATIONS in the SECTOR $0.</command>		


<!--$1 $0 get factory array from sector-->
<command id="1010" version="X2">Returns a new ARRAY containing all FACTORIES in the SECTOR $0.

{HEADING:Information}

This command will find any object with an OBJCLASS of {CLASS:Factory}, which includes FACTORIES and SHIPYARDS.</command>		


<!--%1%0 get dock array from sector-->	
<command id="1011" version="X2">Returns a new ARRAY containing all DOCKS in the SECTOR $0.</command>		


<!--%1%0 get player owned ship array from sector-->
<command id="1012" version="X2">Returns a new ARRAY containing all SHIPS OWNEDBY the player in the SECTOR $0.</command>		


<!--%1%0 get player owned station array from sector-->
<command id="1013" version="X2">Returns a new ARRAY containing all STATIONS OWNEDBY the player in the SECTOR $0.</command>		


<!--%1%0 get asteroid array from sector-->
<command id="1014" version="X2">Returns a new ARRAY containing all {TYPE:asteroids} in the SECTOR $0.</command>	


<!--$1 $0 find ship: class or type=$2o race=$3 flags=$4x refobj=$5x maxnum=$6y with homebase=$7y-->
<command id="1033" version="X2">Finds and returns the SHIPS within the SECTOR $1 that have the HOMEBASE $7y.  {SEARCH_SYNTAX:SHIPS}

{HEADING:Optional Parameters}

{SEARCH_BY_TYPE_CLASS:SHIPS,2o}
{SEARCH_BY_RACE:SHIPS,3}
{SEARCH_BY_FLAGS:SHIPS,4x}

{HEADING:Search Flags}

{FLAG_NEAREST:SHIP,5x}
{FLAG_RANDOM:SHIP}
{FLAG_VISIBLE:SHIPS,5x}
{FLAG_KNOWN:SHIPS}
{FLAG_RACE_LOGIC}
{FLAG_INCLUDE_DOCKED}
{FLAG_WING_ONLY}
{FLAG_MULTIPLE:7z,SHIPS}
{FLAG_FRIEND:SHIPS,5x}
{FLAG_ENEMY:SHIPS,5x}
{FLAG_NEUTRAL:SHIPS,5x}

{HEADING:Unsupported Search Flags}

{FLAG_NO_EXACTJUMPS:1}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_COMBINING:Enemy,Multiple}

{FLAGS_MULTIPLE_NEAREST}

{FLAGS_RELATION_REQUIREMENT:5x}</command>		



<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->


<!--$0 create debris: type=$1x addto=$2 resource=$3y yield=$4z x=$5xª y=$6yª z=$7zª-->
<command id="799" version="X3R">Creates and returns new DEBRIS of SUBTYPE $1x in the SECTOR $2 containing the WARE $3y with a {PROPERTY:ware quantity} of $4z.  If this command fails then it returns NULL.

{COORDINATES:DEBRIS,5xª,6yª,7zª}</command>		


<!--%1%0 get gate destination: return sector=%2-->
<command id="1057" version="X3R">Returns the destination SECTOR or destination JUMPGATE associated with the JUMPGATE $0.

If $2 is TRUE the command returns the destination SECTOR, if $2 is FALSE the command returns the destination JUMPGATE.</command>		

  
<!--%1%0 get gate id-->
<command id="1058" version="X3R">Returns the {PROPERTY:jump gate ID} of the JUMPGATE $0.

{ABOUT_JUMPGATE_ID}</command>		

  
<!--$0 get next gate on route from $1x to $2y-->
<command id="1074" version="X3R">Returns the first JUMPGATE a SHIP is required to pass through in order to travel from SECTOR $1x to the SECTOR $2y via the shortest route available.

If SECTOR $1x and SECTOR $2y are the same, the command returns NULL.

{ROUTE_CALCULATIONS}</command>		

  
<!--%1%0 get owned ships: class/type=%2-->
<command id="1067" version="X3R">Returns a new ARRAY containing all the SHIPS with the OBJCLASS or OBJTYPE $2 which are OWNEDBY the SHIP, STATION or RACE $0.

{HEADING:Information}

If $0 is a RACE then all SHIPS OWNEDBY that RACE are returned.
If $0 is a SHIP or STATION then all SHIPS with a {PROPERTY:home base} of $0 are returned.
If $2 is NULL then SHIPS of any OBJCLASS and any OBJTYPE are returned.</command>      

  
<!--%1 get ship array: of race %0 class/type=%2-->
<command id="1068" version="X3R">Returns a new ARRAY containing all the SHIPS with the OBJCLASS or OBJTYPE $2 which are OWNEDBY the RACE $0.  If $2 is NULL then SHIPS of any OBJCLASS and any OBJTYPE are returned.

{RELATED_COMMAND:To retrieve all the SHIPS MANUFACTUREDBY a RACE,get ship type array: maker race,Universe Data}</command>		

  
<!--%1 get station array: of race %0 class/type=%2-->
<command id="1069" version="X3R">Returns a new ARRAY containing all the STATIONS with the OBJCLASS or OBJTYPE $2 which are OWNEDBY the RACE $0.  If $2 is NULL then STATIONS of any OBJCLASS and any OBJTYPE are returned.</command>		


<!--$0 find nebula: sector=$1 type=$2x effect=$3y flags=$4z refobj=$5 maxdist=$6xª maxnum=$7yª refpos=$8-->
<command id="1143" version="X3R">Finds and returns the NEBULAE within the SECTOR $1.  {SEARCH_SYNTAX:NEBULA}

{HEADING:Optional Parameters}

Only return NEBULA with a SUBTYPE $2x
Only return NEBULA with a {PROPERTY:nebula effect} of $3y
{SEARCH_BY_DISTANCE_2:NEBULAE,6xª,5,8}
{SEARCH_BY_FLAGS:NEBULAE,4z}

{HEADING:Search Flags}

{FLAG_NEAREST_2:NEBULA,5,8}
{FLAG_RANDOM:NEBULA}
{FLAG_VISIBLE:NEBULAE,5}
{FLAG_KNOWN:NEBULAE}
{FLAG_MULTIPLE:7yª,NEBULAE}

{HEADING:Unsupported Search Flags}

{FLAG_NO_EXACTJUMPS:1}
{FLAG_NO_RELATIONS:NEBULAE}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_COMBINING:Random,Visible}

{FLAGS_MULTIPLE_NEAREST}

{FLAGS_REFERENCE_REQUIREMENT:5,8}</command>


<!--$0 find a random sector: startsector=$1, jumps=$2x, owner=$3, security level=$4y-->
<command id="1206" version="X3R">Returns a randomly chosen SECTOR belonging to the RACE $3 that is a maximum {PROPERTY:jump distance} of $2x from the SECTOR $1. 

The following {PROPERTY:security levels} are supported:
[center]{VARIABLE:2} - {PROPERTY:core sectors}\t{VARIABLE:1} - {PROPERTY:border sectors}\tNULL - Any SECTOR[/center]
To retrieve a SECTOR from any RACE, set $3 to NULL.

{ABOUT_SECTOR_SECURITY}

{HEADING:Information}

All {PROPERTY:jump distances} are zero-based.</command>


<!--$0 find debris: sector=$1 resource=$2 min yield=$3x flags=$4a refobj=$5 num=$6y maxdist=$7z refpos=$8-->
<command id="1212" version="X3R">Finds and returns the DEBRIS within the SECTOR $1.  {SEARCH_SYNTAX:DEBRIS}

{HEADING:Optional Parameters}

Only return DEBRIS containing the WARE $2
Only return DEBRIS with a {PROPERTY:mineral yield} of $3x or more
{SEARCH_BY_DISTANCE_2:DEBRIS,7z,5,8}
{SEARCH_BY_FLAGS:DEBRIS,4a}

{HEADING:Search Flags}

{FLAG_NEAREST_2:DEBRIS,5,8}
{FLAG_RANDOM:DEBRIS}
{FLAG_VISIBLE:DEBRIS,5}
{FLAG_KNOWN:DEBRIS}
{FLAG_MULTIPLE:6y,DEBRIS}

{HEADING:Unsupported Search Flags}

{FLAG_NO_EXACTJUMPS:1}
{FLAG_NO_RELATIONS:DEBRIS}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_COMBINING:Random,Visible}

{FLAGS_MULTIPLE_NEAREST}

{FLAGS_REFERENCE_REQUIREMENT:5,8}</command>		


<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->


<!--%1%0 is core sector-->
<command id="1331" version="X3TC">Returns TRUE if the SECTOR $0 is a {PROPERTY:core sector}, and FALSE if $0 is a {PROPERTY:border sector} or an {PROPERTY:unknown sector}.

{ABOUT_SECTOR_SECURITY}</command>  


<!--$0 find gate: flags=$1x, refobj=$2, max dist=$3y, refpos=$4-->
<command id="1336" version="X3TC">Finds and returns JUMPGATES within the SECTOR containing the OBJ $2 or the {PROPERTY:position} $4.  {SEARCH_SYNTAX:JUMPGATES}

{HEADING:Optional Parameters}

{SEARCH_BY_FLAGS:JUMPGATES,1x}

{HEADING:Search Flags}

{FLAG_NEAREST_2:JUMPGATE,2,4}
{FLAG_RANDOM:JUMPGATE}
{FLAG_VISIBLE:JUMPGATES,2}
{FLAG_KNOWN:JUMPGATES}
{CONSTANT:\[Find.Expand\]} - Search adjacent SECTORS until a JUMPGATE is found
{FLAG_MULTIPLE_UNLIMITED:JUMPGATES}
{CONSTANT:\[Find.JumpableGate\]} - Do not return {OBJECT:Transorbital Accelerators}

{HEADING:Unsupported Search Flags}

{CONSTANT:\[Find.ExactJumps\]} - This command only searches the SECTOR containing the OBJ $2 or the {PROPERTY:position} $4
{FLAG_NO_RELATIONS:JUMPGATES}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_DEPENDENCY:Expand,Nearest}

{FLAGS_COMBINING:Random,Visible}

{FLAGS_MULTIPLE_NEAREST}

{FLAGS_REFERENCE_REQUIREMENT:2,4}</command>	


<!--%0get ship type array: maker race=%1 class=%2-->
<command id="1372" version="X3TC">Returns a new ARRAY containing all the SHIPS with the OBJCLASS $2 which are MANUFACTUREDBY the RACE $0.  If $2 is NULL then SHIPS of any OBJCLASS are returned.

{RELATED_COMMAND:To retrieve all the SHIPS OWNEDBY a RACE,get ship array: of race,Universe Data}</command>		


<!--$1 $0 realign gate: gatenum=$2 gate to link=$3 force=$4-->
<command id="1453" version="X3TC">{UNDOCUMENTED}

{HEADING:Best Guess}

Sets the destination of the JUMPGATE with {PROPERTY:jump gate ID} $2 in the SECTOR $0 to the JUMPGATE $3.  Setting $4 to TRUE must force the connection to be created in a circumstance where it was ordinarily fail, perhaps if the SECTORS are not adjacent?</command>		


<!--%0change destination gate to %1-->
<command id="1458" version="X3TC">Sets the destination of the JUMPGATE $0 to the JUMPGATE $1.</command>		


<!--%0get station array: product=%1 include empty=%2-->
<command id="1459" version="X3TC">Returns a new ARRAY containing all the FACTORIES that sell the WARE $1.

{HEADING:Information}

If $2 is FALSE then only FACTORIES that have the WARE in {PROPERTY:stock} are returned, if $2 is TRUE then all FACTORIES that sell the WARE $1 are returned.

This command does not work on DOCKS.</command>		


<!--%0get station array: resource=%1 include empty=%2-->
<command id="1460" version="X3TC">Returns a new ARRAY containing all the STATIONS that trade the WARE $1 as a {PROPERTY:primary resource} or {PROPERTY:secondary resource}.

{HEADING:Information}

If $2 is FALSE then only STATIONS that have the WARE in {PROPERTY:stock} are returned, if $2 is TRUE then all STATIONS that sell the WARE $1 are returned.

The WARES traded by DOCKS are classed as resources, so this command can be used on DOCKS and FACTORIES, unlike {COMMAND:get station array: product} which only works on FACTORIES.</command>		


<!--$0 set sector to core security $1-->
<command id="1461" version="X3TC">Changes the SECTOR $0 to a {PROPERTY:core sector} if $1 is TRUE, or to a {PROPERTY:border sector} if $1 is FALSE.

{ABOUT_SECTOR_SECURITY}

{RELATED_COMMAND:To determine the SECURITY of a SECTOR,is core sector,Universe Data}</command>		


<!--$1 $0 find nearest military outpost-->
<command id="1505" version="X3TC">Returns the closest {OBJECT:Military Outpost} to the object $0 that is OWNEDBY the RACE of $0.

{HEADING:Information}

If $0 is {PROPERTY:player owned} this command will always return NULL.</command>


<!--%1%0 get planet array-->
<command id="1485" version="X3TC">Returns a new ARRAY containing all the {TYPE:planets} within the SECTOR $0.

{HEADING:Information}

This includes all moons and smaller {TYPE:planets}.</command>		


<!--%1%0 get all stationary objects: include asteroids=%2-->
<command id="1504" version="X3TC">Returns a new ARRAY containing all the {TYPE:mines}, {TYPE:satellites} and {TYPE:orbital lasers} in the SECTOR $0.  If $2 is TRUE then {TYPE:asteroids} are also returned, whereas if $2 is FALSE then they are not.</command>		


<!--$1 $0 get buyable wares in sector. Include player factories: $2x Include shipyards: $3y Include docks: $4z-->
<command id="1521" version="X3TC">Returns a new ARRAY containing all the WARES for sale within the SECTOR $0.  You can choose to include or exclude WARES from SHIPYARDS, DOCKS and {PROPERTY:player owned} FACTORIES.

{HEADING:Information}

If $2x is TRUE then WARES sold by {PROPERTY:player owned} FACTORIES are included in the ARRAY.
If $3y is TRUE then SHIPS sold by SHIPYARDS are included in the ARRAY.
If $4z is TRUE then WARES sold by DOCKS are included in the ARRAY.</command>		


<!--$1 $0 find all sectors within $2x jumps: Only known sectors=$3y-->
<command id="1334" version="X3TC">Returns a new ARRAY of all SECTORS with a maximum {PROPERTY:jump distance} of $2x from the OBJ $0.

If $3y is TRUE then only SECTORS {PROPERTY:known} to the player are returned.

{HEADING:Information}

All {PROPERTY:jump distances} are zero-based.</command>


<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->


<!--%1%0 is sector visible-->
<command id="1567" version="X3AP">Returns TRUE when the player is in SECTOR $0 and FALSE otherwise.  It may also return FALSE if the player is within SECTOR $0 but DOCKED at a STATION.

{UNDOCUMENTED}</command>		

  
<!--%1%0 get player object count in sector: class=%2-->
<command id="1577" version="X3AP">Returns a new ARRAY containing the {PROPERTY:player owned} objects with OBJCLASS $2 in the SECTOR $0.

If $2 is NULL then the ARRAY contains objects of any OBJCLASS.

{UNDOCUMENTED}</command>		

  
<!--$0 get cluster sectors for race $1, startsector: $2, threshold: $3, only include known: $4-->
<command id="1585" version="X3AP">Returns a new ARRAY containing the SECTORS of RACE $1 that are contiguous with the SECTOR $2.  If $4 is TRUE then only {PROPERTY:known sectors} that the player has discovered are included in the ARRAY.

The INTEGER $3 probably specifies to what extent nearby SECTORS are included.

{UNDOCUMENTED}</command>		


<!--$0 find gate: flags=$1x, refobj=$2, max dist=$3y, refpos=$4 object check=$5-->
<command id="1586" version="X3AP">Finds and returns JUMPGATES within the SECTOR containing the OBJ $2 or the {PROPERTY:position} $4 that can be used by the {PROPERTY:owner of} the SHIP $5.  {SEARCH_SYNTAX:JUMPGATES}

{HEADING:Optional Parameters}

{SEARCH_BY_FLAGS:JUMPGATES,1x}

{HEADING:Search Flags}

{FLAG_NEAREST_2:JUMPGATE,2,4}
{FLAG_RANDOM:JUMPGATE}
{FLAG_VISIBLE:JUMPGATES,2}
{FLAG_KNOWN:JUMPGATES}
{CONSTANT:\[Find.Expand\]} - Search adjacent SECTORS until a JUMPGATE is found
{FLAG_MULTIPLE_UNLIMITED:JUMPGATES}
{CONSTANT:\[Find.JumpableGate\]} - Do not return {OBJECT:Transorbital Accelerators}
{CONSTANT:\[Find.JumpBeacons\]} - Return {OBJECT:Jump Beacons} and JUMPGATES

{HEADING:Unsupported Search Flags}

{CONSTANT:\[Find.ExactJumps\]} - This command only searches the SECTOR containing the OBJ $2 or the {PROPERTY:position} $4
{FLAG_NO_RELATIONS:JUMPGATES}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_DEPENDENCY:Expand,Nearest}

{FLAGS_COMBINING:Random,Visible}

{FLAGS_MULTIPLE_NEAREST}

{FLAGS_REFERENCE_REQUIREMENT:2,4}</command>		


<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                             Universe Properties                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->

<!--%1%0 get current galaxy flight timestep in ms-->
<command id="564" version="X2">Returns the length of time between updates of the game data within the SECTOR containing the OBJ $0, in {UNITS:milliseconds}.

{HEADING:Information}

For OOS \(out-of-sector\) OBJS this is typically 30 seconds, for OBJS within the SECTOR containing the player this is typically 5 seconds.</command>


<!--%1%0 get notoriety to race %2-->
<command id="725" version="X2">Returns the raw NOTORIETY value between the {PROPERTY:owner race} of the OBJ $0 and the RACE $2.

{ABOUT_NOTORIETY}</command>


<!--%0get notoriety from race %1 to race %2-->
<command id="726" version="X2">Returns the raw NOTORIETY value between the RACE $1 and the RACE $2.

{ABOUT_NOTORIETY}</command>


<!-- $0 add notoriety: race=$1 value=$2 -->
<command id="792" version="X2">Increments the raw value of the NOTORIETY between the RACE $0 and the RACE $1 by $2 points.

{ABOUT_NOTORIETY}

{HEADING:Information}

This command does not function correctly in X2.</command>


<!--%0is plot %1 state flag %2-->
<command id="1034" version="X2">Returns TRUE if the {X2} plot is currently in the {PROPERTY:state} $2.

{SEE_HANDBOOK:plot states}</command>


<!--%0get Khaak aggression level-->
<command id="1044" version="X2">Returns the current {PROPERTY:aggression level} of Kha`ak, as a {UNITS:percentage}.

{HEADING:Information}

The Kha`ak {PROPERTY:aggression level} determines the number and size of {OBJECT:Kh`aak Clusters} that spawn randomly in the game.

The default value is 15%.</command>


<!--set Khaak aggression level to %0-->
<command id="1045" version="X2">Sets the current {PROPERTY:aggression level} of Kha`ak to the {UNITS:percentage} $0.

{HEADING:Information}

The Kha`ak {PROPERTY:aggression level} determines the number and size of {OBJECT:Kh`aak Clusters} that spawn randomly in the game.

The default value is 15%.</command>




<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->


<!-- %0set relations from notoriety: include player as target and race -> teladi as owner=%1 -->
<command id="1200" version="X3R">Updates the {PROPERTY:relation} between the OBJ $0 and the player according to the current NOTORIETY between them.

{ABOUT_NOTORIETY}</command>



<!--Vanilla:  set notoriety of %0 -> %1 to %2 points-->
<!--X-Studio: set notoriety between $0 and $1 to $2 points-->
<command id="1207" version="X3R">Sets the raw value of the NOTORIETY between the RACE $0 and the RACE $1 to $2 points.

Note: This command does not function correctly in X2.

{ABOUT_NOTORIETY}

{COMMAND_NAME_CHANGED:set notoriety of .. -&gt; .. to .. points}</command>


<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->


<!-- $0 get notoriety required to buy ware: $1 -->
<command id="1456" version="X3TC">Returns the raw NOTORIETY value required to buy the WARE $1.

{ABOUT_NOTORIETY}</command>


<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->





<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                              User Interface                                  ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->

<!--play sample %0-->
<command id="200" version="X2">Plays the sound effect with ID $0.

{RELATED_MEDIA:sound effects}</command>


<!--play sample: incoming transmission %0, from object %1-->
<command id="201" version="X2">Plays the speech clips with ID $0.

This command is very limited in functionality, see {COMMAND:speak text:} for a more effective way of playing speech clips.

{HEADING:Supported Speech Clips}

{CONSTANT:\[IncomingTransmission.Greeting\]} - `We are being hailed`
{CONSTANT:\[IncomingTransmission.Message\]} - `Incoming message`
{CONSTANT:\[IncomingTransmission.Scanned\]} - `We are scanned`
{CONSTANT:\[IncomingTransmission.SOS\]} - `Emergency message from xyz`</command>


<!--%0 send audio message %1 to player-->
<command id="202" version="X2">Displays a video and plays a speech clip that appears to originating from the OBJ $0.

This command can be used to display any voiced message from the `Race Variation` speech clips.

{HEADING:Constants}

{CONSTANT:\[Comm.DLG_C_START_FIGHTING\]} - Ship about to attack
{CONSTANT:\[Comm.DLG_POL_ILLEGAL_GOODS\]} - Illegal goods detected
{CONSTANT:\[Comm.DLG_POL_LAST_WARNING\]} - Final warning
{CONSTANT:\[Comm.DLG_POL_LEGAL_GOODS\]} - No illegal goods detected</command>


<!--send incoming message %0 to player: display it=%1-->
<command id="203" version="X2">Adds the STRING $0 to the player`s message log.

If $1 is TRUE the message is displayed in a popup window, if FALSE the player is simply notified.</command>


<!--write to player logbook %0-->
<command id="400" version="X2">Writes any value $0 to the player logbook.  If $0 is an OBJ, the name displayed to the user is written to the logbook.

{HEADING:Information}

See the help file for a list of formatting available to logbook messages.</command>


<!--%0 write to logbook %1-->
<command id="401" version="X2">{NOT_IMPLEMENTED}

Use {COMMAND:write to player logbook} instead.</command>


<!--write to player logbook: printf: fmt=$0, $1o, $2x, $3y, $4z, $5a-->
<command id="402" version="X2">Writes a STRING to the player logbook, generated from a template STRING $0 and the parameters $1o, $2x, $3y, $4z, $5a.  If the template STRING $0 contains less than five parameter fields \(which are denoted by `%s`\) then unused parameters are ignored.

{HEADING:Information}

Unlike the C programming command of the same name, there are no other parameter field types.
See the help file for a list of formatting available to logbook messages.</command>


<!--write to player logbook: printf: pageid=$0x textid=$1y, $2o, $3x, $4y, $5z, $6a-->
<command id="403" version="X2">Writes a STRING to the player logbook, generated from a template STRING stored in a {TERMINOLOGY:Language Strings File} and the parameters $2o, $3x, $4y, $5z, $6a.  The template STRING with ID $1y is loaded from page $0x.  If the template STRING contains less than five parameter fields \(which are denoted by `%s`\) then unused parameters are ignored.

{HEADING:Information}

Unlike the C programming command of the same name, there are no other parameter field types.
You can use the language file editor to customise the formatting of logbook messages.

{LOADTEXT_REQUIREMENT}

{RELATED_COMMAND:To use a hard-coded template STRING,write to player logbook: printf:,User Interface}</command>


<!--$0 speak text: page=$1x id=$2y priority=$3z-->
<command id="1042" version="X2">Plays the speech clip associated with the STRING with ID $2y within page $1x, and displays the STRING as a subtitle.

If {KEYWORD:START} is used, the command returns immediately and the speech clip is played asynchronously.

{HEADING:Information}

Only one speech clip can be played at a time, those with a higher priority $3z take precedence over those with a lower priority.

{RELATED_COMMAND:To play several speech clips in succession,speak array:,User Interface}</command>



<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->


<!-- send incoming question %0 to player: callback=%1 -->
<command id="212" version="X3R">Displays the question STRING $0 to the player in a popup window, and calls the script $1 with the user`s choosen answer.

The script $1 should contain a STRING argument which will contain the ID of the button pressed.</command>
  
<!-- send incoming question %0 to player: callback=%1 flags=%2 -->
<command id="213" version="X3R">Adds the question STRING $0 to the player`s message log, and calls the script $1 when the user chooses an answer.

If $2 is TRUE the message is displayed in a popup window, if FALSE the player is simply notified.

The script $1 should contain a STRING argument which will contain the ID of the button pressed.</command>



<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->


<!-- %0speak array: %1 prio=%2 -->
<command id="1510" version="X3TC">Plays a sequence of speech clips defined by an array, and displays the STRINGS as subtitles. Each speech clip is defined by a page and string ID contained in consecutive elements of the ARRAY.

If {KEYWORD:START} is used, the command returns immediately and the speech clips are played asynchronously.

{HEADING:Information}

Only one set of speech clips can be played at a time, those with a higher priority $2 take precedence over those with a lower priority.

{RELATED_COMMAND:To generate the array to describe an object,get object name array,Array}</command>
  


<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->




<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                               Ware Properties                                ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->

<!--%0get volume of ware %1-->
<command id="604" version="X2">Returns the {PROPERTY:unit volume} of the WARE $1.</command>


<!--%0get transport class of ware %1-->
<command id="605" version="X2">Returns the {TYPE:transport class} of the WARE $1.</command>


<!--%0get average price of ware %1-->
<command id="629" version="X2">Returns the {PROPERTY:average price} of the WARE $1.

The {PROPERTY:average price} if the average of the {PROPERTY:minimum price} and {PROPERTY:maximum price}.</command>


<!--%0get max price of ware %1-->
<command id="630" version="X2">Returns the {PROPERTY:maximum price} of the WARE $1.</command>


<!--%0get min price of ware %1-->
<command id="631" version="X2">Returns the {PROPERTY:minimum price} of the WARE $1.</command>


<!--%0get max price of ware %1 as secondary resource-->
<command id="632" version="X2">Returns the {PROPERTY:maximum price} of the WARE $1 when bought as a {PROPERTY:secondary resource} of a STATION.</command>


<!--%0get min price of ware %1 as secondary resource-->
<command id="633" version="X2">Returns the {PROPERTY:minimum price} of the WARE $1 when bought as a {PROPERTY:secondary resource} of a STATION.</command>


<!--%0 is ware %1 illegal in %2 sectors-->
<command id="653" version="X2">Returns TRUE if the WARE $1 is {PROPERTY:illegal} within the SECTORS OWNEDBY the RACE $2, and FALSE otherwise.</command>


<!--%0 get maintype of ware %1-->
<command id="655" version="X2">Returns the MAINTYPE of the WARE $1.</command>


<!--%0 get subtype of ware %1-->
<command id="656" version="X2">Returns the SUBTYPE of the WARE $1.</command>


<!--$0 get ware from maintype $1x and subtype $2y-->
<command id="657" version="X2">Returns the WARE with the MAINTYPE $1x and SUBTYPE $2y, if any, otherwise this command returns NULL.

{RELATED_SCRIPT_OBJECT_LIST:MAINTYPES,Constants}</command>


<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->



<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->


<!-- %0is equipment: ware=%1 -->
<command id="1479" version="X3TC">Returns TRUE if the WARE $1 is a {PROPERTY:component} such as {OBJECT:Duplex Scanner} or {OBJECT:5MW Shield} and FALSE otherwise.</command>


<!-- %0is upgrade: ware=%1 -->
<command id="1480" version="X3TC">Returns TRUE if the WARE $1 is an {PROPERTY:upgrade} such as {OBJECT:Engine Tunings} or {OBJECT:Police License} and FALSE otherwise.</command>


<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->






<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                               Weapon Properties                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->


<!--%0 get range of missile type %1-->
<command id="557" version="X2">Returns the {PROPERTY:firing range} of the MISSILE WARE $1, in {UNITS:meters}.</command>


<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->



<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->



<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->





<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                            Undocumented Commands                             ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<!--************************-->
<!--**   X2 The Threat    **-->
<!--************************-->







<!--************************-->
<!--**    X3 Reunion      **-->
<!--************************-->


<!--VANILLA: add merchant %0 base=%1 wanted wares=%2 owned wares=%3 cash=%4 rank=%5-->
<!--XSTUDIO: $1 add merchant name=$0 wanted wares=$2x owned wares=$3y cash=$4x rank=$5y-->
<command id="1110" version="X3R">ADD NEW STOCK REGARDING CHANGED SYNTAX.   http://forum.egosoft.com/viewtopic.php?t=287999  Adds merchant to a station. </command>


<!--<command id="571" version="X3R">%1%0 can missile %2 be installed</command>

<command id="1021" version="X3R">%0 set race logic control enabled to %1</command>

<command id="1030" version="X3R">%0 set owner race to %1</command>
<command id="1031" version="X3R">%0get script version</command>
<command id="1032" version="X3R">%0get script name</command>

<command id="1034" version="X3R">%0is plot %1 state flag %2</command>

<command id="1036" version="X3R">%1%0 get ID code</command>


<command id="1041" version="X3R">%1%0 get tradeable ware array from station</command>

<command id="1043" version="X3R">%0 set serial name of station to %1</command>

<command id="1052" version="X3R">%1%0 get production cycle time: account for secondary resources=%2</command>
<command id="1053" version="X3R">%1%0 get remaining production cycle time</command>
<command id="1054" version="X3R">%1%0 get number of products per cycle</command>
<command id="1055" version="X3R">%1%0 get number of resources per cycle for ware %2</command>
<command id="1056" version="X3R">%1%0 get production status: as percentage=%2</command>
<command id="1057" version="X3R">%1%0 get gate destination: return sector=%2</command>

<command id="1065" version="X3R">%1%0 get formation</command>
<command id="1066" version="X3R">%1%0 serialise object</command>
<command id="1067" version="X3R">%1%0 get owned ships: class/type=%2</command>
<command id="1068" version="X3R">%1 get ship array: of race %0 class/type=%2</command>

<command id="1071" version="X3R">%1%0 get tradeable ware array from ship</command>
<command id="1072" version="X3R">%1%0 is script %2 on stack of task=%3</command>
<command id="1073" version="X3R">%1%0 is task %2 in use</command>

<command id="1100" version="X3R">%0 register hotkey %1 to call script %2</command>
<command id="1101" version="X3R">unregister hotkey %0</command>

<command id="1201" version="X3R">%0is a new script version available</command>
<command id="1202" version="X3R">%1%0 get job id</command>

<command id="1217" version="X3R">add blueprints to player HQ: type=%0</command>
<command id="1218" version="X3R">%0player HQ has blueprints for: type=%1</command>
<command id="1219" version="X3R">remove blueprints from player HQ: type=%0</command>
<command id="1220" version="X3R">%0last load time</command>
<command id="1221" version="X3R">%0ignore collisions: %1</command>

<command id="1300" version="X3R">%0get missile flags of %1</command>
<command id="1320" version="X3R">%0player has police license for race %1</command>-->

<!--        

<command id="570" version="X3R">%1%0 move to position continue: x=%2 y=%3 z=%4 with precision %5 m</command>

<command id="1019" version="X3R">VARATION    %1%0 has a free ship dock port: ship subtype = %2</command>

<command id="1050" version="X3R">%0 = fixed sin %1</command>
<command id="1051" version="X3R">%0 = fixed cos %1</command>

<command id="1084" version="X3R">register quest script %0 instance multiple=%1</command>
<command id="1085" version="X3R">set quest state with message: quest=%0 state=%1 msg=%2</command>
<command id="1086" version="X3R">set quest/event %0 timer to %1ms</command>
<command id="1087" version="X3R">set quest %0 timeout to %1</command>
<command id="1088" version="X3R">%0 add event listener: quest/event=%1 objevent=%2 script=%3</command>
<command id="1089" version="X3R">%0 remove event listener: quest/event=%1</command>
<command id="1090" version="X3R">%0 display news article: page=%1 newsid=%2 occurrences=%3 maxoffertime=%4 maxtime=%5 placeholder:race1=%6 race2=%7 customarray=%8</command>
<command id="1091" version="X3R">change event news availibility: %0 race=%1 sector=%2 jumps=%3</command>
<command id="1094" version="X3R">%1%0 get current action</command>
<command id="1096" version="X3R">%0 disable ship rebuild</command>
<command id="1097" version="X3R">%1%0 turret %2 can use laser %3 </command>
<command id="1098" version="X3R">%0 set pirate cover state to %1</command>
<command id="1099" version="X3R">%1%0 scan potential pirate %2 for illegal wares</command>

<command id="1111" version="X3R">%1%0get merchants</command>
<command id="1112" version="X3R">remove merchant %0</command>
<command id="1113" version="X3R">merchant %0 got ware %1: quantity=%2</command>
<command id="1114" version="X3R">merchant %0 sold ware %1: quantity=%2</command>
<command id="1115" version="X3R">reset merchant %0 expiry</command>
<command id="1116" version="X3R">%0 get data for merchant %1: item number=%2 </command>
<command id="1120" version="X3R">%0 get random NPC</command>

<command id="1022" version="X3R">%1%0 can execute StartAction</command>
<command id="1023" version="X3R">%0 set StartAction enabled to %1</command>

<command id="1026" version="X3R">%0 set as player wingman: %1</command>
<command id="1027" version="X3R">%1%0 is player wingman</command>

<command id="1050" version="X3R">%0 = fixed sin %1</command>
<command id="1051" version="X3R">%0 = fixed cos %1</command>


<command id="1179" version="X3R">%1%0 get asteroid yield</command>
<command id="1180" version="X3R">$1 $0 get job leader</command>
<command id="1181" version="X3R">%1%0 get job idle rate</command>
<command id="1182" version="X3R">%1%0 get flight time</command>
<command id="1183" version="X3R">%1%0 get job jump range</command>
<command id="1184" version="X3R">%0start job</command>
<command id="1185" version="X3R">START %0 command %1 : arg1=%2, arg2=%3, arg3=%4, arg4=%5</command>
<command id="1186" version="X3R">%0connect wing command/signal %1 to script %2 with prio %3</command>
<command id="1187" version="X3R">%1%0 get true owner</command>
<command id="1188" version="X3R">%1%0 wait idle rate minimum:%2 ms</command>
<command id="1189" version="X3R">%1%0 fire laser of turret %2 ahead</command>
<command id="1190" version="X3R">%1%0 turn turret %2 to pos %3 relativ:%4 timeout:%5</command>
<command id="1191" version="X3R">%0reset flight time</command>
<command id="1192" version="X3R">%0auto sync patrol sector with environment: %1</command>
<command id="1193" version="X3R">%0add to patrol group for sector: %1</command>
<command id="1194" version="X3R">%0remove from patrol group for sector: %1</command>
<command id="1195" version="X3R">%0remove all patrol group references</command>

<command id="1208" version="X3R">%1%0 get intermediates buyable</command>
<command id="1209" version="X3R">%0set intermediates buyable to %1</command>
<command id="1210" version="X3R">%1%0 get intermediates sellable</command>
<command id="1211" version="X3R">%0set intermediates sellable to %1</command>


<command id="1215" version="X3R">%0send incoming message: text=%1 temporary=%2</command>
<command id="1216" version="X3R">%1%0 move to debris/asteroid %2 and turn turret %3 to target: timeout=%4</command>

<command id="1230" version="X3R">%0open custom menu: title=%1 description=%2 option array=%3</command>
<command id="1231" version="X3R">%1%0 create passenger in ship: name=%2 race=%3 voice=%4 face=%5</command>
<command id="1232" version="X3R">%1%0 add passenger to ship %2</command>
<command id="1233" version="X3R">VARIATION   %1%0 remove passenger %2</command>
<command id="1234" version="X3R">%1%0 get passenger array</command>

<command id="1235" version="X3R">VARIATION   %1%0 enslave passenger %2</command>
<command id="1236" version="X3R">VARIATION   %0create passenger: name=%1 race=%2 voice=%3 face=%4</command>
<command id="1237" version="X3R">VARIATION   %0release passenger</command>
<command id="1238" version="X3R">VARIATION   %1%0 create passenger from pilot: remove pilot from ship=%2</command>


<command id="1250" version="X3R">%1%0 get repair cost of ship %2</command>
-->

<!--************************-->
<!--** X3 Terran Conflict **-->
<!--************************-->


<!--

<command id="1233" version="X3TC">VARIATION   %1%0 move passenger to ship %2: set passenger as pilot=%3</command>
<command id="1235" version="X3TC">VARIATION   %1%0 enslave passenger</command>
<command id="1236" version="X3TC">VARIATION   %1%0 eject passenger</command>
<command id="1237" version="X3TC">VARIATION   %1%0 destroy passenger</command>
<command id="1238" version="X3TC">VARIATION   %1%0 add pilot of ship %2 as passenger: disable ship=%3</command>

<command id="1327" version="X3TC">%1%0 fire missile %4 from turret %2 on %3</command>
<command id="1328" version="X3TC">%1%0 find nearest enemy ship in range: class=%2</command>
<command id="1329" version="X3TC">%1%0 get user input: type=%2, title=%3</command>
<command id="1330" version="X3TC">%1%0 select best lasers for target %2 in turret %3: scan for friends %4</command>

<command id="1335" version="X3TC">%0move player to ship %1: Teleport=%2</command>
<command id="1339" version="X3TC">%0add secondary signal: signal=%1, script=%2, prio=%3, name=%4</command>
<command id="1340" version="X3TC">%0remove secondary signal: signal=%1, name=%2</command>



<command id="1348" version="X3TC">%0create a new flight wing: name=%1 race=%2</command>

<command id="1351" version="X3TC">%0add to flight wing: wing=%1</command>
<command id="1352" version="X3TC">%1%0 get ware storage percentage: ware=%2</command>

<command id="1354" version="X3TC">disband flight wing: wing=%0</command>
<command id="1355" version="X3TC">%0find flight wing: name=%1 race=%2</command>
<command id="1356" version="X3TC">%0get flight wing ship array: wing=%1</command>
<command id="1357" version="X3TC">%0remove from flight wing</command>
<command id="1358" version="X3TC">remove ship from flight wing: wing=%0 ship=%1</command>
<command id="1359" version="X3TC">add ship to flight wing: wing=%0 ship=%1</command>
<command id="1360" version="X3TC">%0get flight wing array</command>
<command id="1361" version="X3TC">%0get predefined wing: wing=%1</command>
<command id="1362" version="X3TC">%1%0 is autojump activated</command>
<command id="1363" version="X3TC">%0set autojump active: %1</command>
<command id="1364" version="X3TC">%1%0 get autojump minimum jumps</command>
<command id="1365" version="X3TC">%0autojump minimum jumps= %1</command>
<command id="1366" version="X3TC">%1%0 is emergency jump activated</command>
<command id="1367" version="X3TC">%0set emergency jump active: %1</command>
<command id="1368" version="X3TC">%1%0 get emergency jump minimum shield threshold</command>
<command id="1369" version="X3TC">%0autojump emergency jump shield threshold= %1\%</command>

<command id="1371" version="X3TC">%0add default wares to station/dock</command>
<command id="1373" version="X3TC">%1%0 get missile resupply: missile=%2</command>
<command id="1374" version="X3TC">%0set missile resupply: missile=%1 amount=%2</command>
<command id="1376" version="X3TC">%1%0 get jumpdrive fuel resupply</command>
<command id="1377" version="X3TC">%1%0 get ammo resupply: ammo=%2</command>
<command id="1378" version="X3TC">%0set jumpdrive fuel resupply: amount=%1</command>
<command id="1379" version="X3TC">%0set ammo resupply: ammo=%1 amount=%2</command>
<command id="1380" version="X3TC">set script command upgrade: wing command=%0 upgrade=%1</command>
<command id="1381" version="X3TC">set script command upgrade: wing command=%0 upgrade=%1 script=%2</command>
<command id="1382" version="X3TC">global script map for wings: key=%0 race=%1 script=%2 prio=%3</command>
<command id="1383" version="X3TC">%0set wing command: %1</command>
<command id="1384" version="X3TC">%0set wing command: %1  target=%2 target2=%3</command>
<command id="1385" version="X3TC">%1%0 get flight wing</command>
<command id="1386" version="X3TC">%1%0 get wing natural formation</command>
<command id="1387" version="X3TC">%0set max trade jumps: %1</command>
<command id="1388" version="X3TC">%0get default launch time difference for missile type: %1</command>
<command id="1389" version="X3TC">%0set wing natural formation: formation=%1</command>
<command id="1390" version="X3TC">%1%0 is temporarily removed from wing</command>
<command id="1391" version="X3TC">%0temporarily remove from wing</command>
<command id="1392" version="X3TC">%0return to wing</command>
<command id="1393" version="X3TC">%0add wing additional ship command: id=%1 script=%2 pageid=%3 textid=%4</command>
<command id="1394" version="X3TC">%0remove wing additional ship command: id=%1</command>
<command id="1395" version="X3TC">%1%0 does wing additional ship command exists: id=%2</command>
<command id="1396" version="X3TC">%0get wing command upgrade: command=%1</command>
<command id="1397" version="X3TC">%1%0 ship has wing command upgrade: command=%2</command>
<command id="1398" version="X3TC">%0add wing additional ship command: id=%1 script=%2 pageid=%3 textid=%4 checkscript=%5</command>
<command id="1399" version="X3TC">%1%0 get ship array for wing command upgrade: command=%2</command>
<command id="1400" version="X3TC">%0get bullet speed of laser %1</command>
<command id="1401" version="X3TC">add wing custom command: id=%0</command>
<command id="1402" version="X3TC">remove wing custom command: id=%0</command>
<command id="1403" version="X3TC">%0wing custom command exists: id=%1</command>
<command id="1404" version="X3TC">START %0 wing command %1 : arg1=%2, arg2=%3, arg3=%4, arg4=%5</command>
<command id="1405" version="X3TC">%1%0 is in same wing as %2</command>
<command id="1407" version="X3TC">global secondary signal map: add signal=%0 race=%1 class=%2 script=%3 prio=%4 name=%5</command>
<command id="1408" version="X3TC">global secondary signal map: remove signal=%0 race=%1 class=%2 name=%3</command>
<command id="1409" version="X3TC">%1%0 get wing formation leaders</command>
<command id="1410" version="X3TC">%0set passenger transport, destination=%1, payment=%2</command>
<command id="1411" version="X3TC">%1%0 is passenger to be transported</command>
<command id="1412" version="X3TC">%1%0 get passenger transport destiantion</command>
<command id="1413" version="X3TC">%1%0 get passenger transport payment</command>
<command id="1414" version="X3TC">%1%0 get all local variable keys, starting with=%2</command>
<command id="1416" version="X3TC">%0create custom menu array: heading=%1</command>
<command id="1418" version="X3TC">display subtitle text: text=%0 duration=%1 ms</command>
<command id="1425" version="X3TC">%1%0 call named script: script=%2, %3, %4, %5, %6, %7</command>
<command id="1426" version="X3TC">%0start named script: task=%1 scriptname=%2 prio=%3, %4, %5, %6, %7, %8</command>
<command id="1429" version="X3TC">%1%0 can transport passenger: %2</command>
<command id="1435" version="X3TC">%1%0 get temporarily removed ship array from wing</command>
<command id="1436" version="X3TC">%0get all global variable keys, starting with=%1</command>


<command id="1444" version="X3TC">%0create custom menu array, info lines=%1, %2, %3, %4, %5</command>
<command id="1445" version="X3TC">%0create custom menu array</command>
<command id="1446" version="X3TC">add custom menu info line to array %0: text=%1</command>
<command id="1447" version="X3TC">add custom menu item to array %0: text=%1 returnvalue=%2</command>
<command id="1448" version="X3TC">add custom menu heading to array %0: title=%1</command>
<command id="1450" version="X3TC">%1%0 get local variables: regular expression=%2</command>
<command id="1451" version="X3TC">%0get global variables: regular expression=%1</command>
<command id="1452" version="X3TC">%1%0 get compatible laser array: turret=%2</command>
<command id="1454" version="X3TC">%1%0 can buy ware %2 at station %3</command>
<command id="1455" version="X3TC">%1%0 can buy ware %2 from race %3</command>

<command id="1462" version="X3TC">%1%0 get next available task: starting=%2</command>
<command id="1463" version="X3TC">add ship custom command: id=%0</command>
<command id="1464" version="X3TC">remove ship custom command: id=%0</command>
<command id="1465" version="X3TC">%0ship custom command exists: id=%1</command>
<command id="1466" version="X3TC">set ship command preload script: command=%0 script=%1</command>
<command id="1467" version="X3TC">set wing command preload script: wing command=%0 script=%1</command>

<command id="1481" version="X3TC">%1%0 launch boarding pod at target: victim=%2 marines=%3</command>

<command id="1483" version="X3TC">%1%0 can turret %2 fire missiles</command>

<command id="1487" version="X3TC">set discovered status: type=%0 status=%1</command>
<command id="1488" version="X3TC">%0has %1 been discovered</command>
<command id="1489" version="X3TC">%0open custom info menu: title=%1 description=%2 option array=%3 maxoptions=%4</command>
<command id="1490" version="X3TC">capture screen</command>
<command id="1491" version="X3TC">set monitor mode and viewpoint: monitor=%0 cockpit=%1 mode=%2 alpha=%3 beta=%4 gamma=%5 range=%6</command>

<command id="1499" version="X3TC">%1%0 get compatible missile array</command>
<command id="1500" version="X3TC">%1%0 get resupply fuel required</command>
<command id="1502" version="X3TC">%1%0 get all formation followers</command>
<command id="1503" version="X3TC">%1%0 get highest formation leader</command>
<command id="1506" version="X3TC">%0is inventory: ware=%1</command>
<command id="1507" version="X3TC">%1%0 get boarding shield threshold</command>
<command id="1508" version="X3TC">%1%0 get maximum laser range: turret=%2</command>
<command id="1509" version="X3TC">%1%0 get minimum laser range: turret=%2</command>

<command id="1511" version="X3TC">%0register hotkey %1 to call script name %2</command>
<command id="1517" version="X3TC">%1%0 get number of wing formation leaders</command>
<command id="1518" version="X3TC">%1%0 get max number of ships per wing formation</command>

<command id="1520" version="X3TC">%1%0 get compatible missile array from cargobay</command>
<command id="1522" version="X3TC">add section to custom menu: %0</command>
<command id="1523" version="X3TC">%0create text for custom menu, left=%1, right=%2</command>

<command id="1527" version="X3TC">add value selection to menu: %0, text=%1, value array=%2, default=%3, return id=%4</command>
<command id="1529" version="X3TC">%0get subtype integer of data [ %1 ]</command>
<command id="1530" version="X3TC">%1%0 get user input without sector: type=%2, title=%3</command>
<command id="1531" version="X3TC">add encyclopedia custom article: News, id=%0, title page=%1, title id=%2, text page=%3, text id=%4, timeout=%5</command>
<command id="1532" version="X3TC">add encyclopedia custom article: Information, id=%0, title page=%1, title id=%2, text page=%3, text id=%4, timeout=%5</command>
<command id="1533" version="X3TC">add encyclopedia custom article: History, id=%0, title page=%1, title id=%2, text page=%3, text id=%4, timeout=%5</command>
<command id="1534" version="X3TC">add encyclopedia custom article: Stories, id=%0, title page=%1, title id=%2, text page=%3, text id=%4, timeout=%5</command>
<command id="1535" version="X3TC">remove encyclopedia custom article: id=%0</command>
<command id="1536" version="X3TC">set encyclopedia custom article sectors: id=%0, sector array=%1</command>
<command id="1537" version="X3TC">%1%0 get user input type=%2, title=%3, sector=%4</command>
<command id="1538" version="X3TC">%0get OOS shield damage of laser %1</command>
<command id="1539" version="X3TC">%0get OOS hull damage of laser %1</command> -->

<!--************************-->
<!--** X3 Albion Prelude  **-->
<!--************************-->



<!--
<command id="1540" version="X3AP">%0get billions of credits in player account</command>
<command id="1541" version="X3AP">%0get amount of credits under a billion in player account</command>
<command id="1542" version="X3AP">%0get full amount of credits in player account formatted as string: include separators %1, use millions suffix for very large numbers %2</command>
<command id="1543" version="X3AP">show graph using graph data array %0</command>
<command id="1544" version="X3AP">%0format large number pair as string: billions %1, units %2, include separators %3, use millions suffix for very large numbers %4</command>
<command id="1545" version="X3AP">add info line section to menu: %0</command>
<command id="1546" version="X3AP">add info line heading to menu: %0, heading=%1</command>
<command id="1547" version="X3AP">%0create menu return value: open menu, menu script=%1, script args=%2</command>
<command id="1548" version="X3AP">%0create menu return value: run script %1, script args=%2</command>
<command id="1549" version="X3AP">add trade bar to menu: %0, text=%1, min=%2, max=%3, current=%4, return value=%5, left text=%6, right text=%7</command>
<command id="1550" version="X3AP">add new grouping to menu: %0, text=%1, open=%2</command>
<command id="1551" version="X3AP">add end grouping to menu: %0</command>
<command id="1552" version="X3AP">set menu option: %0, maximum infolines=%1</command>
<command id="1553" version="X3AP">set menu option: %0, page up/down keys for info=%1</command>
<command id="1554" version="X3AP">%0create menu return value: command `Open All Groups`</command>
<command id="1555" version="X3AP">%0create menu return value: command `Close All Groups`</command>
<command id="1556" version="X3AP">add non selectable menu item: %0, text=%1</command>
<command id="1557" version="X3AP">%0 set stock exchange unlock state: %1</command>
<command id="1558" version="X3AP">%1%0 get stock exchange unlock state</command>
<command id="1559" version="X3AP">%0 get all unlocked stock exchanges</command>
<command id="1560" version="X3AP">add trade rank based on profit: race=%0 profit=%1</command>
<command id="1561" version="X3AP">%1%0 get owned share count</command>
<command id="1562" version="X3AP">%0 set owned share count: %1</command>
<command id="1563" version="X3AP">set stock exchange corporate reports menu item: Enabled=%0</command>
<command id="1564" version="X3AP">set stock exchange Company reports menu item: Enabled=%0</command>
<command id="1565" version="X3AP">set stock exchange commodity reports menu item: Enabled=%0</command>
<command id="1566" version="X3AP">set menu option: %0, use hover line=%1</command>
<command id="1568" version="X3AP">%1%0 get fleet ships: only currently with fleet: %2</command>
<command id="1569" version="X3AP">%0 set fleet leader: %1</command>
<command id="1570" version="X3AP">%0 remove from fleet</command>
<command id="1571" version="X3AP">%0 switch fleet leader to: %1</command>
<command id="1572" version="X3AP">%1%0 is in fleet</command>
<command id="1573" version="X3AP">%1%0 get fleet leader</command>
<command id="1574" version="X3AP">%1%0 is fleet leader</command>
<command id="1575" version="X3AP">%1%0 is currently with fleet</command>
<command id="1576" version="X3AP">%0 set with fleet: %1</command>

<command id="1578" version="X3AP">%1%0 is stock exchange accessible</command>
<command id="1579" version="X3AP">%1%0 get WarObject ID</command>
<command id="1580" version="X3AP">%0get name of current War State</command>
<command id="1581" version="X3AP">%0 set job override name: %1</command>
<command id="1582" version="X3AP">%0get trade stats for sectors: %1, only include these wares: %2, treat docks as producers: %3, include player docks: %4</command>
<command id="1583" version="X3AP">%1%0 fire all turrets on target: %2, next target filter=%3</command>
<command id="1584" version="X3AP">%0get trade stats for sector: %1, only include these wares: %2, treat docks as producers: %3, include player docks: %4</command>
<command id="1587" version="X3AP">%1%0 is gate/beacon: %2 jumpable</command>
<command id="1588" version="X3AP">%0get name of next expected War State \(final choice may differ!\)</command>
<command id="1589" version="X3AP">%0is player currently observing War State</command>
<command id="1590" version="X3AP">%0get progress of current War State</command>
<command id="1591" version="X3AP">%0get start time of current War State</command>
<command id="1592" version="X3AP">%0get end time of current War State \(may change!\)</command>
<command id="1593" version="X3AP">%0did player observe currently active War State</command>
<command id="1594" version="X3AP">%0get duration of War State %1</command>
<command id="1596" version="X3AP">set menu option: %0, maximum menu height=%1 lines</command>
<command id="1598" version="X3AP">add script options: script=%0 pageid=%1 textid=%2</command>
<command id="1599" version="X3AP">remove script options: script=%0</command>
<command id="1600" version="X3AP">%0does script exist: %1</command>
<command id="1601" version="X3AP">%0register hotkey: page=%1 id=%2, to call script %3</command>
<command id="1602" version="X3AP">%0get hotkey index, script: %1</command>
<command id="1603" version="X3AP">%0register hotkey: page=%1 id=%2, to call script name %3</command>
<command id="1604" version="X3AP">%0get hotkey index, script name: %1</command>
<command id="1605" version="X3AP">%0does script name exist: %1</command>
<command id="1606" version="X3AP">%0get bullet flags of laser %1 </command>
<command id="1607" version="X3AP">%0get colour code: red=%1 green=%2 blue=%3 transparency=%4</command>
<command id="1608" version="X3AP">add player graph: script=%0 pageid=%1 textid=%2 group pageid=%3 group textid=%4 subgroup=%5 \(0-7\)</command>
<command id="1609" version="X3AP">remove player graph: script=%0 group pageid=%1 group textid=%2</command>
<command id="1610" version="X3AP">add class graph: class=%0 script=%1 pageid=%2 textid=%3 group pageid=%4 group textid=%5 subgroup=%6 \(0-7\)</command>
<command id="1611" version="X3AP">remove class graph: class=%0 script=%1 group pageid=%2 group textid=%3</command>
<command id="1612" version="X3AP">%0 add object graph: script=%1 pageid=%2 textid=%3 group pageid=%4 group textid=%5 subgroup=%6 \(0-7\)</command>
<command id="1613" version="X3AP">%0 remove object graph: script=%1 group pageid=%2 group textid=%3</command>
<command id="1614" version="X3AP">%0get global parameter value: parameter=%1 default=%2</command>
<command id="1615" version="X3AP">%0get ship class from subtype: %1</command>
<command id="1616" version="X3AP">%0get race id for race: %1</command>
<command id="1617" version="X3AP">%1%0 mine is armed</command>
<command id="1618" version="X3AP">%0set mine armed state to %1</command>-->



</commands>














<!-- ********************************************************************************** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                              Script Objects                                  ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- **                                                                              ** -->
<!-- ********************************************************************************** -->

<constants>

<!-- ******************************************* -->
<!-- **              Constants                ** -->
<!-- ******************************************* -->  

<constant id="1" page="2002">The object upon which the script is executing</constant>
<!--
<constant id="2" page="2002">MAX</constant>
-->
<constant id="3" page="2002">The SHIP containing the player</constant>
<!--
<constant id="4" page="2002">HOMEBASE</constant>
<constant id="5" page="2002">ENVIRONMENT</constant>
<constant id="6" page="2002">SECTOR</constant>
<constant id="7" page="2002">OWNER</constant>
<constant id="8" page="2002">NEAREST</constant>
-->
<constant id="9" page="2002">The value FALSE</constant>
<constant id="10" page="2002">The value TRUE</constant>
<!--
<constant id="11" page="2002">DOCKEDAT</constant>
-->



<!-- *************** FORMATIONS *************** -->

<!--Formation.Delta-->
<constant id="100" page="2002">The SHIPS fly in a horizontal `wing` FORMATION, with the FORMATIONLEADER in the lead, and {PROPERTY:followers} trailing slightly on each side.</constant>


<!--Formation.Line-->
<constant id="101" page="2002">The SHIPS fly in a parallel horizontal line, with the FORMATIONLEADER in the centre.</constant>


<!--Formation.X-->
<constant id="102" page="2002">The SHIPS fly in parallel, arranged in a vertical X FORMATION, with the FORMATIONLEADER in the centre.</constant>


<!--Formation.BigShipEscort-->
<constant id="103" page="2002">The SHIPS fly in a tight group surrounding the target SHIP on all sides, with the foremost ship being the FORMATIONLEADER.</constant>


<!--Formation.Random-->
<constant id="104" page="2002">A randomly selected FORMATION.</constant>


<!--Formation.XDelta-->
<constant id="113" page="2002">The SHIPS fly in a vertical X FORMATION, with the FORMATIONLEADER in the lead, and {PROPERTY:followers} trailing slightly in the NE, NW, SE and SW directions.</constant>


<!--Formation.Pyramid-->
<constant id="114" page="2002">The SHIPS fly in a FORMATION similar to a pyramid rotated by 90º, with the FORMATIONLEADER in the lead as the `tip` of the pyramid, and the {PROPERTY:followers} occupying the `body` of the pyramid.</constant>


<!--
<constant id="136" page="2002">Formation.DragonClaw</constant>
<constant id="137" page="2002">Formation.TheShield</constant>
-->





<!-- *************** SEARCH FLAGS *************** -->

<!--Find.Random-->
<constant id="105" page="2002">Used as a flag in any search command to return an OBJ matching the specified criteria at random.

{RELATED_COMMAND_LIST:search,Universe Data}</constant>     


<!--Find.Nearest-->  
<constant id="106" page="2002">Used as a flag in any search command to return the OBJ nearest to the {PARAMETER:Reference Object}.

{FLAGS_MULTIPLE_NEAREST}

{RELATED_COMMAND_LIST:search,Universe Data}</constant>      


<!--Find.ExactJumps-->
<constant id="107" page="2002">Used as a flag in the {COMMAND:find station in galaxy} commands to return STATIONS that are a precise {PROPERTY:jump distance} from the {PARAMETER:Reference Object}.

{RELATED_COMMAND_LIST:search,Universe Data}</constant>   


<!--Find.Enemy-->
<constant id="108" page="2002">Used as a flag in any search command to return OBJS that are {PROPERTY:enemies} of the {PARAMETER:Reference Object}.

{RELATED_COMMAND_LIST:search,Universe Data}</constant>   


<!--Find.Neutral-->
<constant id="109" page="2002">Used as a flag in any search command to return OBJS that are {PROPERTY:neutral} towards the {PARAMETER:Reference Object}.

{RELATED_COMMAND_LIST:search,Universe Data}</constant>   


<!--Find.Friend-->
<constant id="110" page="2002">Used as a flag in any search command to return OBJS that are {PROPERTY:friends} of the {PARAMETER:Reference Object}.

{RELATED_COMMAND_LIST:search,Universe Data}</constant>   


<!--Find.Multiple-->
<constant id="111" page="2002">Used as a flag in all search commands except {COMMAND:find station in galaxy} to return multiple OBJS matching the specified criteria.  Using this flag results in the search command returning an ARRAY of OBJS instead of a single OBJ.

{FLAGS_MULTIPLE_NEAREST}

{RELATED_COMMAND_LIST:search,Universe Data}</constant>    


<!--Find.TypeAsWareCategory-->
<constant id="112" page="2002">This FLAG is not used.</constant>


<!--Find.IllegalWare-->
<constant id="115" page="2002">Used as a search flag in the {COMMAND:find flying ware} command to return FLYINGWARES containing {PROPERTY:illegal} cargo.

{RELATED_COMMAND_LIST:search,Universe Data}</constant> 


<!-- Find.ForceUsePos -->
<constant id="116" page="2002">{UNDOCUMENTED}</constant>


<!-- Find.Known -->
<constant id="123" page="2002">Used as a flag in many search commands to return only OBJS that have been detected by the player at least once.

{RELATED_COMMAND_LIST:search,Universe Data}</constant>


<!-- Find.IncludeDocked -->
<constant id="124" page="2002">Used as a flag in the {COMMAND:find ship} commands to also return SHIPS that are {PROPERTY:docked}.

{RELATED_COMMAND_LIST:search,Universe Data}</constant>


<!-- Find.RaceLogicEnabled -->
<constant id="125" page="2002">Used as a flag in the {COMMAND:find ship} commands to return only SHIPS that are currently controlled by {PROPERTY:race logic}.

{RELATED_COMMAND_LIST:search,Universe Data}</constant>


<!-- Find.Visible -->
<constant id="126" page="2002">Used as a flag in many search commands to return only OBJS that are within scanner range of the {PARAMETER:Reference Object}.

{RELATED_COMMAND_LIST:search,Universe Data}</constant>


<!-- Find.SEN -->
<constant id="127" page="2002">{UNDOCUMENTED}</constant>

<!-- Find.HEN -->
<constant id="128" page="2002">{UNDOCUMENTED}</constant>

<!-- Find.SON -->
<constant id="129" page="2002">{UNDOCUMENTED}</constant>


<!-- Find.DockingAllowed -->
<constant id="131" page="2002">Used as a flag in the {COMMAND:find station} commands to return only STATIONS at which the {PARAMETER:Reference Object} may dock.

{RELATED_COMMAND_LIST:search,Universe Data}</constant>


<!-- Find.WingOnly -->
<constant id="132" page="2002">Used as a flag in the {COMMAND:find ship} commands to return only SHIPS that are currently within a WING.

{RELATED_COMMAND_LIST:search,Universe Data}</constant>


<!-- Find.JumpableGate -->
<constant id="134" page="2002">Used as a flag in the {COMMAND:find gate} commands to exclude {OBJECT:Transorbital Accelerators} from the results.

{RELATED_COMMAND_LIST:search,Universe Data}</constant>


<!-- Find.Expand -->
<constant id="135" page="2002">Used as a flag in the {COMMAND:find gate} commands to request adjacent SECTORS be searched until a matching JUMPGATE is found.

{RELATED_COMMAND_LIST:search,Universe Data}</constant>

<!-- Find.JumpBeacons -->
<constant id="138" page="2002">Used as a flag in the {COMMAND:find gate} commands to return {OBJECT:Jump Beacons} as well as JUMPGATES.

{RELATED_COMMAND_LIST:search,Universe Data}</constant>





<!-- *************** COMMAND CONSOLE FLAGS *************** -->

<!-- CmdConCheck.Available -->
<constant id="117" page="2002">Returned by the `check script` used by the {COMMAND:set script command upgrade} commands to indicate the specified {TYPE:object command} is enabled.</constant>

<!-- CmdConCheck.Disabled -->
<constant id="118" page="2002">Returned by the `check script` used by the {COMMAND:set script command upgrade} commands to indicate the specified {TYPE:object command} is disabled.</constant>

<!-- CmdConCheck.OneTime -->
<constant id="119" page="2002">Returned by the `check script` used by the {COMMAND:set script command upgrade} commands to indicate the status of the specified {TYPE:object command} should only be checked when the `commands` menu is opened.</constant>

<!-- CmdConCheck.Infinite -->
<constant id="120" page="2002">Returned by the `check script` used by the {COMMAND:set script command upgrade} commands to indicate the status of the specified {TYPE:object command} should be checked continuously while the `commands` menu is open.</constant>

<!-- CmdConCheck.NeedHomeStation -->
<constant id="121" page="2002">Returned by the `check script` used by the {COMMAND:set script command upgrade} commands to indicate the specified {TYPE:object command} can only be executed on OBJS with a STATION for a {PROPERTY:homebase}.</constant>

<!-- CmdConCheck.NeedHomeBase -->
<constant id="122" page="2002">Returned by the `check script` used by the {COMMAND:set script command upgrade} commands to indicate the specified {TYPE:object command} can only be executed on OBJS with a {PROPERTY:homebase}.</constant>


<!-- CmdConCheck.NoAudioConfirmation -->
<constant id="130" page="2002">{UNDOCUMENTED}</constant>


<!-- CmdConCheck.NoTempRemove -->
<constant id="133" page="2002">{UNDOCUMENTED}</constant>


<!-- CmdConCheck.WingAllShips -->
<constant id="3038" page="2002">{UNDOCUMENTED}</constant>

<!-- CmdConCheck.NoVoice -->
<constant id="3050" page="2002">{UNDOCUMENTED}</constant>

<!-- CmdConCheck.NeedFleet -->
<constant id="3051" page="2002">{UNDOCUMENTED}</constant>







<!-- ***************  MAIN TYPES *************** -->

<!--
<constant id="200" page="2002">SSTYPE_BULLET</constant>
<constant id="201" page="2002">SSTYPE_SPACE</constant>
<constant id="202" page="2002">SSTYPE_BACKGROUND</constant>
<constant id="203" page="2002">SSTYPE_SUN</constant>
<constant id="204" page="2002">SSTYPE_PLANET</constant>
-->


<!--SSTYPE_DOCK-->
<constant id="205" page="2002">[b]Docks[/b] are STATIONS that trade items but do not produce them.  {OBJECT:Trading Stations}, {OBJECT:Equipment Docks}, {OBJECT:Pirate Bases} and {OBJECT:Military Outposts} are all examples of [b]Docks[/b].</constant>

<!--SS_TYPE_FACTORY-->
<constant id="206" page="2002">[b]Factories[/b] are STATIONS that buy resources and sell products.  {OBJECT:Solar Power Plants}, {OBJECT:Crystal Fabs}, {OBJECT:Space Fuel Distilleries} and {OBJECT:Silicon Mines} are all examples of [b]Factories[/b].</constant>


<!--
<constant id="207" page="2002">SSTYPE_SHIP</constant>
<constant id="208" page="2002">SSTYPE_LASER</constant>
<constant id="209" page="2002">SSTYPE_SHIELD</constant>
<constant id="210" page="2002">SSTYPE_MISSILE</constant>
<constant id="211" page="2002">SSTYPE_W_ENERGY</constant>
<constant id="212" page="2002">SSTYPE_W_NATURAL</constant>
<constant id="213" page="2002">SSTYPE_W_BIO</constant>
<constant id="214" page="2002">SSTYPE_W_FOOD</constant>
<constant id="215" page="2002">SSTYPE_W_MINERALS</constant>
<constant id="216" page="2002">SSTYPE_W_TECH</constant>
<constant id="217" page="2002">SSTYPE_ASTEROID</constant>
<constant id="218" page="2002">SSTYPE_WARPGATE</constant>
<constant id="219" page="2002">SSTYPE_CAMERA</constant>
<constant id="220" page="2002">SSTYPE_SPECIAL</constant>
<constant id="221" page="2002">SSTYPE_NEBULA</constant>
<constant id="222" page="2002">SSTYPE_INSTATION</constant>
<constant id="223" page="2002">SSTYPE_DUMMY</constant>
<constant id="224" page="2002">SSTYPE_COMMAND</constant>
<constant id="225" page="2002">SSTYPE_COCKPIT</constant>
<constant id="226" page="2002">SSTYPE_DATATYPE</constant>
-->






<!-- *************** TRANSMISSIONS *************** -->

<!-- IncomingTransmission.SOS -->
<constant id="300" page="2002">Used in the {COMMAND:play sample: incoming transmission} command to play the `Emergency message from xyz` speech clip.

{RELATED_COMMAND_LIST:audio and video,User Interface}</constant>

<!-- IncomingTransmission.Message -->
<constant id="301" page="2002">Used in the {COMMAND:play sample: incoming transmission} command to play the `Incoming message` speech clip.

{RELATED_COMMAND_LIST:audio and video,User Interface}</constant>

<!-- IncomingTransmission.Greeting -->
<constant id="302" page="2002">Used in the {COMMAND:play sample: incoming transmission} command to play the `We are being hailed` speech clip.

{RELATED_COMMAND_LIST:audio and video,User Interface}</constant>

<!-- IncomingTransmission.Scanned -->
<constant id="303" page="2002">Used in the {COMMAND:play sample: incoming transmission} command to play the `We are scanned` speech clip.

{RELATED_COMMAND_LIST:audio and video,User Interface}</constant>


<!-- Comm.DLG_C_START_FIGHTING -->
<constant id="2004" page="2002">Used in the {COMMAND:send audio message to player} command to display the `we are about to attack` video clip.

{RELATED_COMMAND_LIST:audio and video,User Interface}</constant>

<!-- Comm.DLG_POL_ILLEGAL_GOODS -->
<constant id="2075" page="2002">Used in the {COMMAND:send audio message to player} command to display the `illegal goods detected` video clip.

{RELATED_COMMAND_LIST:audio and video,User Interface}</constant>

<!-- Comm.DLG_POL_LAST_WARNING -->
<constant id="2076" page="2002">Used in the {COMMAND:send audio message to player} command to display the `this is your last warning` video clip.

{RELATED_COMMAND_LIST:audio and video,User Interface}</constant>

<!-- Comm.DLG_POL_LEGAL_GOODS -->
<constant id="2077" page="2002">Used in the {COMMAND:send audio message to player} command to display the `no illegal goods detected` video clip.

{RELATED_COMMAND_LIST:audio and video,User Interface}</constant>

-->









<!-- *************** START ACTIONS *************** -->

<!--
<constant id="400" page="2002">ACTION_NONE</constant>
<constant id="401" page="2002">ACTION_START_IN_STATION</constant>
<constant id="402" page="2002">ACTION_LAND_IN_STATION</constant>
<constant id="403" page="2002">ACTION_ENTER_GATE</constant>
<constant id="404" page="2002">ACTION_LEAVE_GATE</constant>
<constant id="405" page="2002">ACTION_KILL</constant>
<constant id="406" page="2002">ACTION_FOLLOW_LEADER</constant>
<constant id="407" page="2002">ACTION_KILL_ALL_ENEMIES</constant>
<constant id="408" page="2002">ACTION_IDLE</constant>
<constant id="409" page="2002">ACTION_FLY_TO_SECTOR</constant>
<constant id="410" page="2002">ACTION_FLY_TO_POSITION</constant>
<constant id="411" page="2002">ACTION_SCAN</constant>
<constant id="412" page="2002">ACTION_AVOID</constant>
<constant id="413" page="2002">ACTION_LEAVE_HYPERSPACE</constant>
<constant id="414" page="2002">ACTION_ESCORT</constant>
<constant id="415" page="2002">ACTION_COLLECT</constant>
<constant id="420" page="2002">ACTION_FLY_TO_POSITION_CONTINUE</constant>
<constant id="421" page="2002">ACTION_JUMP</constant>
<constant id="422" page="2002">ACTION_BOARD</constant>
-->








<!-- *************** QUEST FLAGS *************** -->

<!--
<constant id="500" page="2002">Quest.Offered</constant>
<constant id="501" page="2002">Quest.Accepted</constant>
<constant id="502" page="2002">Quest.Continued</constant>
<constant id="503" page="2002">Quest.Aborted</constant>
<constant id="504" page="2002">Quest.Finished</constant>
<constant id="505" page="2002">Quest.Question</constant>
<constant id="506" page="2002">Quest.Event.Setenv</constant>
<constant id="507" page="2002">Quest.Event.Attacked</constant>
<constant id="508" page="2002">Quest.Event.Killed</constant>
<constant id="509" page="2002">Quest.Event.Captured</constant>
-->







<!-- *************** SPECIAL *************** -->

<!--
<constant id="1000" page="2002">GalaxyFlightTimestep.Normal</constant>
<constant id="1001" page="2002">GalaxyFlightTimestep.Focus</constant>
-->








<!-- *************** MESSAGE FLAGS *************** -->

<!--
<constant id="3000" page="2002">Msg.Display</constant>
<constant id="3001" page="2002">Msg.NoVoice</constant>
<constant id="3002" page="2002">Msg.Silent</constant>
<constant id="3003" page="2002">Msg.LogEntry</constant>
<constant id="3004" page="2002">Msg.Temporary</constant>
<constant id="3005" page="2002">Msg.Plot</constant>
-->








<!-- *************** MISSILE FLAGS *************** -->

<!--
<constant id="3020" page="2002">Missile.NoTarget</constant>
<constant id="3021" page="2002">Missile.Dumbfire</constant>
<constant id="3022" page="2002">Missile.Swarm</constant>
<constant id="3023" page="2002">Missile.Heatseek</constant>
<constant id="3024" page="2002">Missile.Tracker</constant>
<constant id="3025" page="2002">Missile.Proximity</constant>
<constant id="3026" page="2002">Missile.Triggerboom</constant>
<constant id="3027" page="2002">Missile.Torpedo</constant>
<constant id="3028" page="2002">Missile.Remote</constant>
-->








<!-- *************** WING IDS *************** -->

<!--
<constant id="3030" page="2002">Wing.Gold</constant>
<constant id="3031" page="2002">Wing.Red</constant>
<constant id="3032" page="2002">Wing.Blue</constant>
<constant id="3033" page="2002">Wing.Green</constant>
<constant id="3034" page="2002">Wing.Purple</constant>
<constant id="3035" page="2002">Wing.White</constant>
<constant id="3036" page="2002">Wing.Silver</constant>
<constant id="3037" page="2002">Wing.Orange</constant>
-->










<!-- *************** BULLET TYPES *************** -->

<!--
<constant id="3060" page="2002">Bullet.Smoke</constant>
<constant id="3061" page="2002">Bullet.Beam</constant>
<constant id="3062" page="2002">Bullet.Lightning</constant>
<constant id="3063" page="2002">Bullet.Expand</constant>
<constant id="3064" page="2002">Bullet.Disable</constant>
<constant id="3065" page="2002">Bullet.IgnoreShield</constant>
<constant id="3066" page="2002">Bullet.NeedAmmunition</constant>
<constant id="3067" page="2002">Bullet.Repair</constant>
<constant id="3068" page="2002">Bullet.SelfDestruct</constant>
<constant id="3069" page="2002">Bullet.ReduceSpeed</constant>
<constant id="3070" page="2002">Bullet.DrainWeapon</constant>
<constant id="3071" page="2002">Bullet.DamageOverTime</constant>
<constant id="3072" page="2002">Bullet.Fragment</constant>
<constant id="3073" page="2002">Bullet.Charge</constant>
<constant id="3074" page="2002">Bullet.FireDelay</constant>
-->

  
  
  
  












  
  
<!-- ******************************************* -->
<!-- **            Object Classes             ** -->
<!-- ******************************************* -->


<constant id="1001" page="2006">Components of the galaxy such as PLANETS, {TYPE:stars} and NEBULAE, as well as unique objects used in the plot.</constant>       <!--Special-->
<constant id="1650" page="2006">{UNDOCUMENTED}</constant>       <!--Debris-->
<constant id="2088" page="2006">{UNDOCUMENTED}</constant>       <!--Debris-->
<constant id="1652" page="2006">{UNDOCUMENTED}</constant>       <!--Wreck-->
<constant id="2090" page="2006">{UNDOCUMENTED}</constant>       <!--Wreck-->


<constant id="2001" page="2006">Any sector.

{HEADING:Hierarchy}
[center]{COMMAND:Sector}[/center]</constant>                 <!--Sector-->


<constant id="2012" page="2006">Any type of Asteroid.

{HEADING:Hierarchy}
[center]{COMMAND:Asteroid}[/center]</constant>       <!--Asteroid-->


<constant id="2014" page="2006">Any Jump Gate.

{HEADING:Hierarchy}
[center]{COMMAND:Jump Gate}[/center]</constant>              <!--Warp Gate-->


<constant id="2064" page="2006">Any pilot in a spacesuit.

{HEADING:Hierarchy}
[center]{CLASS:Ship}

|

{COMMAND:Astronaut}[/center]</constant>               <!--Astronaut-->


<constant id="2084" page="2006">Any FLYINGWARE container in space.

{HEADING:Hierarchy}
[center]{COMMAND:Ware Container}[/center]</constant>       <!--Ware Container-->


<constant id="2085" page="2006">Any MISSILE that is in flight.

{HEADING:Hierarchy}
[center]{COMMAND:Missile}[/center]</constant>             <!--Missile-->

<!--Station-->
<constant id="2016" page="2006">Any Dock, Factory or Shipyard.

{HEADING:Hierarchy}
[center]{COMMAND:Station}

|

{CLASS:Dock}\t{CLASS:Factory}\t{CLASS:Shipyard}[/center]</constant>      

<!--Factory-->
<constant id="2006" page="2006">A FACTORY is defined as a STATION that buys RESOURCES and sells PRODUCTS, wheras a DOCK sells RESOURCES and has no PRODUCTS.

{HEADING:Hierarchy}
[center]{CLASS:Station}

|

{COMMAND:Factory}

|

{CLASS:Shipyard}\t{CLASS:Complex Hub}[/center]
{HEADING:Related}

See the {CONSTANT:SSTYPE_DOCK} and {CONSTANT:SSTYPE_FACTORY} MAINTYPES for more information.</constant>      


<!--Dock-->
<constant id="2007" page="2006">A DOCK is defined as a STATION that sells RESOURCES and has no PRODUCTS, whereas a FACTORY buys RESOURCES and sells PRODUCTS.

{HEADING:Hierarchy}
[center]{CLASS:Station}

|

{COMMAND:Dock}

|

{CLASS:Trading Dock}\t{CLASS:Equipment Dock}\t{CLASS:Goner Dock}

{CLASS:Pirate Dock}\t{CLASS:Museum Dock}\t{CLASS:Kh`ahk Dock}[/center]
{HEADING:Related}

See the {CONSTANT:SSTYPE_DOCK} and {CONSTANT:SSTYPE_FACTORY} MAINTYPES for more information.</constant>    


<!--Shipyard-->
<constant id="2037" page="2006">Any SHIPYARD of any size and RACE.

{HEADING:Hierarchy}
[center]{CLASS:Factory}

|

{COMMAND:Shipyard}

|

{CLASS:Small Shipyard}\t{CLASS:Large Shipyard}[/center]</constant>     

<!--Small Shipyard-->
<constant id="2081" page="2006">Any SHIPYARD that trades in the smallest of SHIPS, such as the {OBJECT:Federal Argon Wharf}.

{HEADING:Hierarchy}
[center]{CLASS:Shipyard}

|

{COMMAND:Small Shipyard}[/center]</constant>       

<!--Big Shipyard-->
<constant id="2082" page="2006">Any SHIPYARD that trades in the largest of SHIPS, such as the {OBJECT:Federal Argon Shipyard}.

{HEADING:Hierarchy}
[center]{CLASS:Shipyard}

|

{COMMAND:Big Shipyard}[/center]</constant>       


<!--Scrapyard-->
<constant id="2086" page="2006">{UNDOCUMENTED}</constant>       


<!--Complex Hub-->
<constant id="2044" page="2006">A connected set of FACTORIES.

{HEADING:Hierarchy}
[center]{CLASS:Factory}

|

{COMMAND:Complex Hub}[/center]
{SUBMISSION:Nekomata}</constant>       


<constant id="2045" page="2006">{UNDOCUMENTED}</constant>       <!--Player Headquarters-->
<constant id="2046" page="2006">{UNDOCUMENTED}</constant>       <!--Headquarters-->




<constant id="2074" page="2006">The trading STATIONS found in the centre of each SECTOR, such as the {OBJECT:Royal Boron Trading Station} or {OBJECT:Split Trading Port}.

{HEADING:Hierarchy}
[center]{CLASS:Dock}

|

{COMMAND:Trading Dock}[/center]</constant>      <!--Trading Dock--> 



<constant id="2075" page="2006">The equipment DOCKS operated by each RACE, such as the {OBJECT:Paranid Equipment Dock} or the {OBJECT:Teladi Space Equipment Dock}

{HEADING:Hierarchy}
[center]{CLASS:Dock}

|

{COMMAND:Equipment Dock}[/center]</constant>     <!--Equipment Dock-->  



<constant id="2076" page="2006">The Pirate STATIONS in the game that are not FACTORIES.

{HEADING:Hierarchy}
[center]{CLASS:Dock}

|

{COMMAND:Pirate Dock}[/center]</constant>       <!--Pirate Dock-->



<constant id="2077" page="2006">{TODO:Determine what a museum dock is}
  
{HEADING:Hierarchy}
[center]{CLASS:Dock}

|

{COMMAND:Museum Dock}[/center]</constant>       <!--Museum Dock-->



<constant id="2078" page="2006">There are only two Kh`aak STATIONS, both are {CLASS:Kha`ak Dock}.

{HEADING:Hierarchy}
[center]{CLASS:Dock}

|

{COMMAND:Kha`ak Dock}[/center]</constant>       <!--Kha`ak Dock-->



<constant id="2042" page="2006">There are only two Goner STATIONS, both are {CLASS:Goner Dock}.

{HEADING:Hierarchy}
[center]{CLASS:Dock}

|

{COMMAND:Goner Dock}[/center]</constant>       <!--Goner Dock-->



<!--Ship-->
<constant id="2004" page="2006">Any Ship, Astonaut, Satellite, Mine, Orbital Laser, Space Fly, Drone or UFO in the game.

{HEADING:Hierarchy}
[center]{COMMAND:Ship}

|

{CLASS:Moveable Ship}\t{CLASS:Stationary Ship}

{CLASS:Special Ship}\t{CLASS:Astronaut}\t{CLASS:UFO}[/center]</constant>    


<!--Moveable Ship-->
<constant id="2134" page="2006">Any SHIP with the capability to move. ie. All SHIPS except satellites, mines and orbital LASERS.

{HEADING:Hierarchy}
[center]{CLASS:Ship}

|

{COMMAND:Moveable Ship}

|

{CLASS:Little Ship}\t{CLASS:Big Ship}\t{CLASS:Huge Ship}\t{CLASS:Drone}[/center]</constant>      
 

<!--Stationary Ship-->
<constant id="2135" page="2006">Most of the small stationary objects that can be {PROPERTY:player owned}.

{HEADING:Hierarchy}
[center]{CLASS:Ship}

|

{COMMAND:Stationary Ship}

|

{CLASS:Mine}\t{CLASS:Orbital Laser}\t{CLASS:Satellite}[/center]</constant>       



<!--Huge Ship-->
<constant id="2019" page="2006">Any SHIP that is significantly larger than most ships in the game, such as {M1_OBJECT}, {M2_OBJECT} and {TL_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Moveable Ship}

|

{COMMAND:Huge Ship}

|

{CLASS:Carrier}[/center]</constant>       


<!--Carrier-->
<constant id="2033" page="2006">Any SHIP that can contain smaller ships.

{HEADING:Hierarchy}
[center]{CLASS:Huge Ship}

|

{COMMAND:Carrier}

|

{M1_CLASS}\t{M2_CLASS}

{TL_CLASS}[/center]</constant>     
  

<!--Big Ship-->
<constant id="2073" page="2006">Any SHIP that is large enough to contain smaller SHIPS, but is not gigantic.

{HEADING:Hierarchy}
[center]{CLASS:Moveable Ship}

|

{COMMAND:Big Ship}

|

{M6_CLASS}\t{M8_CLASS}

{TM_CLASS}[/center]</constant>       


<!--Little Ship-->
<constant id="2133" page="2006">Any SHIP too small to contain other SHIPS, such as fighters and transports.

{HEADING:Hierarchy}
[center]{CLASS:Moveable Ship}

|

{COMMAND:Little Ship}

|

{CLASS:Fighter}\t{TS_CLASS}

{TP_CLASS}[/center]</constant>     
  


<!--Fighter-->
<constant id="2034" page="2006">Any type of Fighter.

{HEADING:Hierarchy}
[center]{CLASS:Little Ship}

|

{COMMAND:Fighter}

|

{M3_CLASS}\t{M4_CLASS}

{M5_CLASS}[/center]</constant>       

  
<!--Freighter-->
<constant id="2038" page="2006">{UNDOCUMENTED}</constant>     
  

<!--M0-->
<constant id="2020" page="2006">Any type of {M0_OBJECT} - A unique size of vessel only used in the {X2} plot.

{HEADING:Hierarchy}
[center]{CLASS:Carrier}

|

{COMMAND:M0}[/center]</constant>       


<!--M1-->
<constant id="2021" page="2006">Any type of {M1_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Carrier}

|

{COMMAND:M1}[/center]</constant>          


<!--M2-->
<constant id="2022" page="2006">Any type of {M2_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Carrier}

|

{COMMAND:M2}[/center]</constant>           

<!--M3-->
<constant id="2023" page="2006">Any type of {M3_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Fighter}

|

{COMMAND:M3}[/center]</constant>       


<!--M4-->
<constant id="2024" page="2006">Any type of {M4_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Fighter}

|

{COMMAND:M4}[/center]</constant>      


<!--M5-->
<constant id="2025" page="2006">Any type of {M5_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Fighter}

|

{COMMAND:M5}[/center]</constant>       


<!--M6-->
<constant id="2026" page="2006">Any type of {M6_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Carrier}

|

{COMMAND:M6}[/center]</constant>             


<!--M7-->
<constant id="2027" page="2006">Any type of {M7_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Big Ship}

|

{COMMAND:M7}[/center]</constant>                  


<!--M8-->
<constant id="2142" page="2006">Any type of {M8_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Big Ship}

|

{COMMAND:M8}[/center]</constant>                   


<!--TM-->
<constant id="2141" page="2006">Any type of {TM_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Big Ship}

|

{COMMAND:TM}[/center]</constant>    


<!--TS-->
<constant id="2031" page="2006">Any type of {TS_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Little Ship}

|

{COMMAND:TS}

|

{PTS_CLASS}[/center]</constant>        


<!--TP-->
<constant id="2030" page="2006">Any type of {TP_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Little Ship}

|

{COMMAND:TP}[/center]</constant>   


<!--TL-->
<constant id="2032" page="2006">Any type of {TL_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Carrier}

|

{COMMAND:TL}

|

{PTL_CLASS}[/center]</constant>            


<!--Pirate TS-->
<constant id="2035" page="2006">Any type of {PTS_OBJECT}.

{HEADING:Hierarchy}
[center]{TS_CLASS}

|

{COMMAND:Pirate TS}[/center]</constant>       


<!--Pirate TL-->
<constant id="2036" page="2006">Any type of {PTL_OBJECT}.

{HEADING:Hierarchy}
[center]{TL_CLASS}

|

{COMMAND:Pirate TL}[/center]</constant>       


<!--Goner Ship-->
<constant id="2039" page="2006">{UNDOCUMENTED}</constant>       


<!--Kha`ak Cluster M3-->
<constant id="2131" page="2006">{UNDOCUMENTED}</constant>       



<!--Beacon-->
<constant id="2060" page="2006">Any type of {OBJECT:Beacon}.

{HEADING:Hierarchy}
[center]{CLASS:Stationary Ship}

|

{COMMAND:Beacon}

|

{CLASS:Jump Beacon}[/center]</constant>       


<!--Jump Beacon-->
<constant id="2062" page="2006">Any {OBJECT:Jump Beacon}.

{HEADING:Hierarchy}
[center]{CLASS:Beacon}

|

{COMMAND:Jump Beacon}[/center]</constant>       



<!--UFO-->   
<constant id="2068" page="2006">Any of the flying saucers randomly roaming SECTORS.

{HEADING:Hierarchy}
[center]{CLASS:Ship}

|

{COMMAND:UFO}[/center]</constant>        



<!--Space Fly-->
<constant id="2070" page="2006">A unique OBJCLASS that represents only {OBJECT:Space Flies}.  All {OBJECT:Space Flies} are of this OBJCLASS.

{HEADING:Hierarchy}
[center]{CLASS:Special Ship}

|

{COMMAND:Space Fly}[/center]</constant>      
 

<!--Special Ship-->
<constant id="2136" page="2006">Unique objects, possibly just the {OBJECT:Space Fly}.

{HEADING:Hierarchy}
[center]{CLASS:Ship}

|

{COMMAND:Special Ship}

|

{CLASS:Space Fly}[/center]</constant>       


<!--All Satellites-->
<constant id="2079" page="2006">Represents any type of {TYPE:satellite}.

{HEADING:Hierarchy}
[center]{CLASS:Stationary Ship}

|

{COMMAND:All Satellites}

|

{CLASS:Navigation Relay Satellite}\t{CLASS:Advanced Satellite}[/center]</constant>       


<!--Navigation Relay Satellite-->
<constant id="2065" page="2006">Covers only {OBJECT:Navigation Relay Satellite}.

{HEADING:Hierarchy}
[center]{CLASS:All Satellites}

|

{COMMAND:Navigation Relay Satellite}[/center]</constant>      


<!--Advanced Satellite-->
<constant id="2080" page="2006">Any {OBJECT:Advanced Satellite}.

{HEADING:Hierarchy}
[center]{CLASS:All Satellites}

|

{COMMAND:Advanced Satellite}[/center]</constant>     


<!--Drone-->
<constant id="2061" page="2006">Represents any type of {TYPE:drone}.

{HEADING:Hierarchy}
[center]{CLASS:Moveable Ship}

|

{COMMAND:Drone}

|

{CLASS:Fight drone}\t{CLASS:Fighter Drone MKII}

{CLASS:Freight drone}\t{CLASS:Recon drone}[/center]
{CORRECTION:Nekomata}</constant>      


<!--Fight drone-->
<constant id="2067" page="2006">Represents any {OBJECT:Fight drone}.

{HEADING:Hierarchy}
[center]{CLASS:Drone}

|

{COMMAND:Fight drone}[/center]</constant>       


<constant id="2146" page="2006">Represents any {OBJECT:Fighter Drone MKII}.

{HEADING:Hierarchy}
[center]{CLASS:Drone}

|

{COMMAND:Fighter Drone MKII}[/center]</constant>       <!--Fighter Drone MKII-->


<constant id="2092" page="2006">Represents any {OBJECT:Freight Drone}.

{HEADING:Hierarchy}
[center]{CLASS:Drone}

|

{COMMAND:Freight Drone}[/center]</constant>       <!--Freight Drone-->


<constant id="2150" page="2006">Represents any {OBJECT:Recon Drone}.

{HEADING:Hierarchy}
[center]{CLASS:Drone}

|

{COMMAND:Recon Drone}[/center]</constant>       <!--Recon Drone-->


<constant id="2083" page="2006">{UNDOCUMENTED}</constant>       <!--Puller-->


<constant id="2143" page="2006">Represents any {OBJECT:Tracker Mine}.

{HEADING:Hierarchy}
[center]{CLASS:Stationary Ship}

|

{COMMAND:Tracker Mine}[/center]</constant>       <!--Tracker Mine-->


<constant id="2144" page="2006">Represents any {OBJECT:Ion Mine}.

{HEADING:Hierarchy}
[center]{CLASS:Stationary Ship}

|

{COMMAND:Ion Mine}[/center]</constant>       <!--Ion Mine-->


<constant id="2145" page="2006">Represents any {OBJECT:Matter/Anti-Matter Mine}.

{HEADING:Hierarchy}
[center]{CLASS:Stationary Ship}

|

{COMMAND:Matter/Anti-Matter Mine}[/center]</constant>       <!--Matter/Anti-Matter Mine-->
  

<constant id="2066" page="2006">Represents any {OBJECT:SQUASH Mine}.

{HEADING:Hierarchy}
[center]{CLASS:Stationary Ship}

|

{COMMAND:SQUASH Mine}[/center]</constant>                 <!--SQUASH Mine-->


<constant id="2011" page="2006">Any {OBJECT:Orbital Laser}

{HEADING:Hierarchy}
[center]{CLASS:Stationary Ship}

|

{COMMAND:Orbital Laser}[/center]</constant>   <!--Orbital Laser-->


<constant id="2149" page="2006">Any {OBJECT:Terran Orbital Laser}

{HEADING:Hierarchy}
[center]{CLASS:Stationary Ship}

|

{COMMAND:Terran Orbital Laser}[/center]</constant>       <!--Terran Orbital Laser-->


<constant id="2147" page="2006">{UNDOCUMENTED}</constant>       <!--Keris-->


<constant id="2148" page="2006">{UNDOCUMENTED}</constant>       <!--Stock Exchange-->


<constant id="1000" page="2006">Any OBJ within the game, such as SHIPS, STATIONS, PLANETS and {TYPE:stars}.

{HEADING:Hierarchy}
[center]{CLASS:GBODY}

|

{CLASS:Asteroid}\t{CLASS:Jump Gate}\t{CLASS:Missile}\t{CLASS:Ship}\t
{CLASS:Station}\t{CLASS:SpaceFly}\t{CLASS:Special}\t{CLASS:Ware Container}[/center]
[left]{HEADING:Information}

This is the base OBJCLASS for all objects in the galaxy except {TYPE:wings}, which have no physical representation.  There is no known use for this OBJCLASS within the scripting engine.[/left]{SUBMISSION:Jack08}</constant>       <!--GBODY-->
    
    

</constants>




</descriptions>