#pragma once
#include "../Logic/Common.h"
#include "../Logic/ScriptParser.h"

namespace Testing
{
   namespace Scripts
   {
      /// <summary>Occurs when a validation test fails</summary>
      class ValidationException : public ExceptionBase
      {
      public:
         /// <summary>Create an ValidationException</summary>
         /// <param name="src">Location of throw</param>
         /// <param name="msg">Message</param>
         ValidationException(wstring  src, wstring  msg) 
            : ExceptionBase(src, wstring(L"Validation failed: ") + msg)
         {}
      };

      /// <summary>Validates the script text generated by the compiler</summary>
      class ScriptTextValidator
      {
         // ------------------------ TYPES --------------------------
      private:

         // --------------------- CONSTRUCTION ----------------------

      public:
         ScriptTextValidator(Path file);
         virtual ~ScriptTextValidator();

         DEFAULT_COPY(ScriptTextValidator);	// Default copy semantics
         DEFAULT_MOVE(ScriptTextValidator);	// Default move semantics

         // ------------------------ STATIC -------------------------
      private:
         static ValidationException  TextMismatch(const GuiString& src, const GuiString& prop, const GuiString& a, const GuiString& b);

         // --------------------- PROPERTIES ------------------------

         // ---------------------- ACCESSORS ------------------------			

         // ----------------------- MUTATORS ------------------------
      public:
         bool  Validate();

      private:
         
         bool       Compare(const ScriptFile& in, const ScriptFile& out);
         bool       Compare(const ScriptVariable& in, const ScriptVariable& out);
         bool       Compare(UINT line, const ScriptCommand& in, const ScriptCommand& out);
         bool       Compare(UINT line, UINT param, const ScriptParameter& in, const ScriptParameter& out);

         LineArray  GetAllLines(const CommandList& commands);

         // -------------------- REPRESENTATION ---------------------

      private:
         Path  FullPath;
      };

   }
}

using namespace Testing::Scripts;
