<?xml version="1.0" encoding="utf-8" ?>
<!--
* ************************************************************* 
* **   X-Studio II Descriptions Definitions v1.0  Feb 2014   **
* *************************************************************

<LANGUAGE>: Document root
==========

Element Properties:

id : X3 language ID



<LANGUAGE>::<MACROS> : Defines the macros used by descriptions to maintain uniform formatting
====================

Child Elements:

macro : explained below



<LANGUAGE>::<MACROS>::<MACRO> : Defines a text replacement macro that can be used in any macro or description
==============================

Element text specifies the replacement text, using the formatting tags found in X3 language files.
It can also contain formatting tag %s (string) or %d (int). 
                                            Note: Misuse of formatting tags will cause program crashes


Element Properties:

id         : Unique name, should be capitalized for consistency
parameters : (default = 0) Indicates number of formatting tags
recursive  : (default = 1) If zero, macro is not recursively searched for other macros. 
                           Used by macros with replacement text that contains their macro ID.




<LANGUAGE>::<DESCRIPTIONS> : Defines the descriptions for commands and script-objects (constants)
===========================

Child Elements:

command  : explained below
constant : explained below




<LANGUAGE>::<DESCRIPTIONS>::<COMMAND> : Describes a single command for a single game version
=====================================

Element Properties:

id      : Command ID
version : Game version, must be one of: X2, X3R, X3TC, X3AP

The ID and Version must form a unique combination, 
eg. (id=100 ver=X2 + id=100 ver=X3TC) == OK
    (id=100 ver=X3R + id=100 ver=X3R) == CONFLICT over X3R



<LANGUAGE>::<DESCRIPTIONS>::<CONSTANT> : Describes a single script-object (constant) for ALL game versions
======================================

Element Properties:

id   : Constant ID  (Defined by matching string ID in main language file)
page : Page ID      (Defined by matching string ID in main language file)

-->

<!-- ******************************************* -->
<!-- **         English Descriptions          ** -->
<!-- ******************************************* -->


<language id="44">


  <macros>


<!-- ******************************************* -->
<!-- **               Headings                ** -->
<!-- ******************************************* -->


    <!-- {HEADING:szText}        Format headings in bold with underline -->
    <macro id="HEADING" parameters="1">[b][u]%s:[/u][/b]</macro>

    <!-- {SUBMISSION:szText}     Format credits in right-aligned italics -->
    <macro id="SUBMISSION" parameters="1">[right][i](Submitted by %s)[/i][/right]</macro>

    <!-- {CORRECTION:szText}     Format credits in right-aligned italics -->
    <macro id="CORRECTION" parameters="1">[right][i](Updated by %s)[/i][/right]</macro>


    
<!-- ******************************************* -->
<!-- **             Text Formats              ** -->
<!-- ******************************************* -->


    <!-- {VALUE:szValue}         Format values in red  -->
    <macro id="VALUE" parameters="1">[b][red]`%s`[/red][/b]</macro>

    <!-- {COMMAND:szCommand}     Format commands in black (bold)  -->
    <macro id="COMMAND" parameters="1">[b]%s[/b]</macro>

    <!-- {PARAMETER:szParameter} Enclose in braces. Format in black (bold)  -->
    <macro id="PARAMETER" parameters="1">[b]«%s»[/b]</macro>

    <!-- {UNITS:szUnits}         Format units in italics  -->
    <macro id="UNITS" parameters="1">{TERMINOLOGY:%s}</macro>

    <!-- {DATATYPE:szType}       Format script data-types in yellow (Bold)  -->
    <macro id="TYPE" parameters="1">[b][blue]%s[/blue][/b]</macro>
    <macro id="DATATYPE" parameters="1">[b][blue]%s[/blue][/b]</macro>

    <!-- {CONSTANT:szConstant}   Format script constants in red (BOLD) -->
    <macro id="CONSTANT" parameters="1">[b][red]%s[/red][/b]</macro>

    <!-- {VARIABLE:szVariable}   Format variables in green (Bold)  -->
    <macro id="VARIABLE" parameters="1">[b][green]%s[/green][/b]</macro>

    <!-- {PROPERTY:szSkill}      Format properties in purple  -->
    <macro id="PROPERTY" parameters="1">[magenta]%s[/magenta]</macro>

    <!-- {CLASS:szObjectClass}   Format Object Classes in yellow (bold)  -->
    <macro id="CLASS" parameters="1">[b][yellow]%s[/yellow][/b]</macro>

    <!-- {KEYWORD:szKeyword}     Format keywords in blue (bold)  -->
    <macro id="KEYWORD" parameters="1">[b][blue]%s[/blue][/b]</macro>

    <!-- {OBJECT:szObject}       Format objects in orange (Bold)  -->
    <macro id="OBJECT" parameters="1">[b][orange]%s[/orange][/b]</macro>

    <!-- {TERMINOLOGY:szWord}    Format terminology in italics   -->
    <macro id="TERMINOLOGY" parameters="1">[i]%s[/i]</macro>



    <!--Data/Object Types-->
    <macro id="AL_PLUGIN">{TYPE:artificial life plugin}</macro>
    <macro id="AL_PLUGINS">{TYPE:artificial life plugins}</macro>
    <macro id="ARRAY">{TYPE:array}</macro>
    <macro id="ARRAYS">{TYPE:arrays}</macro>
    <macro id="ASTEROID">{TYPE:asteroid}</macro>
    <macro id="ASTEROIDS">{TYPE:asteroids}</macro>
    <macro id="ASTRONAUT">{TYPE:astronaut}</macro>
    <macro id="ASTRONAUTS">{TYPE:astronauts}</macro>
    <macro id="CORPORATION">{TYPE:corporation}</macro>
    <macro id="DEBRIS">{TYPE:debris}</macro>
    <macro id="DOCK">{TYPE:dock}</macro>
    <macro id="DOCKS">{TYPE:docks}</macro>
    <macro id="FACTORY">{TYPE:factory}</macro>
    <macro id="FACTORIES">{TYPE:factories}</macro>
    <macro id="INTEGER">{TYPE:integer}</macro>
    <macro id="INTEGERS">{TYPE:integers}</macro>
    <macro id="JUMPGATE">{TYPE:jumpgate}</macro>
    <macro id="JUMPGATES">{TYPE:jumpgates}</macro>
    <macro id="FLYINGWARE">{TYPE:flying ware}</macro>
    <macro id="FLYINGWARES">{TYPE:flying wares}</macro>
    <macro id="GUN">{TYPE:gun}</macro>
    <macro id="GUNS">{TYPE:guns}</macro>
    <macro id="LASER">{TYPE:laser}</macro>
    <macro id="LASERS">{TYPE:lasers}</macro>
    <macro id="MARINE">{TYPE:marine}</macro>
    <macro id="MARINES">{TYPE:marines}</macro>
    <macro id="MISSILE">{TYPE:missile}</macro>
    <macro id="MISSILES">{TYPE:missiles}</macro>
    <macro id="NEBULA">{TYPE:nebula}</macro>
    <macro id="NEBULAE">{TYPE:nebulae}</macro>
    <macro id="OBJ">{TYPE:object}</macro>
    <macro id="OBJS">{TYPE:objects}</macro>
    <macro id="PASSENGER">{TYPE:passenger}</macro>
    <macro id="PASSENGERS">{TYPE:passengers}</macro>
    <macro id="PILOT">{TYPE:pilot}</macro>
    <macro id="PILOTS">{TYPE:pilots}</macro>
    <macro id="PLANET">{TYPE:planet}</macro>
    <macro id="PLANETS">{TYPE:planets}</macro>
    <macro id="RACE">{TYPE:race}</macro>
    <macro id="RACES">{TYPE:races}</macro>
    <macro id="SECTOR">{TYPE:sector}</macro>
    <macro id="SECTORS">{TYPE:sectors}</macro>
    <macro id="SECTOROBJECT">{TYPE:sector-object}</macro>
    <macro id="SECTOROBJECTS">{TYPE:sector-objects}</macro>
    <macro id="SHIP">{TYPE:ship}</macro>
    <macro id="SHIPS">{TYPE:ships}</macro>
    <macro id="SHIPYARD">{TYPE:shipyard}</macro>
    <macro id="SHIPYARDS">{TYPE:shipyards}</macro>
    <macro id="SHIELD">{TYPE:shield}</macro>
    <macro id="SHIELDS">{TYPE:shields}</macro>
    <macro id="SPECIAL">{TYPE:special}</macro>
    <macro id="SPECIALS">{TYPE:specials}</macro>
    <macro id="STATION">{TYPE:station}</macro>
    <macro id="STATIONS">{TYPE:stations}</macro>
    <macro id="STRING">{TYPE:string}</macro>
    <macro id="STRINGS">{TYPE:strings}</macro>
    <macro id="SUN">{TYPE:sun}</macro>
    <macro id="SUNS">{TYPE:suns}</macro>
    <macro id="TURRET">{TYPE:turret}</macro>
    <macro id="TURRETS">{TYPE:turrets}</macro>
    <macro id="WING">{TYPE:wing}</macro>
    <macro id="WINGS">{TYPE:wings}</macro>
    <macro id="WARE">{TYPE:ware}</macro>
    <macro id="WARES">{TYPE:wares}</macro>

    <!--Constants-->
    <macro id="TRUE" recursive="0">[b][green]\[TRUE\][/green][/b]</macro>
    <macro id="FALSE" recursive="0">[b][red]\[FALSE\][/red][/b]</macro>
    <macro id="NULL">{VARIABLE:null}</macro>

    <!--Terminology-->
    <macro id="OBJCLASS">{TERMINOLOGY:Object Class}</macro>
    <macro id="OBJCLASSES">{TERMINOLOGY:Object Classes}</macro>
    <macro id="OBJTYPE">{TERMINOLOGY:Type}</macro>
    <macro id="OBJTYPES">{TERMINOLOGY:Types}</macro>
    <macro id="MAINTYPE">{TERMINOLOGY:MainType}</macro>
    <macro id="MAINTYPES">{TERMINOLOGY:MainTypes}</macro>
    <macro id="SUBTYPE">{TERMINOLOGY:SubType}</macro>
    <macro id="SUBTYPES">{TERMINOLOGY:SubTypes}</macro>
    <macro id="FLAG">{TERMINOLOGY:search flag}</macro>
    <macro id="FLAGS">{TERMINOLOGY:search flags}</macro>
    <macro id="TFILE">{TERMINOLOGY:T-File}</macro>

    <!--Properties-->
    <macro id="DOCKED">{PROPERTY:docked}</macro>
    <macro id="HOMEBASE">{PROPERTY:homebase}</macro>
    <macro id="FORMATION">{PROPERTY:formation}</macro>
    <macro id="FORMATIONLEADER">{PROPERTY:formation leader}</macro>
    <macro id="OWNEDBY">{PROPERTY:owned by}</macro>
    <macro id="MANUFACTUREDBY">{PROPERTY:manufactured by}</macro>
    <macro id="SECURITY">{PROPERTY:security}</macro>
    <macro id="NOTORIETY">{PROPERTY:notoriety}</macro>
    <macro id="PRODUCTS">{PROPERTY:products}</macro>
    <macro id="PRODUCT">{PROPERTY:product}</macro>
    <macro id="RESOURCES">{PROPERTY:resources}</macro>
    <macro id="RESOURCE">{PROPERTY:resource}</macro>
    <macro id="SERIAL">{PROPERTY:station serial}</macro>
    <macro id="SERIALS">{PROPERTY:station serials}</macro>
    <macro id="PRIMARYRESOURCE">{PROPERTY:primary resource}</macro>
    <macro id="SECONDARYRESOURCE">{PROPERTY:secondary resource}</macro>

    <!--Ship Sizes-->
    <macro id="M0_OBJECT">{OBJECT:Dreadnought \(M0\)}</macro>
    <macro id="M1_OBJECT">{OBJECT:Carrier \(M1\)}</macro>
    <macro id="M2_OBJECT">{OBJECT:Battleship \(M2\)}</macro>
    <macro id="M3_OBJECT">{OBJECT:Heavy Fighter \(M3\)}</macro>
    <macro id="M4_OBJECT">{OBJECT:Medium Fighter \(M4\)}</macro>
    <macro id="M5_OBJECT">{OBJECT:Light Fighter \(M5\)}</macro>
    <macro id="M6_OBJECT">{OBJECT:Corvette \(M6\)}</macro>
    <macro id="M7_OBJECT">{OBJECT:Frigate \(M7\)}</macro>
    <macro id="M7M_OBJECT">{OBJECT:Missile Frigate \(M7M\)}</macro>
    <macro id="M8_OBJECT">{OBJECT:Bomber \(M8\)}</macro>
    <macro id="TS_OBJECT">{OBJECT:Small Transport \(TS\)}</macro>
    <macro id="PTS_OBJECT">{OBJECT:Small Pirate Transport \(TS\)}</macro>
    <macro id="TL_OBJECT">{OBJECT:Large Transport \(TL\)}</macro>
    <macro id="PTL_OBJECT">{OBJECT:Large Pirate Transport \(TL\)}</macro>
    <macro id="TM_OBJECT">{OBJECT:Military Transport \(TM\)}</macro>
    <macro id="TP_OBJECT">{OBJECT:Personnel Transport \(TP\)}</macro>

    <!--Ship Classes-->
    <macro id="M0_CLASS">{CLASS:Dreadnought \(M0\)}</macro>
    <macro id="M1_CLASS">{CLASS:Carrier \(M1\)}</macro>
    <macro id="M2_CLASS">{CLASS:Battleship \(M2\)}</macro>
    <macro id="M3_CLASS">{CLASS:Heavy Fighter \(M3\)}</macro>
    <macro id="M4_CLASS">{CLASS:Medium Fighter \(M4\)}</macro>
    <macro id="M5_CLASS">{CLASS:Light Fighter \(M5\)}</macro>
    <macro id="M6_CLASS">{CLASS:Corvette \(M6\)}</macro>
    <macro id="M7_CLASS">{CLASS:Frigate \(M7\)}</macro>
    <macro id="M7M_CLASS">{CLASS:Missile Frigate \(M7M\)}</macro>
    <macro id="M8_CLASS">{CLASS:Bomber \(M8\)}</macro>
    <macro id="TS_CLASS">{CLASS:Small Transport \(TS\)}</macro>
    <macro id="PTS_CLASS">{CLASS:Small Pirate Transport \(TS\)}</macro>
    <macro id="TL_CLASS">{CLASS:Large Transport \(TL\)}</macro>
    <macro id="PTL_CLASS">{CLASS:Large Pirate Transport \(TL\)}</macro>
    <macro id="TM_CLASS">{CLASS:Military Transport \(TM\)}</macro>
    <macro id="TP_CLASS">{CLASS:Personnel Transport \(TP\)}</macro>

    <!--Special-->

    <macro id="X_EDITOR">{TERMINOLOGY:X³ Editor} by DoubleShadow</macro>
    <macro id="HANDBOOK">{TERMINOLOGY:X² Programmer`s Handbook} by Kurt Fitzner</macro>
    <macro id="X_SERIES">{TERMINOLOGY:X-Series}</macro>
    <macro id="X_STUDIO">{TERMINOLOGY:X-Studio}</macro>
    <macro id="EXSCRIPTOR">{TERMINOLOGY:eXscriptor}</macro>
    <macro id="MD">{TERMINOLOGY:Mission Director}</macro>
    <macro id="MSCI">{TERMINOLOGY:M.S.C.I.}</macro>
    <macro id="X2">{TERMINOLOGY:X² - The Threat}</macro>
    <macro id="X3R">{TERMINOLOGY:X³ - Reunion}</macro>
    <macro id="X3TC">{TERMINOLOGY:X³ - Terran Conflict}</macro>
    <macro id="X3AP">{TERMINOLOGY:X³ - Albion Prelude}</macro>





<!-- ******************************************* -->
<!-- **             Stock Phrases             ** -->
<!-- ******************************************* -->

    <!--X-Studio-->
    <macro id="ABOUT_MACROS">
      {HEADING:Macros}

      Macros are not real commands, they are convenient placeholders for a small series of commands.  As such they will appear in EXSCRIPTOR and MSCI as an ordinary block of commands.  This macro will appear as:
    </macro>


    <macro id="UNDOCUMENTED">
      [b][red]The functionality of this command is unknown.[/red][/b]

      If you know how this command works, please right-click on this command and click `Submit Correction`.
    </macro>


    <macro id="NOT_IMPLEMENTED">This command was never implemented by Egosoft.</macro>


    <!--Arrays-->
    <macro id="ABOUT_COPYING_ARRAYS">
      {HEADING:Copying Vs. Linking Arrays}

      The code below will not copy the contents of the array {VARIABLE:$aShips}, it will link {VARIABLE:$aShipsCopy} to the contents of the array {VARIABLE:$aShips} so that any changes to the array will be reflected in both variables.
      [center]{VARIABLE:$aShipsCopy} = {VARIABLE:$aShips}[/center]
    </macro>


    <!--Asteroids-->
    <macro id="ABOUT_MINERAL_TYPES">The {PROPERTY:mineral type} is the SUBTYPE of a WARE from the 'WareM' TFILE, the default values are: [center]{OBJECT:Ore} = 0\t{OBJECT:Silicon} = 1\t{OBJECT:Nvidium} = 2\t{OBJECT:Ice} = 3[/center]</macro>



    <!--JumpGates-->
    <macro id="ROUTE_CALCULATIONS">
      {HEADING:Route Calculations}

      This commands internally calculates the shortest route in {UNITS:meters} rather than {PROPERTY:jump distance}.
      In certain circumstances where SECTOR JUMPGATES are far apart, this command will always use the shortest, fastest route.
    </macro>


    <macro id="ABOUT_JUMPGATE_ID">
      {HEADING:Jump Gate IDs}

      In the vanilla map, each {PROPERTY:jump gate ID} corresponds to the direction of travel:
      [center]{VARIABLE:0} - [b]Northern[/b]\t{VARIABLE:1} - [b]Eastern[/b]\t{VARIABLE:2} - [b]Southern[/b]\t{VARIABLE:3}- [b]Western[/b][/center]
    </macro>



    <!--Game Concepts-->

    <macro id="ABOUT_AL_PLUGINS">
      {HEADING:Artificial Life Plugins}

      AL_PLUGINS are scripts that are called by the game engine in response to a timer to create the illusion of a changing galaxy.  The events are listed below:

      {CONSTANT:init} - User started a new game
      {CONSTANT:reinit} - User loaded a save game
      {CONSTANT:start} - User has commanded plugin to start
      {CONSTANT:stop} - User has commanded plugin to stop
      {CONSTANT:timer} - Sent every x seconds so plugin can perform tasks
      {CONSTANT:isenabled} - Queries whether the plugin is enabled
    </macro>

    <macro id="ABOUT_ENVIRONMENT">
      {HEADING:Environment}

      The {CONSTANT:\[ENVIRONMENT\]} constant reflects the container of an OBJ.  If an OBJ is in space then the {PROPERTY:environment} is the SECTOR, if an OBJ is DOCKED then the {PROPERTY:environment} is the {CLASS:Carrier} or STATION with which it is DOCKED.
    </macro>


    <macro id="ABOUT_GUNS_AND_TURRETS">
      {HEADING:Guns and Turrets}

      Each TURRET on a SHIP defines the position and angle from which a SHIP can fire.  Each TURRET may contain one or more GUNS in individually numbered {PROPERTY:gun slots}.  Each GUN has different properties which define the amount of damage and rate of fire.

      The {PROPERTY:main turret} on any SHIP is always TURRET zero.
    </macro>


    <macro id="ABOUT_LOCAL_AND_GLOBAL_VARIABLES">
      {HEADING:Local and Global Variables}

      You can store any value in a SHIP or STATION using a {PROPERTY:local variable}.  This value will remain until you alter it, or the OBJ is destroyed.  Each {PROPERTY:local variable} within an OBJ must have a unique name.
      Only {TERMINOLOGY:Albion Prelude 2.5.3} or newer will allow you to store values in SECTORS.

      You can store any value into the game universe using a {PROPERTY:global variable}.  This value will remain until you set it to NULL.  Each {PROPERTY:global variable} must have a unique name.{CORRECTION:Jack08}
    </macro>


    <macro id="ABOUT_MAINTYPES_AND_SUBTYPES">
      {HEADING:MainTypes and SubTypes}

      The OBJTYPE of every OBJ in the game is defined by a category and ID.  Each category is called a MAINTYPE, and each item within a category is called a SUBTYPE. The {TYPE:Argon Buster} is a SUBTYPE in the {CONSTANT:SSTYPE_SHIPS} MAINTYPE, for example, and the {TYPE:FireFly Missile} is a SUBTYPE in the {CONSTANT:SSTYPE_MISSILES} MAINTYPE.

      This only defines the OBJTYPE of an OBJ - each {TYPE:Firefly Missile} fired in the game is unique, but they are all of the OBJTYPE {TYPE:FireFly Missile}.
    </macro>


    <macro id="ABOUT_NOTORIETY">
      {HEADING:Notoriety}

      {PROPERTY:Notoriety} determines how friendly a RACE, CORPORATION or the player is towards another RACE.  These values also define the player`s {PROPERTY:trade rank}, {PROPERTY:fight rank} and {PROPERTY:mission rank}, although the titles used for each type are different.

      {HEADING:Notoriety Ranks}

      Rank index {CONSTANT:-5} = Raw value between -1,000,000 and -100,000
      Rank index {CONSTANT:-4} = Raw value between -100,000 and -10,000
      Rank index {CONSTANT:-3} = Raw value between -10,000 and -1,000
      Rank index {CONSTANT:-2} = Raw value between -1,000 and -100
      Rank index {CONSTANT:-1} = Raw value between -100 and -10
      Rank index  {CONSTANT:0} = Raw value between -10 and +10
      Rank index  {CONSTANT:1} = Raw value between 10 and 33
      Rank index  {CONSTANT:2} = Raw value between 33 and 100
      Rank index  {CONSTANT:3} = Raw value between 100 and 333
      Rank index  {CONSTANT:4} = Raw value between 333 and 1,000
      Rank index  {CONSTANT:5} = Raw value between 1,000 and 3,333
      Rank index  {CONSTANT:6} = Raw value between 3,333 and 10,000
      Rank index  {CONSTANT:7} = Raw value between 10,000 and 33,333
      Rank index  {CONSTANT:8} = Raw value between 33,333 and 100,000
      Rank index  {CONSTANT:9} = Raw value between 100,000 and 333,333
      Rank index {CONSTANT:10} = Raw value between 333,333 and 1,000,000

      {HEADING:Effects of Rank}

      At rank index {CONSTANT:-3} or below, SHIPS are attacked in {PROPERTY:border sectors}
      At rank index {CONSTANT:-2} or below, SHIPS are attacked in {PROPERTY:core sectors}
      At rank index {CONSTANT:0} or above, SHIPS may dock in {PROPERTY:border sectors}
      At rank index {CONSTANT:1} or above, SHIPS may dock in {PROPERTY:core sectors}
    </macro>


    <macro id="ABOUT_OBJECT_CLASSES">
      {HEADING:Object Classes}

      Every {TYPE:object} belongs to one or more OBJCLASSES such as {CLASS:Ship}, {CLASS:Station} or {CLASS:Huge Ship}.  Some OBJCLASSES contain other OBJCLASSES, eg. {CLASS:Station} contains {CLASS:Factory} and {CLASS:Dock}.
    </macro>


    <macro id="ABOUT_RACE_LOGIC">
      {HEADING:Race Logic}

      {TERMINOLOGY:Race Logic} is used to control SHIPS that do not belong to the player.  If you wish to create and control OBJS of another RACE, you must disable {TERMINOLOGY:Race Logic} or the game engine will usurp your control of the OBJ.
    </macro>


    <macro id="ABOUT_START_ACTIONS">
      {HEADING:Start Actions}

      Certain OBJCLASSES execute a pre-determined {TYPE:command} when they are created:

      » {M0_CLASS} and {M1_CLASS} and {M2_CLASS} and {M6_CLASS}

      Always {CONSTANT:\[COMMAND_KILL_ENEMIES\]}

      » {M3_CLASS} and {M4_CLASS} and {M4_CLASS}

      If SHIP is {PROPERTY:player owned} then {CONSTANT:\[COMMAND_NONE\]}
      If SHIP has a {PROPERTY:formation leader} then {CONSTANT:\[COMMAND_PROTECT\]}
      If SHIP is under attack then {CONSTANT:\[COMMAND_ATTACK\]}
      If SHIP is {PROPERTY:Xenon}, {PROPERTY:Pirate} or {PROPERTY:Kh`aak} then {CONSTANT:\[COMMAND_KILL_ENEMIES\]}
      If none of the above then {CONSTANT:\[COMMAND_RETURN_HOME\]}

      » {TS_CLASS}

      If {PROPERTY:player owned} then {CONSTANT:\[COMMAND_NONE\]}
      If SHIP has a {PROPERTY:homebase} then {CONSTANT:\[COMMAND_RETURN_HOME\]}
      If none of the above then {CONSTANT:\[COMMAND_DOCKAT\]}

      » {CLASS:Goner Ship} - If {PROPERTY:player owned} then {CONSTANT:\[COMMAND_NONE\]} otherwise {CONSTANT:\[COMMAND_PREACH\]}
      » {CLASS:SpaceFly} - Always {CONSTANT:\[COMMAND_FOLLOW\]}
      » {CLASS:UFO} - Always {CONSTANT:\[COMMAND_PREACH\]}

      All other OBJCLASSES start with {CONSTANT:\[COMMAND_NONE\]}
    </macro>



    <!--Marines and Boarding-->
    <macro id="ABOUT_MARINE_SKILLS">
      {HEADING:Marine Skills}

      Each MARINE has four skills: {PROPERTY:fighting}, {PROPERTY:hacking}, {PROPERTY:engineering} and {PROPERTY:mechanical}, which are numbered between 0 and 100 \(in the vanilla game\).  Each skill is used to affect different parts of the boarding procedure.
    </macro>


    <macro id="ABOUT_BOARDING_PROCEDURE">
      {HEADING:Boarding Procedure}

      The boarding procedure is a three part process:

      [i]Breaching the Hull:[/i] The success of this procedure is dependent on a {TYPE:marine`s} {PROPERTY:mechanical skill}, the use of a {OBJECT:Boarding Pod}, the {PROPERTY:defence level} of the SHIP and the presence of {OBJECT:Hull Polarising Device}.

      [i]Fighting the Crew:[/i] The success of this procedure is dependent on a {TYPE:marine`s} {PROPERTY:fighting skill} and the presence of {OBJECT:Internal Sentry Lasers}.

      [i]Hacking the Computer:[/i] The success of this procedure is dependent on a {TYPE:marine`s} {PROPERTY:hacking skill} and the {PROPERTY:security level} of the SHIP.

      The {PROPERTY:engineering skill} does not affect the success of the boarding procedure, instead it reduces the level of damage done to the target SHIP.
    </macro>


    <macro id="ABOUT_MARINE_STORAGE">
      {HEADING:Marine Storage}

      Only STATIONS and the following classes of SHIP are capable of containing MARINES:
      [center]{M1_CLASS}\t{M2_CLASS}\t{M6_CLASS}\t{M7_CLASS}
      \t{TL_CLASS}\t{TM_CLASS}\t{TP_CLASS}[/center]
    </macro>


    <macro id="ABOUT_BOARDING_TARGETS">
      {HEADING:Boarding Targets}

      Only the following classes of SHIP are capable of being boarded by MARINES:
      [center]{M1_CLASS}\t{M2_CLASS}\t{M6_CLASS}\t{M7_CLASS}
      {TL_CLASS}\t{TM_CLASS}[/center]
    </macro>



    <!--Rotation System-->
    <macro id="ABOUT_OBJECT_ROTATION">
      {HEADING:Object Rotation}

      The direction in which every object faces is defined by it`s alignment on three axes: x, y and z.
      [center]x-axis : {PROPERTY:yaw}\ty-axis : {PROPERTY:pitch}\tz-axis : {PROPERTY:roll}[/center]
    </macro>



    <!--Sectors-->
    <macro id="ABOUT_SECTOR_SECURITY">
      {HEADING:Sector Security}

      The {PROPERTY:security} of a SECTOR determines the {PROPERTY:player rank} required to enter the SECTOR and trade with the STATIONS within it.  A lower {PROPERTY:player rank} is required for {PROPERTY:border sectors} than for {PROPERTY:core sectors}.

      {OBJECT:Unknown Sectors} and {OBJECT:Xenon Sectors} have no {PROPERTY:security} rating and can be entered freely.
    </macro>


    <!--SectorObjects-->
    <macro id="ABOUT_SECTOR_OBJECTS">
      {HEADING:Sector Objects}
      When a SECTOR is rendered, each OBJ in the SECTOR is given a SECTOROBJECT in turn, starting with the SECTOR itself which is usually followed by the SUN, NEBULAE, then STATIONS, SHIPS, and ASTEROIDS.

      The {TERMINOLOGY:Sector Object ID} is an INTEGER that starts at one for the first OBJ rendered in the first SECTOR entered after a new game is started or loaded, and increases by one for every new one created.  When a SHIP enters the rendered SECTOR, a new SECTOROBJECT with a unique ID is created.  When it leaves, it is destroyed.

      {SEE_HANDBOOK_PAGE:72}
    </macro>


    <!--Script Execution-->
    <macro id="COMMAND_INTERRUPTABLE">
      {HEADING:Interrupt Point}

      Your script will yield execution to other scripts and signals during this command.
    </macro>


    <macro id="ABOUT_COMMANDS_TASKS_AND_SIGNALS">
      {HEADING:Commands, Tasks and Signals}

      Each OBJ can concurrently execute an unlimited number of scripts, with each script representing a {TYPE:command} or a {TYPE:signal}.

      The OBJ assigns each script a {PROPERTY:task ID}, the first twenty of which have a pre-defined purpose.

      » To run two scripts concurrently, you should run them as different {PROPERTY:tasks}.
      » To stop one script and execute another, you should run them on the same {PROPERTY:task}.
      » To pause a script while you execute another, and then resume the original script, you should {TERMINOLOGY:interrupt} the script on the same {PROPERTY:task}.

      All {TYPE:signals} use the {TERMINOLOGY:interrupt} method of execution.  You must choose the execution method of script calls.
    </macro>


    <macro id="ABOUT_INTERRUPTS_AND_YIELDING">
      {HEADING:Interrupts and Yielding}

      When a script reaches an {TERMINOLOGY:interruptable} command, it will yield to other scripts in the game.  The following special actions can also occurr at {TERMINOLOGY:interrupt points}:

      » If another command has been ordered to execute in the same {PROPERTY:task}, the script will be terminated at the first {TERMINOLOGY:interrupt point} and the new command will begin.

      » If another script has been ordered to {TERMINOLOGY:interrupt} this {PROPERTY:task}, the new script will wait until the first {TERMINOLOGY:interrupt point}, execute, finish, then resume the original script.

      {RELATED_COMMAND_3:To execute a script serially or concurrently or as an interrupt,call script,begin task,interrupt with script,Flow Control}
    </macro>


    <!--Strings-->
    <macro id="LOADTEXT_REQUIREMENT">If the STRING resides in a custom {TERMINOLOGY:Language Strings File}, you must have previously loaded that file or this command will return a STRING containing a `read text:` error.</macro>


    <!--Unit Indicies-->
    <macro id="ABOUT_JUMP_DISTANCES">All {PROPERTY:jump distances} are zero-based.</macro>




<!-- ******************************************* -->
<!-- **        Parameterized Phrases          ** -->
<!-- ******************************************* -->


    <!--Debugging-->
    <macro id="TODO" parameters="1">[b][red]WIP: %s[/red][/b]</macro>



    <!--Related Commands-->
    <macro id="RELATED_COMMAND" parameters="3">
      {HEADING:Related Commands}

      %s, see the {COMMAND:%s} command in the [b]%s[/b] category of [i]Script Commands[/i]
    </macro>


    <macro id="RELATED_COMMAND_2" parameters="4">
      {HEADING:Related Commands}

      %s, see the {COMMAND:%s} and {COMMAND:%s} commands in the [b]%s[/b] category of [i]Script Commands[/i]
    </macro>


    <macro id="RELATED_COMMAND_3" parameters="5">
      {HEADING:Related Commands}

      %s, see the {COMMAND:%s}, {COMMAND:%s} and {COMMAND:%s} commands in the [b]%s[/b] category of [i]Script Commands[/i]
    </macro>


    <macro id="INLINE_RELATED_COMMAND" parameters="3">%s, see the {COMMAND:%s} command in the [b]%s[/b] category of [i]Script Commands[/i]</macro>


    <macro id="INLINE_RELATED_COMMAND_2" parameters="4">%s, see the {COMMAND:%s} and {COMMAND:%s} commands in the [b]%s[/b] category of [i]Script Commands[/i]</macro>



    <!--Related Lists-->
    <macro id="RELATED_GAME_OBJECT_LIST" parameters="2">
      {HEADING:See Also}

      For a full list of available %s, see the [b]%s[/b] category of [i]Game Objects[/i].
    </macro>


    <macro id="RELATED_SCRIPT_OBJECT_LIST" parameters="2">
      {HEADING:See Also}

      For a full list of available %s, see the [b]%s[/b] category of [i]Script Objects[/i].
    </macro>


    <macro id="RELATED_COMMAND_LIST" parameters="2">
      {HEADING:See Also}

      For a full list of available %s commands, see the [b]%s[/b] category of [i]Script Commands[/i].
    </macro>

    <macro id="RELATED_MEDIA" parameters="1">
      {HEADING:See Also}

      For a full list of available [i]%s[/i], see the [i]Media Browser[/i].
    </macro>



    <!--Co-Ordinate System-->
    <macro id="COORDINATES" parameters="4">
      {HEADING:Positioning Objects}

      The %s is positioned at the co-ordinates \(x, y, z\) in the following order:
      [center]x=$%s, y=$%s, z=$%s.[/center]
    </macro>


    <!--External Reference-->
    <macro id="SEE_HANDBOOK_AND_XEDITOR" parameters="1">
      {HEADING:See Also}

      You can use the X_EDITOR to browse available %s, or see the HANDBOOK.
    </macro>


    <macro id="SEE_HANDBOOK" parameters="1">
      {HEADING:See Also}

      See the HANDBOOK to browse available %s.
    </macro>


    <macro id="SEE_HANDBOOK_PAGE" parameters="1">See page %s of the HANDBOOK for further information.</macro>


    <macro id="SEE_XEDITOR" parameters="1">
      {HEADING:See Also}

      You can use the X_EDITOR to browse available %s.
    </macro>



    <!--Command Compatibility-->
    <macro id="COMPATIBILITY_1" parameters="1">
      {HEADING:Compatibility}

      This is one of the few commands Egosoft modified over the course of the X_SERIES.
      This command is compatible with: {%s}.
    </macro>

    <macro id="COMPATIBILITY_2" parameters="2">
      {HEADING:Compatibility}

      This is one of the few commands Egosoft modified over the course of the X_SERIES.
      This command is compatible with: {%s} and {%s}.
    </macro>

    <macro id="COMPATIBILITY_3" parameters="3">
      {HEADING:Compatibility}

      This is one of the few commands Egosoft modified over the course of the X_SERIES.
      This command is compatible with: {%s}, {%s} and {%s}.
    </macro>

    <macro id="COMMAND_NAME_CHANGED" parameters="1">
      {HEADING:X-Studio Specific}

      This command has been renamed by X-Studio for greater clarity but will be displayed using the original name in EXSCRIPTOR and the MSCI.

      Original command name: {COMMAND:%s}
    </macro>



    <!--Fly Command Descriptions-->
    <macro id="RETURNS_FLIGHT_CODE">This command returns one of the following {TYPE:flight return codes} upon completion:</macro>

    <macro id="FLIGHT_BREAK" parameters="1">{CONSTANT:\[FLRET_BREAK\]} - The %s was interruped by the execution of another command</macro>

    <macro id="FLIGHT_BREAK_JUMPED" parameters="1">{CONSTANT:\[FLRET_BREAK\]} - The target SHIP $%s has been destroyed or jumped to another SECTOR</macro>

    <macro id="FLIGHT_ERROR" parameters="1">{CONSTANT:\[FLRET_ERROR\]} - The SHIP was unable to complete the %s due to an error</macro>

    <macro id="FLIGHT_INTERRUPTED" parameters="1">{CONSTANT:\[FLRET_INTERRUPTED\]} - The %s was interruped by the execution of another script</macro>

    <macro id="FLIGHT_INVALIDPARAMS">{CONSTANT:\[FLRET_INVALIDPARAMS\]} - The SHIP $0 does not exist</macro>

    <macro id="FLIGHT_NOCOMMANDS" parameters="1">{CONSTANT:\[FLRET_NOCOMMANDS\]} - The %s completed successfully</macro>

    <macro id="FLIGHT_TIMEOUT" parameters="1">{CONSTANT:\[FLRET_TIMEOUT\]} - The timeout period $%s has elapsed</macro>




    <!--Search Command Descriptions-->
    <macro id="SEARCH_SYNTAX" parameters="1">If no matching %s can be found then this command returns NULL.  There are a number of optional search parameters explained below that you can omit or combine to refine the search.  To omit a parameter, set it to NULL.</macro>

    <macro id="SEARCH_RANGE" parameters="3">The %s must be within a {PROPERTY:jump distance} of $%s from the SECTOR $%s.</macro>

    <macro id="SEARCH_RANGE_DIFFERENT" parameters="2">If $%s is NULL then the SECTOR containing $%s is used instead.</macro>

    <macro id="SEARCH_BY_DISTANCE" parameters="3">Only return %s that are within $%s {UNITS:meters} of the {TYPE:object} $%s</macro>

    <macro id="SEARCH_BY_DISTANCE_2" parameters="4">Only return %s within $%s {UNITS:meters} of the {TYPE:object} $%s or the {PROPERTY:position} $%s</macro>

    <macro id="SEARCH_EXCLUDE_ARRAY" parameters="2">Do not return of any of the %s in the ARRAY $%s</macro>

    <macro id="SEARCH_BY_SERIAL" parameters="1">Only return STATIONS with the SERIAL $%s</macro>

    <macro id="SEARCH_BY_TYPE_CLASS" parameters="2">Only return %s with an OBJCLASS or OBJTYPE of $%s</macro>

    <macro id="SEARCH_BY_MAINTYPE_SUBTYPE" parameters="3">Only return %s with a MAINTYPE of $%s and SUBTYPE of $%s</macro>

    <macro id="SEARCH_BY_RACE" parameters="2">Only return %s OWNEDBY the RACE $%s</macro>

    <macro id="SEARCH_BY_FLAGS" parameters="2">Only return %s matching the FLAGS $%s</macro>

    <macro id="SEARCH_BY_MAXIMUM_PRICE" parameters="2">Only return %s with a maximum {PROPERTY:ware price} of $%s credits</macro>
    <macro id="SEARCH_BY_MINIMUM_PRICE" parameters="2">Only return %s with a minimum {PROPERTY:ware price} of $%s credits</macro>

    <macro id="SEARCH_BY_QUANITY_BUY" parameters="2">Only return %s willing to buy a {PROPERTY:ware quantity} of $%s units or more</macro>
    <macro id="SEARCH_BY_QUANITY_SELL" parameters="2">Only return %s with a {PROPERTY:ware quantity} of $%s units or more</macro>
    <macro id="SEARCH_BY_TRADER" parameters="2">Only return {PROPERTY:known} %s at which $%s may dock and trade</macro>


    <!--Search Command Flags-->
    <macro id="FLAG_RANDOM" parameters="1">{CONSTANT:\[Find.Random\]} - Return a random %s from those matching the criteria</macro>

    <macro id="FLAG_NEAREST" parameters="2">{CONSTANT:\[Find.Nearest\]} - Return the %s closest to the {TYPE:object} $%s</macro>

    <macro id="FLAG_NEAREST_2" parameters="3">{CONSTANT:\[Find.Nearest\]} - Return the %s closest to the {TYPE:object} $%s or {PROPERTY:position} $%s</macro>

    <macro id="FLAG_VISIBLE" parameters="2">{CONSTANT:\[Find.Visible\]} - Return %s that are within scanner range of the {TYPE:object} $%s</macro>

    <macro id="FLAG_KNOWN" parameters="1">{CONSTANT:\[Find.Known\]} - Return %s that are known to the player</macro>

    <macro id="FLAG_RACE_LOGIC">{CONSTANT:\[Find.RaceLogicEnabled\]} - Return only SHIPS that have {PROPERTY:race logic} enabled</macro>

    <macro id="FLAG_INCLUDE_DOCKED">{CONSTANT:\[Find.IncludeDocked\]} - Return SHIPS that are currently docked</macro>

    <macro id="FLAG_WING_ONLY">{CONSTANT:\[Find.WingOnly\]} - Return only SHIPS that are part of a WING</macro>

    <macro id="FLAG_EXACT_JUMPS" parameters="2">{CONSTANT:\[Find.ExactJumps\]} - Return %s with a precise {PROPERTY:jump distance} of $%s</macro>

    <macro id="FLAG_DOCKING_ALLOWED" parameters="2">{CONSTANT:\[Find.DockingAllowed\]} - Return %s at which the {TYPE:object} $%s may dock</macro>

    <macro id="FLAG_MULTIPLE" parameters="2">{CONSTANT:\[Find.Multiple\]} - Return up to $%s %s</macro>

    <macro id="FLAG_MULTIPLE_UNLIMITED" parameters="1">{CONSTANT:\[Find.Multiple\]} - Return multiple %s</macro>

    <macro id="FLAG_FRIEND" parameters="2">{CONSTANT:\[Find.Friend\]} - Return %s that are a {PROPERTY:friend} of the {TYPE:object} $%s</macro>
    <macro id="FLAG_ENEMY" parameters="2">{CONSTANT:\[Find.Enemy\]} - Return %s that are an {PROPERTY:enemy} of the {TYPE:object} $%s</macro>
    <macro id="FLAG_NEUTRAL" parameters="2">{CONSTANT:\[Find.Neutral\]} - Return %s that are {PROPERTY:neutral} towards the {TYPE:object} $%s</macro>

    <macro id="FLAG_NO_EXACTJUMPS" parameters="1">{CONSTANT:\[Find.ExactJumps\]} - This command does not search SECTORS other than $%s</macro>

    <macro id="FLAG_NO_MULTIPLE" parameters="1">{CONSTANT:\[Find.Multiple\]} - This command returns a single %s</macro>

    <macro id="FLAG_NO_RELATIONS" parameters="1">{CONSTANT:\[Find.Friend\]}, {CONSTANT:\[Find.Enemy\]}, {CONSTANT:\[Find.Neutral\]} - These have no bearing upon %s</macro>



    <!--Search Command Info-->
    <macro id="FLAGS_COMBINING" parameters="2">{TERMINOLOGY:Search flags} can be combined using the {TERMINOLOGY:bitwise-or} operator but you must save them in a variable before use. eg. {VARIABLE:$iFlags} = {CONSTANT:\[Find.%s\]} | {CONSTANT:\[Find.%s\]}</macro>

    <macro id="FLAGS_DEPENDENCY" parameters="2">{CONSTANT:\[Find.%s\]} requires you also use {CONSTANT:\[Find.%s\]}</macro>

    <macro id="FLAGS_MULTIPLE_NEAREST">Combining {CONSTANT:\[Find.Multiple\]} and {CONSTANT:\[Find.Nearest\]} sorts the results by ascending {PROPERTY:distance}.</macro>

    <macro id="FLAGS_MUTUTALLY_EXCLUSIVE_2" parameters="2">{CONSTANT:\[Find.%s\]} and {CONSTANT:\[Find.%s\]} are mutually exclusive</macro>

    <macro id="FLAGS_MUTUTALLY_EXCLUSIVE_3" parameters="3">{CONSTANT:\[Find.%s\]}, {CONSTANT:\[Find.%s\]} and {CONSTANT:\[Find.%s\]} are mutually exclusive</macro>

    <macro id="FLAGS_REFERENCE_REQUIREMENT" parameters="2">You can only use an {TYPE:object} $%s or a {PROPERTY:position} $%s, not both.</macro>

    <macro id="FLAGS_RELATION_REQUIREMENT" parameters="1">The {PROPERTY:relation} FLAGS require the {TYPE:object} $%s to be a descendant of the {CLASS:Ship} or {CLASS:Station} OBJCLASS.</macro>






  </macros>


</language>